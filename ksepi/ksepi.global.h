/*
 *  ksepi.global.h
 *
 *  Do not edit this file. It is automatically generated by EPIC.
 *
 *  Date : Nov 24 2018
 *  Time : 13:36:59
 */

#ifndef h_ksepi_global_h
#define h_ksepi_global_h

/*
 * global
 * Globally used definitions
 * These are shared between host and target compilation
 * Items used in this section are candidates for serialization
 * and as such will introduce endian conversion code
 */

#include "acquisition_control.h"
#include "ca_filt.h"
#include "CoilParameters.h"
#include "coilsupportDefs.h"
#include "config_platform_hw.h"
#include "dabrecord_common.h"
#include "entrypttab.h"
#include "epic_advisory_panel.h"
#include "epic_algorithm_control.h"
#include "epic_application_ranges.h"
#include "epic_anatomy.h"
#include "epic_entry_points.h"
#include "epic_geometry_types.h"
#include "epic_hw_defs.h"
#include "epic_ifcc_sizes.h"
#include "epic_pulse_structs.h"
#include "epic_recon_control.h"
#include "epic_regulatory.h"
#include "epic_rsp_sizes.h"
#include "epic_sar_communication.h"
#include "epic_slice_order_types.h"
#include "epic_ssp_defs.h"
#include "epic_system_defs.h"
#include "epic_ui_control.h"
#include "epic_usercv.h"
#include "epic_waveform_types.h"
#include "filter_defs.h"
#include "GElimits.h"
#include "GEtypes.h"             /* type definitions from GEtypes project*/
#include "gradient_pulse_types.h"
#include "gradSpec.h"
#include "hoec_defines.h"  /* HOEC */
#include "IfccPSDShared.h"
#include "log_grad_struct.h"
#include "op_recn.h"
#include "pgen_epic.h"
#include "physics_constants.h"
#include "physioHwDefs.h"
#include "prescan_defs.h"
#include "psdexitarg.h"
#include "recon_filter_defs.h"
#include "ReconHostPSDShared.h"
#include "round_int_macros.h"
#include "seqCfg.h"
#include "slice_factor.h"  
#include "supp_macros.h"
#include "transmit_chain.h"
#include "usage_tag.h"

/*
 * Miscellaneous entries. Candidates for relocation to other, more
 * specific headers.
 */
#include "psd_common_global_includes.h"

/*
 * Copyright 2017 General Electric Company.  All rights reserved.
 */

/*
 * epic_cvconst.eh
 *
 * This EPIC source file declares the variables used to communicate
 * between host applications (scn, ifcc, psc, etc) and PSDs.  This file
 * is used to generate "cv_const.h" which assigns an integer for use
 * in referencing each CV fromi many psdIF APIs.  Therefore, it is 
 * critical that the variable names and order match between the PSD and
 * host applications.  The @revision must be changed accordingly as
 * indicated below.
 *
 * This file is included in epic.h
 *
 */

/*
 * A revision number change is mandatory when variables are added to or
 * removed from @reqcv.  A revision number change is also mandatory when
 * variables ared added to or removed from @reqexport unless a variable
 * is added at to end, in which case a revision number change is
 * not necessary for testing purposes.  
 */

/*
 * Do not insert new @ EPIC directives in this file!
 */

/*******************************************************************************************************
 * Neuro MR Physics group
 * Department of Neuroradiology
 * Karolinska University Hospital
 * Stockholm, Sweden
 *
 * Filename : GERequired.e
 *
 * Authors  : Stefan Skare, Enrico Avventi, Henric Ryd√©n, Ola Norbeck
 * Date     : 2019-Feb-15
 * Version  : 2.2
 *******************************************************************************************************
 * This code is shared under a specific licence agreement available on GE's collaboration portal, which
 * regulates the use of this software and states specifically that neither Karolinska University nor GE
 * Healthcare can be hold liable for anything related to the use of this software. Please consult this
 * legal document for details on collaborate.mr.gehealthcare.com. As with any other EPIC psd software,
 * compiled by an EPIC licenced user, it is to be used for research purposes only.
 *
 * The Neuro MR physics group at Karolinska University hospital encourages further modifications of, and
 * additions to, the provided PSDs and PSD modules. It is our hope that the KSFoundation library and
 * can provide a common base on top of which research users can share PSDs and PSD modules with each
 * other by e.g. adding branches or forks to the KSFoundation repository:
 * https://gitlab.com/neuromr_karolinska/psd_ksfoundation
 *******************************************************************************************************/

/**
********************************************************************************************************
* @file GERequired.e
* @brief This file has several sections that should be \@inline'd for a main pulse sequence
*        written entirely in KSFoundation EPIC. See instructions for each section on where to \@inline
********************************************************************************************************/




/*******************************************************************************************************
 *******************************************************************************************************
 *
 *  GERequired.e: Global section
 *
 *******************************************************************************************************
 *******************************************************************************************************/

#define GEREQUIRED_E

#include "grad_rf_empty.globals.h"

#ifndef MAX_ENTRY_POINTS
#define MAX_ENTRY_POINTS 15
#endif

#define MAX_TR_OVERSHOOT 200 /* 200 us round-up allowed per TR */

#if EPIC_RELEASE<26
#define DEFAULT_SCAN_INFO_HEAD .optloc = 0.0, .oprloc = 0.0, .opphasoff = 0.0
#else
#define DEFAULT_SCAN_INFO_HEAD .optloc = 0.0, .oprloc = 0.0, .opphasoff = 0.0, .optloc_shift = 0.0, .oprloc_shift = 0.0, .opphasoff_shift = 0.0, .opfov_freq_scale = 1.0, .opfov_phase_scale = 1.0, .opslthick_scale = 1.0
#endif

/* post-DV24 this is defined in $ESETOP/psd/include/epic_geometry_types.h */
#undef DEFAULT_AXIAL_SCAN_INFO
#define DEFAULT_AXIAL_SCAN_INFO { DEFAULT_SCAN_INFO_HEAD, .oprot = {1.0, 0.0, 0.0, \
                                                                    0.0, 1.0, 0.0, \
                                                                    0.0, 0.0, 1.0}}

#define DEFAULT_AX_SCAN_INFO_FREQ_LR DEFAULT_AXIAL_SCAN_INFO

#define DEFAULT_AX_SCAN_INFO_FREQ_AP { DEFAULT_SCAN_INFO_HEAD, .oprot = {0.0, 1.0, 0.0, \
                                                                        -1.0, 0.0, 0.0, \
                                                                         0.0, 0.0, 1.0}}

#define DEFAULT_SAG_SCAN_INFO_FREQ_SI { DEFAULT_SCAN_INFO_HEAD, .oprot = {0.0, 0.0, 1.0, \
                                                                          0.0, 1.0, 0.0, \
                                                                         -1.0, 0.0, 0.0}}

#define DEFAULT_SAG_SCAN_INFO_FREQ_AP { DEFAULT_SCAN_INFO_HEAD, .oprot = {0.0, 0.0, 1.0, \
                                                                          1.0, 0.0, 0.0, \
                                                                          0.0, 1.0, 0.0}}

#define DEFAULT_COR_SCAN_INFO_FREQ_SI { DEFAULT_SCAN_INFO_HEAD, .oprot = {0.0, 1.0, 0.0, \
                                                                          0.0, 0.0, 1.0, \
                                                                          1.0, 0.0, 0.0}}

#define DEFAULT_COR_SCAN_INFO_FREQ_LR { DEFAULT_SCAN_INFO_HEAD, .oprot = {-1.0, 0.0, 0.0, \
                                                                           0.0, 0.0, 1.0, \
                                                                           0.0, 1.0, 0.0}}


#include <math.h>
#if EPIC_RELEASE<26 && defined(HW_IO)
#include <stdioLib.h>
#else
#include <stdio.h>
#include <stdlib.h>
#endif

#if (EPIC_RELEASE > 27) || (EPIC_RELEASE == 27 && EPIC_PATCHNUM >= 3)
/* RX27_R03 requires bool to be assigned as Prescan.e->PSipg now includes addrfbits.h.
   For now typedef it here for RX27_R03 or later. Long term solution is likely to switch to g++ compiler
   for Host */
typedef int bool;
#endif

#include <string.h>

#include "em_psd_ermes.in"

#include "stddef_ep.h"
#include "epicconf.h"
#include "pulsegen.h"
#include "support_func.h"
#include "epic_error.h"
#include "epicfuns.h"
#include "epic_loadcvs.h"
#include "InitAdvisories.h"
#include "psdiopt.h"
#include "epic_iopt_util.h"
#include "filter.h"

#include <sokPortable.h>  /* includes for option key functionality */


/*********************************************************************
 *                    PRESCAN.E GLOBAL SECTION                       *
 *                            PSglobal                               *
 *                                                                   *
 * Common code shared between the Host and Tgt PSD processes.  This  *
 * section contains all the #define's, global variables and function *
 * declarations (prototypes).                                        *
 *********************************************************************/
#include "Prescan.h"

#include <stdio.h>
#include <sysDep.h>
#include <sysDepSupport.h>

#include "dynTG_sliceloc.h"

#define amp_killer 0.4
#define pw_killer 3600 
#define FA_FERMI_BLS 630

/* defines for pimrsaps CVs from op_prescan.h */
#define MRSAPS_OFF 0
#define MRSAPS_CFL 1
#define MRSAPS_TG 2
#define MRSAPS_VTG 2
#define MRSAPS_CFH 3
#define MRSAPS_TR 4
#define MRSAPS_FSEPS 9
#define MRSAPS_RCVN 12
#define MRSAPS_RFSHIM 13 
#define MRSAPS_DYNTG 14
#define MRSAPS_CAL 15 
#define MRSAPS_AUTOCOIL 16
#define MRSAPS_AWS 101
#define MRSAPS_AVS 102
#define MRSAPS_AS  103
#define MRSAPS_FTG 104
#define MRSAPS_XTG 116
#define MRSAPS_XTG_SPINE 117

/* defines for cfh_ti */
#define CFHTI_1HT 120000
#define CFHTI_3T  190000
#define CFHTE_1HT 50000
#define CFHTE_3T  30000
#define PSD_ISI_CFH (PSD_ISI0_BIT | PSD_ISI1_BIT)
#define PSCFH_SHIMVOL_DEBUG_X 1
#define PSCFH_SHIMVOL_DEBUG_Y 2
#define PSCFH_SHIMVOL_DEBUG_Z 4
#define PSCFH_SHIMVOL_DEBUG_NONE 0

#define PH_SEQUENTIAL   0 
#define PH_CENTRIC_LOW  1 
#define PH_CENTRIC_HIGH 2 
#define RFSHIM_SLQ 1 
#define DYNTG_SLQ  5
#define MAPTG_SLQ 1

#define B1RF1_SINC 0
#define B1RF1_TBW  1

#define MINFOV_TG 60.0 

/* defines for rcvn_filter */
#define RCVN_MIN_BW  4.0
#define RCVN_MAX_BW  62.5
#define RCVN_MIN_TR  250000

/* defines for Cal */
#define CAL_NONE_INTERLEAVED 0 
#define CAL_TR_INTERLEAVED 1 
#define CAL_NEX_INTERLEAVED 2 

/** Convert from microTesla to Gauss */
#define UTESLA2GAUSS 0.01

#define TR_PSCPASS  100000


#include "KSFoundation.h"


/*******************************************************************************************************
 *******************************************************************************************************
 *
 *  KSSpSat.e: Global section
 *
 *******************************************************************************************************
 *******************************************************************************************************/

enum {KSSPSAT_OFF, KSSPSAT_IMPLICIT, KSSPSAT_EXPLICIT};
enum {KSSPSAT_1, KSSPSAT_2, KSSPSAT_3, KSSPSAT_4, KSSPSAT_5, KSSPSAT_6, KSSPSAT_MAXNUMSAT};
enum {KSSPSAT_NEG=1, KSSPSAT_POS, KSSPSAT_HAD, KSSPSAT_PARA};
enum {KSSPSAT_RF_STD, KSSPSAT_RF_COMPLEX, KSSPSAT_RF_MAXRFTYPES};

#define KSSPSAT_MODULE_LOADED /* can be used to check whether the KSSpsat module has been included in a main psd */

#define KSSPSAT_DEFAULT_FLIP 95
#define KSSPSAT_DEFAULT_SPOILERSCALE 5.0
#define KSSPSAT_DEFAULT_SPOILALLAXES 1
#define KSSPSAT_DEFAULT_SSITIME 1000 /* try to reduce this value */

#define KSSPSAT_EXPLICITSAT_DISABLED 9990.0 /* Set by UI on MR-scanner */
#define KSSPSAT_IMPLICITSAT_DISABLED 9999.0 /* Set by UI on MR-scanner */

/** @brief #### `typedef struct` holding information about the prescribed FOV border (3D)
*/
typedef struct _KSSPSAT_VOLBORDER {
  float freq_min;
  float freq_max;
  float phase_min;
  float phase_max;
  float slice_min;
  float slice_max;
} KSSPSAT_VOLBORDER;
#define KSSPSAT_INIT_VOLBORDER {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}


/** @brief #### `typedef struct` holding information about one spatial saturation pulse location and thickness
*/
typedef struct _KSSPSAT_LOC {
  SCAN_INFO loc; /* .optloc [mm], .oprot */
  float thickness; /* [mm] */
  int gradboard; /* XGRAD, YGRAD, ZGRAD */
  int active; /* KSSPSAT_OFF, KSSPSAT_IMPLICIT, KSSPSAT_EXPLICIT */
} KSSPSAT_LOC;
#define KSSPSAT_INIT_LOC {DEFAULT_AXIAL_SCAN_INFO, 0, KS_NOTSET, KSSPSAT_OFF}

/** @brief #### `typedef struct` holding steering parameters for KSSpSat
*/
typedef struct _KSSPSAT_PARAMS {
  KSSPSAT_VOLBORDER volborder;
  float flip;
  int rftype;
  float spoilerscale; /* scale factor for postgrad spoiler for each selrf (ksspsat.selrf[i].crusherscale) */
  int spoilallaxes;
  int oblmethod;
  int ssi_time;
} KSSPSAT_PARAMS;
#define KSSPSAT_INIT_PARAMS {KSSPSAT_INIT_VOLBORDER, KSSPSAT_DEFAULT_FLIP, KSSPSAT_RF_COMPLEX, KSSPSAT_DEFAULT_SPOILERSCALE, KSSPSAT_DEFAULT_SPOILALLAXES, PSD_OBL_RESTRICT, KSSPSAT_DEFAULT_SSITIME}


/** @brief #### `typedef struct` holding all all gradients and waveforms for the KSSpSat sequence module
*/
typedef struct _KSSPSAT_SEQUENCE {
  KS_BASE base;
  KS_SEQ_CONTROL seqctrl;
  KSSPSAT_LOC satlocation;
  KS_SELRF selrf;
} KSSPSAT_SEQUENCE;
#define KSSPSAT_INIT_SEQUENCE {{0,0,NULL,sizeof(KSSPSAT_SEQUENCE)}, KS_INIT_SEQ_CONTROL, KSSPSAT_INIT_LOC, KS_INIT_SELRF}


/* Function prototypes */
int ksspsat_pg(KSSPSAT_SEQUENCE *ksspsat);
void ksspsat_scan_seqstate(KSSPSAT_SEQUENCE *ksspsat, float rfphase);



/*******************************************************************************************************
 *******************************************************************************************************
 *
 *  KSChemSat.e: Global section
 *
 *******************************************************************************************************
 *******************************************************************************************************/

enum {KSCHEMSAT_OFF, KSCHEMSAT_FAT, KSCHEMSAT_WATER};
enum {KSCHEMSAT_RF_STD, KSCHEMSAT_RF_SINC};

#define KSCHEMSAT_MODULE_LOADED /* can be used to check whether the KSChemsat module has been included in a main psd */

#define KSCHEMSAT_DEFAULT_FLIP 95
#define KSCHEMSAT_DEFAULT_SINCRF_BW_15T 150 /* for 1.5T */
#define KSCHEMSAT_DEFAULT_SINCRF_BW_3T 300 /* for 3T */
#define KSCHEMSAT_DEFAULT_SINCRF_TBP 4
#define KSCHEMSAT_DEFAULT_SPOILERAREA 5000
#define KSCHEMSAT_DEFAULT_SSITIME 1000 /* try to reduce this value */

/** @brief #### `typedef struct` holding steering parameters for KSChemSat
*/
typedef struct _KSCHEMSAT_PARAMS {
  int satmode;
  float flip;
  int rfoffset; /* [Hz] */
  int rftype;
  int sincrf_bw;
  int sincrf_tbp;
  float spoilerarea;
  int ssi_time;
} KSCHEMSAT_PARAMS;
#define KSCHEMSAT_INIT_PARAMS {KSCHEMSAT_OFF, KSCHEMSAT_DEFAULT_FLIP, 0, KSCHEMSAT_RF_STD, KSCHEMSAT_DEFAULT_SINCRF_BW_3T, KSCHEMSAT_DEFAULT_SINCRF_TBP, KSCHEMSAT_DEFAULT_SPOILERAREA, KSCHEMSAT_DEFAULT_SSITIME}

/** @brief #### `typedef struct` holding all information about the KSChemSat sequence module incl. all gradients and waveforms
*/
typedef struct _KSCHEMSAT_SEQUENCE {
  KS_BASE base;
  KS_SEQ_CONTROL seqctrl;
  KSCHEMSAT_PARAMS params;
  KS_RF rf;
  KS_TRAP spoiler;
} KSCHEMSAT_SEQUENCE;
#define KSCHEMSAT_INIT_SEQUENCE {{0,0,NULL,sizeof(KSCHEMSAT_SEQUENCE)}, KS_INIT_SEQ_CONTROL, KSCHEMSAT_INIT_PARAMS, KS_INIT_RF, KS_INIT_TRAP}


/* Function prototypes */
int kschemsat_pg(KSCHEMSAT_SEQUENCE *chemsat);

/*******************************************************************************************************
 *******************************************************************************************************
 *
 *  KSInversion.e: Global section
 *
 *******************************************************************************************************
 *******************************************************************************************************/

enum {KSINV_OFF, KSINV_IR_SIMPLE, KSINV_IR_SLICEAHEAD, KSINV_FLAIR_BLOCK, KSINV_FLAIR_T2PREP_BLOCK};
enum {KSINV_RF_STD, KSINV_RF_ADIABATIC, KSINV_RF_CUSTOM};
typedef enum {KSINV_LOOP_NORMAL, KSINV_LOOP_DUMMY, KSINV_LOOP_SLICEAHEAD_FIRST, KSINV_LOOP_SLICEAHEAD_LAST} KSINV_LOOP_MODE;

#define KSINV_MODULE_LOADED /* can be used to check whether the KSInversion module has been included in a main psd */

#define KSINV_DEFAULT_FLIP 180
#define KSINV_DEFAULT_SPOILERAREA 5000
#define KSINV_DEFAULT_SSITIME 1000 /* try to reduce this value */
#define KSINV_DEFAULT_STARTPOS 100
#define KSINV_FILLTR_SSITIME 1000 /* try to reduce this value */
#define KSINV_MINTR_T2FLAIR 8000000 /* default minTR [us] for T2FLAIR, 8 [s] */
#define KSINV_MINTR_T1FLAIR 1300000 /* default minTR [us] for T1FLAIR, 1.3 [s] */
#define KSINV_MAXTR_T1FLAIR 2500000 /* default maxTR [us] for T1FLAIR, 2.5 [s] */
#define KSINV_MAXTHICKFACT 3.0 /* how much the inversion slice thickness may increase over opslthick */

/* values in [ms] */
#define T1_CSF_3T   4500
#define T1_CSF_1_5T 3600
#define T1_GM_3T   1400
#define T1_GM_1_5T 1100
#define T1_WM_3T   750
#define T1_WM_1_5T 600
#define T1_FAT_3T   340
#define T1_FAT_1_5T 260


/** @brief #### `typedef struct` holding steering parameters for KSInversion
*/
typedef struct _KSINV_PARAMS {
  int irmode; /* KSINV_OFF, KSINV_IR_SIMPLE, KSINV_IR_SLICEAHEAD, KSINV_FLAIR_BLOCK, KSINV_FLAIR_T2PREP_BLOCK */
  float flip;
  float slthick;
  int rfoffset; /* [Hz] */
  int rftype; /* KSINV_RF_STD or KSINV_RF_ADIABATIC */
  float spoilerarea;
  int approxti; /* Allow TI to be approximized */
  int startpos; /* time from beginning of inv seq to the beginning of the inversion pulse */
  int nslicesahead; /* Only used for irmode = KSINV_IR_SLICEAHEAD */
  int nflairslices; /* #slices that can fit in a KSINV_FLAIR_BLOCK or KSINV_FLAIR_T2PREP_BLOCK*/
  int ssi_time;
  /* T2prep related */
  float flip_exc;
  float slthick_exc;
  int N_Refoc;
  int t2prep_TE;
  int rftype_refoc; /* KSINV_RF_STD or KSINV_RF_ADIABATIC */
} KSINV_PARAMS;
#define KSINV_INIT_PARAMS {KSINV_OFF, KSINV_DEFAULT_FLIP, KS_NOTSET, 0, KSINV_RF_STD, KSINV_DEFAULT_SPOILERAREA, FALSE, KSINV_DEFAULT_STARTPOS, 0, 0, KSINV_DEFAULT_SSITIME, 90, KS_NOTSET, 1, KS_NOTSET, KSINV_RF_STD}

/** @brief #### typedef struct holding all information about the KSInversion sequence module incl. all gradients and waveforms
*/
typedef struct _KSINV_SEQUENCE {
  KS_BASE base;
  KS_SEQ_CONTROL seqctrl;
  KSINV_PARAMS params; /* input params */
  KS_SELRF selrfinv; /* Used for inversion and/or refocung pulse for t2prep */
  KS_TRAP spoiler;
  KS_SELRF selrfexc; /* t2prep */
  KS_SELRF selrfflip; /* t2prep */
  KS_SELRF selrfrefoc;
} KSINV_SEQUENCE;
#define KSINV_INIT_SEQUENCE {{0,0,NULL,sizeof(KSINV_SEQUENCE)}, KS_INIT_SEQ_CONTROL, KSINV_INIT_PARAMS, KS_INIT_SELRF, KS_INIT_TRAP, KS_INIT_SELRF, KS_INIT_SELRF, KS_INIT_SELRF}


/* Function prototypes */
STATUS ksinv_eval_checkTR_SAR(KS_SEQ_COLLECTION *seqcollection, KS_SLICE_PLAN *slice_plan, int (*play_coreslice)(const SCAN_INFO *, int, int, void **), int core_nargs, void **core_args);
int ksinv_pg(KSINV_SEQUENCE *);
int ksinv_scan_sliceloop(const KS_SLICE_PLAN *slice_plan, const SCAN_INFO *slice_positions, int passindx, 
                         KSINV_SEQUENCE *ksinv1, KSINV_SEQUENCE *ksinv2, KS_SEQ_CONTROL *ksinv_filltr, KSINV_LOOP_MODE ksinv_loop_mode,
                         int (*play_coreslice)(const SCAN_INFO *, int, int, void **), int core_nargs, void **core_args);



/* allow 1024 image volumes per scan */
#define MAX_DIFSCHEME_LENGTH 1024
typedef float DIFFSCHEME[3][MAX_DIFSCHEME_LENGTH];

typedef enum {
  OFFLINE_DIFFRETURN_ALL = 0, 
  OFFLINE_DIFFRETURN_ACQUIRED = 1,
  OFFLINE_DIFFRETURN_B0 = 2,
  OFFLINE_DIFFRETURN_MEANDWI = 4,
  OFFLINE_DIFFRETURN_MEANADC = 8,
  OFFLINE_DIFFRETURN_EXPATT = 16,
  OFFLINE_DIFFRETURN_FA = 32,
  OFFLINE_DIFFRETURN_CFA = 64,
} OFFLINE_DIFFRETURN_MODE;


#define KSEPI_MINHNOVER 8 /* N.B. overscans below about 16-24 should be avoided for long TE */
#define KSEPI_MAXRBW_NORAMPSAMPLING 125.0

#define KSEPI_DEFAULT_SSI_TIME_ICEHARDWARE 100
#define KSEPI_DEFAULT_SSI_TIME 1500

#if EPIC_RELEASE < 26
#define MAXVAL_KSEPI_ONLINERECON 1
#else
#define MAXVAL_KSEPI_ONLINERECON 0
#endif

#ifndef GEREQUIRED_E
#error GERequired.e must be inlined before ksepi_implementation.e
#endif


/** @brief #### `typedef struct` holding all all gradients and waveforms for the ksepi sequence
*/
typedef struct KSEPI_SEQUENCE {
  KS_SEQ_CONTROL seqctrl; /**< Control object keeping track of the sequence and its components */
  KS_EPI epitrain; /**< EPI readout train including de/rephasers, readout and phase enc blips */
  KS_EPI epireftrain; /**< Phase reference EPI train for ghost correction */
  KS_TRAP spoiler; /**< Gradient spoiler after FSE train */
  KS_SELRF selrfexc; /**< Excitation RF pulse with slice select and rephasing gradient */
  KS_SELRF selrfref; /**< First refocusing RF pulse */
  KS_SELRF selrfref2; /**< Second RF refocusing pulse when opdualspinecho = 1 */
  KS_TRAP diffgrad; /**<  Both diffusion gradients when opdualspinecho = 0 (monopolar) */
  KS_TRAP diffgrad2; /**< opdualspinecho = 1 (twice-refocused) uses both difgrad1 and difgrad2 */
  KS_WAIT pre_delay; /**< For echotime shifting --> ghost minimization for multishot */
  KS_WAIT post_delay; /**< For echotime shifting --> ghost minimization for multishot */
  KS_TRAP fcompphase; /**< Extra gradient for flowcomp in phase direction (2 instances) */
  KS_TRAP fcompslice; /**< Extra gradient for flowcomp for slice excitation */
  KS_PHASEENCODING_PLAN full_peplan; /**< fully sampled phase encoding plan for 2D and 3D use */
  KS_PHASEENCODING_PLAN ref_peplan; /**< phase encoding plan used for reference volume */
  KS_PHASEENCODING_PLAN peplan; /**< phase encoding plan (may be undersampled) for 2D and 3D use */
  KS_PHASEENCODING_PLAN *current_peplan; /**< pointer to the plan currently in use */
} KSEPI_SEQUENCE;

/* need to split up init macro into two parts to avoid "too long line" by the EPIC preprocessor */
#define KSEPI_INIT_SEQUENCE1 KS_INIT_SEQ_CONTROL, KS_INIT_EPI, KS_INIT_EPI, KS_INIT_TRAP, KS_INIT_SELRF, KS_INIT_SELRF, KS_INIT_SELRF, KS_INIT_TRAP, KS_INIT_TRAP, KS_INIT_WAIT, KS_INIT_WAIT
#define KSEPI_INIT_SEQUENCE2 KS_INIT_TRAP, KS_INIT_TRAP, KS_INIT_PHASEENCODING_PLAN, KS_INIT_PHASEENCODING_PLAN, KS_INIT_PHASEENCODING_PLAN, NULL
#define KSEPI_INIT_SEQUENCE {KSEPI_INIT_SEQUENCE1, KSEPI_INIT_SEQUENCE2};

/** @brief #### FLEET sequence module for GRAPPA calibration volume in the presence of motion
*/
typedef struct KSEPI_FLEET_SEQUENCE {
  KS_SEQ_CONTROL seqctrl;
  KS_EPI epitrain;
  KS_TRAP spoiler;
  KS_SELRF selrfexc;
  KS_WAIT pre_delay; /**< For echotime shifting --> ghost minimization for multishot */
  KS_WAIT post_delay; /**< For echotime shifting --> ghost minimization for multishot */
  KS_PHASEENCODING_PLAN peplan; /**< for 2D and 3D use */
} KSEPI_FLEET_SEQUENCE;
#define KSEPI_FLEET_INIT_SEQUENCE {KS_INIT_SEQ_CONTROL, KS_INIT_EPI, KS_INIT_TRAP, KS_INIT_SELRF, KS_INIT_WAIT, KS_INIT_WAIT, KS_INIT_PHASEENCODING_PLAN};

/** @brief #### Enums to switch between multishot vs. parallel imaging modes
*/
typedef enum {
  KSEPI_MULTISHOT_OFF, /* 0 */
  KSEPI_MULTISHOT_ALLVOLS, /* 1 */
  KSEPI_MULTISHOT_1STVOL, /* 2 */
  KSEPI_MULTISHOT_B0VOLS, /* 3 */
} KSEPI_MULTISHOT_MODE;


/*****************************************************************************************************
 * GLOBALS
 *****************************************************************************************************/

#include "KSFoundation.h"

/* GE RF Pulses (c.f. KSFoundation_GERFpulses.m) */
#include <KSFoundation_GERF.h>



#endif /* h_ksepi_global_h */

