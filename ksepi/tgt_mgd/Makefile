# Makefile generated by imake - do not edit!
# $Xorg: imake.c,v 1.6 2001/02/09 02:03:15 xorgcvs Exp $

#
#
#

# ====================================================================
#
#  Included macros and rules from <Imake.cf> and <Imake.rules>
#
# ====================================================================

PWD        = /home/weber/QTI/ksepi/tgt_mgd
TOP        = /ESE_RX27.0_R03
OS_NAME    = Linux
OS_RELEASE = 2_6_32__696_16_1_el6_x86_64

SHELL = /bin/sh

BASENAME = /bin/basename
CAT      = /bin/cat
CHMOD    = /bin/chmod
CP       = /bin/cp
CUT      = /usr/bin/cut
DD       = /bin/dd
GREP     = /bin/grep
MV       = /bin/mv
RM       = /bin/rm -f
SED      = /bin/sed
SORT     = /bin/sort
TAIL     = /usr/bin/tail
TAR      = /bin/tar
TOUCH    = /bin/touch

# ====================================================================

#
#
#
#
#
#

# ====================================================================
#
#  Common targets found in all makefiles
#
# ====================================================================

# --------------------------------------------------------------------
#
#  Rule: "CommonTargets()"
#

all:: hw sim

clean::

hw::

hw-ice::

hw-mgd::

install::

sim::

test::

# --------------------------------------------------------------------

# ====================================================================

#
#
#
#
#
#

# ====================================================================
#
#  Beginning of included template file: "TORNADO.tmpl"
#
# ====================================================================

#
# These are parameter definitions common to all users who use the
# Tornado compiler set, or the PSD teams custom Linux-to-VxWorks
# cross-compiler.  $(WIND_BASE), $(WIND_HOST_TYPE), $(GE_AGP_CCTOP),
# $(ENV_TORNADO_CFLAGS), and $(ENV_TORNADO_LDFLAGS) are defined in
# the user's environment.
#

VPATH = ..

AR     = $(WIND_BASE)/host/$(WIND_HOST_TYPE)/bin/arppc
CC     = $(WIND_BASE)/host/$(WIND_HOST_TYPE)/bin/ccppc
CPP    = $(WIND_BASE)/host/$(WIND_HOST_TYPE)/bin/ccppc
CXX    = $(WIND_BASE)/host/$(WIND_HOST_TYPE)/bin/ccppc
LD     = $(WIND_BASE)/host/$(WIND_HOST_TYPE)/bin/ldppc
NM     = $(WIND_BASE)/host/$(WIND_HOST_TYPE)/bin/nmppc
OBJCOPY= $(WIND_BASE)/host/$(WIND_HOST_TYPE)/bin/objcopyppc
WTXTCL = $(WIND_BASE)/host/$(WIND_HOST_TYPE)/bin/wtxtcl
MUNCH  = $(WIND_BASE)/host/src/hutils/munch.tcl

STD_COMPILE_FLAGS =     $(ENV_TORNADO_CFLAGS)     $(HARDWARE_OPTIONS)     $(EXCEPTION_COMPILE_FLAGS)     -D_REENTRANT     $(SSC_TYPE_FLAG)     -I$(WIND_BASE_DIR)/target/h     -I$(WIND_BASE)/target/h     -G 0     -fvolatile     -fsigned-char     -mstrict-align     -mlongcall     -pipe     -Wall     -DVXWORKS     $(WARNING_ERROR_FLAG)     -W

DEFAULT_CFLAGS =     -ansi     -fno-builtin     $(STD_COMPILE_FLAGS)

DEFAULT_CXXFLAGS =     -fno-for-scope     $(STD_COMPILE_FLAGS)

DEFAULT_CPPFLAGS = $(DEFAULT_CXXFLAGS)

DEFAULT_ARFLAGS = -r

DEFAULT_LDFLAGS =     $(ENV_TORNADO_LDFLAGS)     -nostdlib     -r     -x

DEFAULT_EXELDFLAGS =     $(ENV_TORNADO_LDFLAGS)     -nostdlib     -x

DEFAULT_CCLDFLAGS =     $(ENV_TORNADO_LDFLAGS)     -nostdlib     -r     -Wl,-x

DEFAULT_CXXLDFLAGS =     $(DEFAULT_CCLDFLAGS)

DEFAULT_820FLAGS =     -DCPU=PPC604     -mcpu=604     -DPPCCPU=820     -DENABLE_FORCE_STORE_COMPLETION

DEFAULT_3060FLAGS =     -DCPU=PPC860     -mcpu=860     -DPPCCPU=860

DEFAULT_CPV3FLAGS =     -DCPU=PPC603     -mcpu=603     -DPPCCPU=603

# Global compiler flags concering exception handling. By default we turn
# exceptions on:  add -fno_exceptions to get rid of them!

EXCEPTION_COMPILE_FLAGS =

# Global compiler flags concering exception handling. By default we turn
# exceptions off:

EXCEPTION_COMPILE_FLAGS = -fno-exceptions

# Global compiler flag concering warnings.  By default we don't treat
# warnings as errors.  Add -Werror to cause build errors on warnings.

WARNING_ERROR_FLAG =

#
#
# End common Tornado parameter definitions.
#

#
# Macro which enabled exceptions. By default exceptions are disabled.
# This macro has to be called before any other macros in the imake file!
#

#
# Macro which enables warnings to be treated as build errors.
# This macro has to be called before any other macros in the imake file!
#

#
# Macro which enabled exceptions. By default exceptions are disabled.
# This macro has to be called before any other macros in the imake file!
#

# --------------------------------------------------------------------
#
#  Rule: "SuffixRules()"
#

.SUFFIXES:
.SUFFIXES: .c .cpp .cxx .o .o-th

CCFLAGS  = $(CCFLAGS1)  $(DEFAULT_CFLAGS)   $(CCFLAGS2)
CXXFLAGS = $(CPPFLAGS1) $(DEFAULT_CXXFLAGS) $(CPPFLAGS2)

.c.o:
	$(RM) ${@F}
	 $(CC) -c -o ${@F} $(CFLAGS1) $< $(DEFAULT_CFLAGS) \
		$(CFLAGS2) -UIMAKE_TORNADO_SUFFIXRULES

.c.o-th:
	$(RM) ${@F}
	 $(CC) -c -o ${@F} $< $(DEFAULT_820FLAGS) \
		$(CCFLAGS) -UIMAKE_TORNADO_SUFFIXRULES

.cpp.o:
	$(RM) ${@F}
	 $(CXX) -c -o ${@F} $< $(CXXFLAGS1) \
		$(DEFAULT_CXXFLAGS) $(CXXFLAGS2) \
		-UIMAKE_TORNADO_SUFFIXRULES

.cxx.o:
	$(RM) ${@F}
	 $(CXX) -c -o ${@F} $< $(CXXFLAGS1) \
		$(DEFAULT_CXXFLAGS) $(CXXFLAGS2) \
		-UIMAKE_TORNADO_SUFFIXRULES

.cpp.o-th:
	$(RM) ${@F}
	 $(CXX) -c -o ${@F} $< $(DEFAULT_820FLAGS) \
		$(CXXFLAGS) -UIMAKE_TORNADO_SUFFIXRULES

clean::
	-$(RM) *.o *.o-th

# --------------------------------------------------------------------

# ====================================================================
#
#  End of included template file: "TORNADO.tmpl"
#
# ====================================================================

#
#
#
#
#
#

# ====================================================================
#
#  Local Imakefile begins here
#
# ====================================================================

TOOLSET = PSD_TGT_MGD

GITREV = 0000aaa
CLINICAL_MODE = 0
-include ../psd_config.mk
-include psd_config.mk

TMP01 = $(patsubst /ESE_HD%_V01,%,        $(TOP))
TMP02 = $(patsubst /ESE_DV%_VO1,%,        $(TMP01))
TMP03 = $(patsubst /ESE_DV%_VO2,%,        $(TMP02))
TMP04 = $(patsubst /ESE_DV%_0_V01,%,      $(TMP03))
TMP05 = $(patsubst /ESE_DV%.0_V01,%,      $(TMP04))
TMP06 = $(patsubst /ESE_DV%_1_V02,%,      $(TMP05))
TMP07 = $(patsubst /ESE_DV%.0_EA,%,       $(TMP06))
TMP08 = $(patsubst /ESE_DV%.0_EB,%,       $(TMP07))
TMP09 = $(patsubst /ESE_DV%.0_R01,%,      $(TMP08))
TMP10 = $(patsubst /ESE_DV%.0_R02,%,      $(TMP09))
TMP11 = $(patsubst /ESE_DV%.1_R01,%,      $(TMP10))
TMP12 = $(patsubst /ESE_DV%.1_R02,%,      $(TMP11))
TMP13 = $(patsubst /ESE_MP%.0_EA,%,       $(TMP12))
TMP14 = $(patsubst /ESE_MP%.0_R01,%,      $(TMP13))
TMP15 = $(patsubst /ESE_MP%.0_R02,%,      $(TMP14))
TMP16 = $(patsubst /ESE_RX%.0_EB,%,       $(TMP15))
TMP17 = $(patsubst /ESE_PX%.1_R01,%,      $(TMP16))
TMP18 = $(patsubst /ESE_RX%.0_R01,%,      $(TMP17))
TMP19 = $(patsubst /ESE_RX%.0_R02,%,      $(TMP18))
RELEASE_NUM = $(patsubst /ESE_RX%.0_R03,%, $(TMP19))

PATCHTMP01 = $(patsubst /ESE_DV24_0_V0%,%, $(TOP))
PATCHTMP02 = $(patsubst /ESE_DV24.0_R0%,%, $(PATCHTMP01))
PATCHTMP03 = $(patsubst /ESE_DV25.0_R0%,%, $(PATCHTMP02))
PATCHTMP04 = $(patsubst /ESE_DV25.1_R0%,%, $(PATCHTMP03))
PATCHTMP05 = $(patsubst /ESE_DV26.0_R0%,%, $(PATCHTMP04))
PATCHTMP06 = $(patsubst /ESE_MP24.0_R0%,%, $(PATCHTMP05))
PATCHTMP07 = $(patsubst /ESE_MP26.0_R0%,%, $(PATCHTMP06))
PATCHTMP08 = $(patsubst /ESE_PX26.1_R0%,%, $(PATCHTMP07))
PATCH_NUM = $(patsubst /ESE_RX27.0_R0%,%,  $(PATCHTMP08))

ifeq ($(TOOLSET), PSD_TGT_ICE)
TGT_DIR = tgt_ice
endif
ifeq ($(TOOLSET), PSD_TGT_MGD)
TGT_DIR = tgt_mgd
endif
ifeq ($(TOOLSET), PSD_TGT_C)
TGT_DIR = tgt
endif

ifndef ENDIAN_CONVERTER
PARENT_DIR = ../..
else
PARENT_DIR = ..
endif

SKIP_BUILD = FALSE

ifeq ($(TOOLSET), PSD_TGT_MGD)
ifeq ($(RELEASE_NUM), 27)

SKIP_BUILD = TRUE

endif
endif

TOOLSET = EPIC

MAKE_TARGET = programs

PSD = ksepi

ADD_INLINE_FILES =

ADD_EFILES =

ADD_CFILES_HOST =

ADD_CFILES_TGT =

ADD_EFLAGS = -z

ADD_E_INCLUDES = -DEPIC_RELEASE_IS_$(RELEASE_NUM)x -I$(PARENT_DIR)/KSFoundation -I$(PARENT_DIR)/ksmodules

ADD_CFLAGS_HH =  -DEPIC_RELEASE=$(RELEASE_NUM) -DEPIC_PATCHNUM=$(PATCH_NUM) -DREV=\"$(GITREV)\" -I$(PARENT_DIR)/KSFoundation

ADD_CFLAGS_HS =  -DEPIC_RELEASE=$(RELEASE_NUM) -DEPIC_PATCHNUM=$(PATCH_NUM) -DREV=\"$(GITREV)\" -I$(PARENT_DIR)/KSFoundation

ADD_CFLAGS_TH =  -DEPIC_RELEASE=$(RELEASE_NUM) -DEPIC_PATCHNUM=$(PATCH_NUM) -DREV=\"$(GITREV)\" -I$(PARENT_DIR)/KSFoundation

ADD_CFLAGS_TS =  -DEPIC_RELEASE=$(RELEASE_NUM) -DEPIC_PATCHNUM=$(PATCH_NUM) -DREV=\"$(GITREV)\" -I$(PARENT_DIR)/KSFoundation

ADD_LINKFLAGS_HH = -L$(PARENT_DIR)/KSFoundation/$(RELEASE_NUM)/host

ADD_LINKFLAGS_HS = -L$(PARENT_DIR)/KSFoundation/$(RELEASE_NUM)/sim_linux

ADD_LINKFLAGS_TH = -L$(PARENT_DIR)/KSFoundation/$(RELEASE_NUM)/$(TGT_DIR)

ADD_LINKFLAGS_TS = -L$(PARENT_DIR)/KSFoundation/$(RELEASE_NUM)/sim_linux

ADD_LIBS_HH = -lKSFoundation_hh

ADD_LIBS_HS = -lKSFoundation_hs

ADD_LIBS_TH = -lKSFoundation_th

ADD_LIBS_TS = -lKSFoundation_ts

# --------------------------------------------------------------------
#
#  Rule: "UsePgenOnHost()"
#
#
#  This rule is empty for the TORNADO compiler set.  It is only used
#  by the Epic preprocessor.
#
# --------------------------------------------------------------------

# --------------------------------------------------------------------
#
#  Rule: "PsdParameters()"
#
#

#
#  Rule: "PsdSetup()"
#

VPATH = ..

hw:: hw-ice hw-mgd

CCFLAGS1 = \
    $(ADD_CFLAGS_TH) \
    -I.. \
    -I$(TOP)/psd/include \
    -I$(TOP)/psd/include/private \
    -I$(TOP)/psd/include/private/support \
    -I$(TOP)/psd/psdsource \
    -I$(TOP)/lx/em/include \
    -I$(TOP)/lx/include \
    -I$(TOP)/host/foundation-libs/CnvEndianLib/host_static \
    -I$(TOP)/host/include \
    -I$(TOP)/mgd/include \
    -I$(TOP)/mgd/agp/irf3

CPPFLAGS1 = \
    $(CCFLAGS1)

CCFLAGS2 = \
    $(EPLUS_CCFLAGS) \
    -msdata=none \
    -fstrength-reduce \
    -DMGD \
    -DIPG \
    -DIPGHWTGT \
    -DHW_IO \
    -DMGD_TGT \
    -DPSD_HW \
    -D__ppc

CPPFLAGS2 = \
    $(CCFLAGS2)

LDFLAGS1 = \
    $(ADD_LINKFLAGS_TH) \
    -L$(TOP)/psd/lib/tgt_mgd

LDFLAGS2 = \
    $(ADD_LIBS_TH) \
    $(EPLUS_FEATURES_LIB_TH) \
    -lpulsegen_th \
    -lepic_rt_th \
    -lpsdsupport_th \
    -lpsdcrucial_th \
    -lpsdutil_th

# --------------------------------------------------------------------

ifeq ($(SKIP_BUILD), FALSE)

# --------------------------------------------------------------------
#
#  Rule: "BuildingEpicPsd()"
#
#

TH_C_OBJS = $(PSD).tgt.o-th $(ADD_CFILES_TGT:.c=.o-th)

TH_OBJS = $(TH_C_OBJS:.cpp=.o-th)

#
#  Rule: "PsdLink()"
#

TH_EXE = $(PSD).psd.mgd

hw-mgd $(MAKE_TARGET):: $(TH_EXE)

$(TH_EXE): $(TH_OBJS)
	$(RM) $@
	$(LD) $(LDFLAGS1) $(DEFAULT_LDFLAGS) $? $(LDFLAGS2) -o $@

clean::
	$(RM) $(TH_EXE)

# --------------------------------------------------------------------
endif

CFLAGS2_HS += -O0 -Wno-float-equal
CFLAGS2_HH += -O0 -Wno-float-equal
CFLAGS2_TS += -O0 -Wno-float-equal
CFLAGS2_TH += -O0 -Wno-float-equal

# ====================================================================

#
#
#
#
#
#

# ====================================================================
#
#  This dependency line is found in all makefiles.  $(MAKE_TARGET)
#     should be defined in the local Imakefile.
#
# ====================================================================

all $(MAKE_TARGET):: $(ALL_OBJS)

# ====================================================================

