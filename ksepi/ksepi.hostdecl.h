/*
 *  ksepi.hostdecl.h
 *
 *  Do not edit this file. It is automatically generated by EPIC.
 *
 *  Date : Nov 24 2018
 *  Time : 13:36:59
 */

#ifndef h_ksepi_hostdecl_h
#define h_ksepi_hostdecl_h

int _cv_revision = 159;












_cvint  _psd_annefact_level = { &psd_annefact_level,  
    -1,    /* flag to ignore selectable reg positions for 3 Plane apps */
    5, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Annefact level to be used in auto coil selection algorithm", 
    0, ""
};

_cvint  _rhpsd_annefact_level = { &rhpsd_annefact_level,  
    -1, 
    5, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Annefact level to be used in auto coil selection algorithm", 
    0, ""
};

_cvfloat  _psd_relative_excited_volume_freq = { &psd_relative_excited_volume_freq,  
    -1.0, 
    10.00, 
    -1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The relative excited volume along frquency encoding comparing to reconstructed volume", 
    0, ""
};

_cvfloat  _psd_relative_excited_volume_phase = { &psd_relative_excited_volume_phase,  
    -1.0, 
    10.00, 
    -1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The relative excited volume along phase encoding comparing to reconstructed volume", 
    0, ""
};

_cvfloat  _psd_relative_excited_volume_slice = { &psd_relative_excited_volume_slice,  
    -1.0, 
    10.00, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The relative excited volume along slice comparing to reconstructed volume", 
    0, ""
};


_cvfloat  _psd_relative_encoded_volume_freq = { &psd_relative_encoded_volume_freq,  
    -1.0, 
    10.00, 
    -1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The relative encoded volume along frquency encoding comparing to reconstructed volume", 
    0, ""
};

_cvfloat  _psd_relative_encoded_volume_phase = { &psd_relative_encoded_volume_phase,  
    -1.0, 
    10.00, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The relative encoded volume along phase encoding comparing to reconstructed volume", 
    0, ""
};

_cvfloat  _psd_relative_encoded_volume_slice = { &psd_relative_encoded_volume_slice,  
    -1.0, 
    10.00, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The relative encoded volume along slice comparing to reconstructed volume", 
    0, ""
};

_cvint  _opresearch = { &opresearch,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Research Mode", 
    0, ""
};




_cvfloat  _opweight = { &opweight,  
    0, 
    250, 
    50,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Patient weight in Kg.", 
    0, ""
};





_cvint  _oplandmark = { &oplandmark,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "A valid landmark exists. 0=false, 1=true", 
    0, ""
};

_cvint  _optabent = { &optabent,  
    0, 
    6, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Table Entry:0=Signa System, 1=nMR left, 2=nMR center, 3=nMR right, 4=iMR front, 5=iMR side, 6=iMR vertical.", 
    0, ""
};

_cvint  _opentry = { &opentry,  
    1, 
    10, 
    1,  0, 0, 0, 1, 1, 
    VISONLY,  
    "Patient Entry: 1=Head First, 2=Feet First, 3=Axial Entry, 4=Side Entry, 5=Vertical Entry, 6=Reserved, 7=Head First (+25 degrees), 8=Head First (-25 degrees), 9=Feet First (+25 degrees), 10=Feet First (-25 degrees).", 
    0, ""
};

_cvint  _oppos = { &oppos,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Patient Position: 1=Supine, 2=Prone, 3=Left Decub, 4= Right Decub.", 
    0, ""
};

_cvint  _opplane = { &opplane,  
    1, 
    5, 
    PSD_AXIAL,  0, 0, 0, 1, 1, 
    VIS, 
    "Scan Plane: 1=axial, 2=sagittal, 3=coronal, 4=oblique, 5= 3plane .", 
    0, ""
};

_cvint  _opphysplane = { &opphysplane,  
    1, 
    4, 
    PSD_OBL,  0, 0, 0, 1, 1, 
    VIS, 
    "Physical Gradient Scan Plane: 1=axial, 2=sagittal, 3=coronal, 4=oblique.", 
    0, ""
};

_cvint  _opobplane = { &opobplane,  
    1, 
    3, 
    PSD_AXIAL,  0, 0, 0, 1, 1, 
    INVIS, 
    "Most like plane for obliques.", 
    0, ""
};

_cvint  _opimode = { &opimode,  
    1, 
    6, 
    PSD_2D,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Imaging Mode: 1=2D, 2= 3D, 3=CINE, 4=ANGIO, 5=SPECTRO, 6=3D MULTISLAB.", 
    0, ""
};

_cvint  _oppseq = { &oppseq,  
    1, 
    57, 
    1,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Pulse Sequence: SE GE IR SSFP SPGR TOF PC TOFSP PCSP PROBES PROBEP PRESSCSI STEAMCSI FIDCSI ECHOCSI SPINECHO 3PLANELOC.", 
    0, ""
};


_cvint  _opgradmode = { &opgradmode,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = BRM/CRM, 1 = Whole body, 2 = ZOOM", 
    0, "Unknown mode. Options are Whole, Zoom or BRM/CRM"
};


_cvint  _opanatomy = { &opanatomy,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Enumerated anatomy selection key", 
0, "" };




_cvint  _piimgoptlist = { &piimgoptlist,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "", 
    0, ""
};

_cvint  _opcgate = { &opcgate,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Cardiac Gating Flag: 0=No gating, 1=Gating ON, 2=Internally Gated.", 
    0, ""
};

_cvint  _opexor = { &opexor,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Exorcist Flag", 
    0, ""
};

_cvint  _opcmon = { &opcmon,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Cardiac Compensation. 0=off, 1=on.", 
    EM_PSD_CMON_PSEQ_INCOMPATIBLE, ""
};

_cvint  _opfcomp = { &opfcomp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow Comp Flag", 
    0, ""
};

_cvint  _opgrx = { &opgrx,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Graphic Rx: 0=off, 1= on", 
    0, ""
};

_cvint  _opgrxroi = { &opgrxroi,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Graphic ROI: 0=off, 1=on", 
    EM_PSD_OPGRXROI_INCOMPATIBLE, ""
};

_cvint  _opnopwrap = { &opnopwrap,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "No Phase Wrap. 0=off, 1=on.", 
    0, ""
};

_cvint  _opptsize = { &opptsize,  
    2, 
    4, 
    2,  0, 0, 0, 1, 1, 
    VISONLY, 
    "2=16 bit data, 4=32 bit data.", 
    0, ""
};

_cvint  _oppomp = { &oppomp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=no pomp, 1=pomp", 
    0, ""
};

_cvint  _opscic = { &opscic,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "surface coil intensity correction: 1 if enabled.", 
    0, ""
};

_cvint  _oprect = { &oprect,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=No rect. scan, 1=rect. scan.", 
    0, ""
};

_cvint  _opsquare = { &opsquare,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=No square pixel scan, 1=square pixel scan", 
    0, ""
};

_cvint  _opvbw = { &opvbw,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Variable Bandwidth Option.", 
    0, ""
};

_cvint  _opblim = { &opblim,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=new memp,1=classic", 
    0, ""
};

_cvint  _opfast = { &opfast,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "FAST sequence selection: 0=off, 1=on", 
    EM_PSD_OPFAST_INCOMPATIBLE, ""
};

_cvint  _opcs = { &opcs,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Improved RF pulse switch: 0=off, 1=on.", 
    EM_PSD_CS_2D_SPIN_ECHO_ONLY, ""
};

_cvint  _opdeprep = { &opdeprep,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "DE prep pulses: 0=off, 1=on", 
    EM_PSD_OPDEPREP_INCOMPATIBLE, ""
};

_cvint  _opirprep = { &opirprep,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "IR prep pulses: 0=off, 1=on", 
    EM_PSD_OPIRPREP_INCOMPATIBLE, ""
};

_cvint  _opsrprep = { &opsrprep,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Saturation prep pulse: 0=off, 1=on", 
    0, ""
};

_cvint  _opmph = { &opmph,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Multi-phase acq: 0=off, 1=on", 
    EM_PSD_OPMPH_INCOMPATIBLE, ""
};

_cvint  _opdynaplan = { &opdynaplan,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Dynamic Plan: 0=off, 1=on", 
    0, "Dynamic Plan option is not available with this PSD."
};

_cvint  _opdynaplan_mask_phase = { &opdynaplan_mask_phase,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Dynamic Plan: Mask Phase Flag", 
0, "" };


_cvint  _opbsp = { &opbsp,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "2/3 IR Blood Suppression.", 
    EM_PSD_BSP_INCOMPATIBLE, ""
};

_cvint  _oprealtime = { &oprealtime,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Realtime Interactive Scanning Option.", 
    EM_PSD_RTIA_REALTIME_NOT_AVAILABLE, ""
};

_cvint  _opfluorotrigger = { &opfluorotrigger,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "FTMRA Scanning Option.", 
    EM_PSD_FTMRA_NOT_AVAILABLE, ""
};

_cvint  _opET = { &opET,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Echotrain imaging Option.", 
    EM_PSD_ECHOTRAIN_NOT_AVAILABLE, ""
};

_cvint  _opmultistation = { &opmultistation,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The multi station button input from scan", 
    EM_PSD_MULTISTATION_INCOMPATIBLE, ""
};

_cvint  _opepi = { &opepi,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "EPI flag: 0=off, 1=on.", 
    EM_PSD_EPI_INCOMPATIBLE, ""
};

_cvint  _opflair = { &opflair,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Inversion Group Type, 0 = Single, 1 = Group, 2 = Interleaved", 
    0, ""
};

_cvint  _opt1flair = { &opt1flair,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "t1flair operatorIF flag, 0 = OFF, 1 = ON", 
    0, ""
};

_cvint  _opt2flair = { &opt2flair,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "t2flair operatorIF flag, 0 = OFF, 1 = ON", 
    0, ""
};

_cvint  _opdoubleir = { &opdoubleir,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Double Inversion Recovery flag, 0=Off, 1=On", 
    0, ""
};

_cvint  _optissuet1 = { &optissuet1,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Tissue or T1 to suppress, otherwise valid T1 value", 
    0, ""
};

_cvint  _opautotissuet1 = { &opautotissuet1,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for auto tissue type to suppress in DIR", 
    0, ""
};

_cvint  _optlrdrf = { &optlrdrf,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Tailored RF flag: 0=off, 1=on.", 
    EM_PSD_TLRDRF_INCOMPATIBLE, ""
};

_cvint  _opfulltrain = { &opfulltrain,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = split train, 1 = full train", 
    EM_PSD_FULL_ECHO_TRAIN_NOT_SUPPORTED, ""
};

_cvint  _opirmode = { &opirmode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Type of IR or GRASS/MPGR", 
    0, ""
};

_cvint  _opmt = { &opmt,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Magnetization Transfer selection: 0=off, 1=on", 
    EM_PSD_MT_INCOMPATIBLE, ""
};

_cvint  _opzip512 = { &opzip512,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "512 In-plane Zero Interpolation Padding: 0=off, 1=on", 
    EM_PSD_NO_512_ZIP, ""
};

_cvint  _opzip1024 = { &opzip1024,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1024 In-plane Zero Interpolation Padding: 0=off, 1=on", 
    EM_PSD_NO_1024_ZIP, ""
};

_cvint  _opslzip2 = { &opslzip2,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice Zero Interpolation Padding x 2: 0=off, 1=on", 
    EM_PSD_ZIP2_ONLY_3D_GE_ANDTOF_COMPATIBLE, ""
};

_cvint  _opslzip4 = { &opslzip4,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice Zero Interpolation Padding x 4: 0=off, 1=on", 
    EM_PSD_ZIP4_ONLY_3D_GE_ANDTOF_COMPATIBLE, ""
};

_cvint  _opsmartprep = { &opsmartprep,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Smartprep. 0=off, 1=on.", 
    EM_PSD_SMARTPREP_ONLY_ONE_COMPATIBLE, ""
};

_cvint  _opssrf = { &opssrf,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spectral-spatial RF", 
    EM_PSD_SSRF_NOT_AVAILABLE, ""
};

_cvint  _opt2prep = { &opt2prep,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "T2 Prep", 
    EM_PSD_T2PREP_NOT_AVAILABLE, ""
};

_cvint  _opspiral = { &opspiral,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spiral flag: 0=off, 1=on.", 
    EM_PSD_SPIRAL_INCOMPATIBLE, ""
};

_cvint  _opnav = { &opnav,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator flag: 0=off, 1=on", 
    EM_PSD_NAVS_INCOMPATIBLE, ""
};

_cvint  _opfmri = { &opfmri,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "fMRI: 0=off, 1=on", 
    EM_PSD_FMRI_INCOMPATIBLE, ""
};


_cvint  _opectricks = { &opectricks,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ECTRICKS mode: 0=off,1=ON", 
    0, ""
};

_cvint  _optricksdel = { &optricksdel,  
    0000, 
    30000000, 
    1000000,  0, 0, 0, 1, 1, 
    VIS,  
    "Tricks Delay(ms) after Mask Acq.", 
0, "" };

_cvint  _optrickspause = { &optrickspause,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "TRICKS Pause after Mask: 0=off,1=ON", 
0, "" };

_cvint  _opfr = { &opfr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CV for Fast Recovery selection ", 
    0, ""
};

_cvint  _opcube = { &opcube,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CV for Cube", 
    0, ""
};

_cvint  _ophydro = { &ophydro,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CV for MRCP or Hydro Image Option", 
    0, ""
};


_cvint  _opphasecycle = { &opphasecycle,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CV for phase cycling selection ", 
    0, ""
};

_cvint  _oplava = { &oplava,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "LAVA App.", 
    0, "" 
};

_cvint  _op3dcine_fiesta = { &op3dcine_fiesta,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Fiesta 3dcine App.", 
    0, ""
};

_cvint  _op3dcine_spgr = { &op3dcine_spgr,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "SPGR 3dcine App.", 
    0, ""
};

_cvint  _op4dflow = { &op4dflow,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "4dflow App.", 
    0, ""
};

_cvint  _opbrava = { &opbrava,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "BRAVA App.", 
    0, "" 
};

_cvint  _opcosmic = { &opcosmic,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "COSMIC App.", 
    0, ""
};

_cvint  _opvibrant = { &opvibrant,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "VIBRANT App.", 
    0, "" 
};


_cvint  _opbravo = { &opbravo,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "BRAVO App.", 
    0, ""
};

_cvint  _opdisco = { &opdisco,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "DISCO App.", 
    0, ""
};

_cvint  _opmprage = { &opmprage,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MP-RAGE App.", 
    0, ""
};


_cvint  _oppromo = { &oppromo,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PROMO App.", 
    0, "" 
};

_cvint  _opprop = { &opprop,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "On(=1) Flag for propeller scan", 
    0, ""
};

_cvint  _opdwprop = { &opdwprop,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "On(=1) Flag for dw-propeller scan", 
    0, ""
};

_cvint  _opdwpropduo = { &opdwpropduo,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "On(=1) Flag for dw-propeller DUO mode", 
    0, ""
};

_cvint  _opmuse = { &opmuse,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "MUSE App.", 
    0, ""
};

_cvint  _opallowedrescantime = { &opallowedrescantime,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PROMO rescan time in seconds", 
    0, "" 
};

_cvint  _opbreastmrs = { &opbreastmrs,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Breast MRS", 
    0, ""
};

_cvint  _opjrmode = { &opjrmode,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "J-Resolved Spectroscopy Mode", 
    0, ""
};

_cvint  _opssfse = { &opssfse,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Single Shot FSE flag, (0)off, (1)on", 
    EM_PSD_SINGLE_SHOT_INCOMPATIBLE, ""
};

_cvint  _t1flair_flag = { &t1flair_flag,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "On(=1) Flag for t1flair scan", 
    0, ""
};







_cvint  _opphsen = { &opphsen,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Phase Sensitive Image Reconstruction: 0 = Disable, 1 = Enable", 
    EM_PSD_PHASESENSITIVE_INCOMPATIBLE, ""
};

_cvint  _opbc = { &opbc,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Blurring cancellation", 
    0, "Blurring cancellation is available only with FSE, FIR or FLIAR."
};

_cvint  _opfatwater = { &opfatwater,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "fat water imaging control flag.", 
    0, "Single Quadrature fat/water imaging is not available for this PSD."
};

_cvint  _oprtbc = { &oprtbc,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for real time blurring cancellation.", 
    0, "Real Time Blurring Cancellation is not available for this PSD."
};

_cvint  _opnseg = { &opnseg,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "number of segment for Rapid Frame Acquisition", 
    0, ""
};

_cvint  _opnnex = { &opnnex,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "option flag for new nex ordering", 
    0, "Advanced NEX is not available for this PSD."
};

_cvint  _opsilent = { &opsilent,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Silent Mode, 0 = Off, 1 = On", 
    0, ""
};

_cvint  _opsilentlevel = { &opsilentlevel,  
    1, 
    3, 
    3,  0, 0, 0, 1, 1, 
    VIS, 
    "Silent Level, 1 = Medium, 2 = High, 3 = Single Mode", 
    0, ""
};

_cvint  _opmerge = { &opmerge,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for 2D/3D MERGE", 
    0, ""
};

_cvint  _opswan = { &opswan,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for 3D SWAN", 
    0, ""
};

_cvint  _opphaseimage = { &opphaseimage,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Phase Image", 
    0, ""
};

_cvint  _opdixon = { &opdixon,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Dixon imaging option", 
    0, ""
};













_cvint  _opdixproc = { &opdixproc,  
    0, 
    255, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bitmask for choice of images to be reconstructed by IDEAL processing", 
    0, ""
};

_cvint  _opmedal = { &opmedal,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL App.", 
    0, ""
};

_cvint  _opquickstep = { &opquickstep,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "QuickSTEP App.", 
    0, ""
};

_cvint  _opidealiq = { &opidealiq,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "IDEAL IQ App.", 
    0, ""
};

_cvint  _opsilentmr = { &opsilentmr,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Silent MR Flag", 
    0, ""
};

_cvint  _opmagic = { &opmagic,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MAGiC App.", 
    0, ""
};




_cvfloat  _opzoom_fov_xy = { &opzoom_fov_xy,  
    240.0, 
    480.0, 
    440.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful FOV in XY (mm)", 
    0, ""
};

_cvfloat  _opzoom_fov_z = { &opzoom_fov_z,  
    240.0, 
    480.0, 
    350.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful FOV in Z (mm)", 
    0, ""
};

_cvfloat  _opzoom_dist_ax = { &opzoom_dist_ax,  
    0.0, 
    350.0, 
    120.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful axial off-center (mm)", 
    0, ""
};

_cvfloat  _opzoom_dist_cor = { &opzoom_dist_cor,  
    0.0, 
    350.0, 
    120.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful coronal off-center (mm)", 
    0, ""
};

_cvfloat  _opzoom_dist_sag = { &opzoom_dist_sag,  
    0.0, 
    350.0, 
    150.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "ZM grad: max useful sagittal off-center (mm)", 
    0, ""
};

_cvint  _app_grad_type = { &app_grad_type,  
    0, 
    100, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "0 = app. for WB and ZM grad, 1= for WB only, 2 = for ZM only", 
    0, ""
};

_cvint  _opzoom_coil_ind = { &opzoom_coil_ind,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0= coil may be used with any grad mode, 1= coil use with zoom grad mode is restricted", 
    0, ""
};

_cvint  _pizoom_index = { &pizoom_index,  
    -1, 
    100, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "index for advisory message with ZM gradient", 
    0, ""
};





_cvint  _opsat = { &opsat,  0, 1, 0,  0, 0, 0, 1, 1,  VISONLY, 
		      "Saturation switch: 0=off, 1=on.", 0, "" };

_cvint  _opsatx = { &opsatx,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spatial pre-sat in logical X direction: 0=off, 1=negative pre-sat only, 2=pos. pre-sat only, 3=both.", 
    0, ""
};

_cvint  _opsaty = { &opsaty,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spatial pre-sat in logical Y direction: 0=off, 1=negative pre-sat only, 2=pos. pre-sat only, 3=both.", 
    0, ""
};

_cvint  _opsatz = { &opsatz,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Spatial pre-sat in logical Z direction: 0=off, 1=negative pre-sat only, 2=pos. pre-sat only, 3=both.", 
    0, ""
};

_cvfloat  _opsatxloc1 = { &opsatxloc1,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified right sat location in mm.", 
    0, ""
};

_cvfloat  _opsatxloc2 = { &opsatxloc2,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified left sat location in mm.", 
    0, ""
};

_cvfloat  _opsatyloc1 = { &opsatyloc1,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified anterior sat location in mm.", 
    0, ""
};

_cvfloat  _opsatyloc2 = { &opsatyloc2,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified posterior sat location in mm.", 
    0, ""
};

_cvfloat  _opsatzloc1 = { &opsatzloc1,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified superior sat location in mm.", 
    0, ""
};

_cvfloat  _opsatzloc2 = { &opsatzloc2,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified inferior sat location in mm.", 
    0, ""
};

_cvfloat  _opsatxthick = { &opsatxthick,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified logical X Sat thickness.", 
    0, ""
};

_cvfloat  _opsatythick = { &opsatythick,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified logical Y Sat thickness.", 
    0, ""
};

_cvfloat  _opsatzthick = { &opsatzthick,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified logical Z Sat thickness.", 
    0, ""
};

_cvint  _opsatmask = { &opsatmask,  
    0, 
    64, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bitmask for SAT in the FOV.", 
    0, ""
};

_cvint  _opfat = { &opfat,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Fat pre-saturation: 0=off,1=on.", 
    0, ""
};

_cvint  _opwater = { &opwater,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Water pre-saturation: 0=off,1=on.", 
    0, ""
};

_cvint  _opccsat = { &opccsat,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "1 if concat sat is on", 
    0, ""
};

_cvint  _opfatcl = { &opfatcl,    
     0,       
     1,       
     0,  0, 0, 0, 1, 1,       
     VIS,     
     "Flag indicating classic Fat Sat selection.",  
0, "" };


_cvint  _opspecir = { &opspecir,    
     0,       
     1,       
     0,  0, 0, 0, 1, 1,       
     VIS,     
     "Flag indicating SPECIAL technique selection.",  
0, "" };




_cvint  _opexsatmask = { &opexsatmask,  
    0, 
    64, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bitmask, for explicit sat bands.", 
    0, ""
};

_cvfloat  _opexsathick1 = { &opexsathick1,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 1", 
    0, ""
};

_cvfloat  _opexsathick2 = { &opexsathick2,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 2", 
    0, ""
};

_cvfloat  _opexsathick3 = { &opexsathick3,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 3", 
    0, ""
};

_cvfloat  _opexsathick4 = { &opexsathick4,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 4", 
    0, ""
};

_cvfloat  _opexsathick5 = { &opexsathick5,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 5", 
    0, ""
};

_cvfloat  _opexsathick6 = { &opexsathick6,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified thickness in mm for explicit Sat 6", 
    0, ""
};

_cvfloat  _opexsatloc1 = { &opexsatloc1,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 1", 
    0, ""
};

_cvfloat  _opexsatloc2 = { &opexsatloc2,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 2", 
    0, ""
};

_cvfloat  _opexsatloc3 = { &opexsatloc3,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 3", 
    0, ""
};

_cvfloat  _opexsatloc4 = { &opexsatloc4,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 4", 
    0, ""
};

_cvfloat  _opexsatloc5 = { &opexsatloc5,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 5", 
    0, ""
};

_cvfloat  _opexsatloc6 = { &opexsatloc6,  
    MIN_SLOC, 
    12000, 
    9999,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified location in mm for explicit Sat 6", 
    0, ""
};

_cvint  _opexsatparal = { &opexsatparal,  
    0, 
    7, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bit mask to communicate parallel explicit sat bands.", 
    0, ""
};





_cvint  _opexsatoff1 = { &opexsatoff1,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 1.", 
    0, ""
};

_cvint  _opexsatoff2 = { &opexsatoff2,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 2.", 
    0, ""
};

_cvint  _opexsatoff3 = { &opexsatoff3,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 3.", 
    0, ""
};

_cvint  _opexsatoff4 = { &opexsatoff4,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 4.", 
    0, ""
};

_cvint  _opexsatoff5 = { &opexsatoff5,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 5.", 
    0, ""
};

_cvint  _opexsatoff6 = { &opexsatoff6,  
    MIN_SLOC, 
    12000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset in mm for targeted explicit Sat 6.", 
    0, ""
};

_cvint  _opexsatlen1 = { &opexsatlen1,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 1.", 
    0, ""
};

_cvint  _opexsatlen2 = { &opexsatlen2,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 2.", 
    0, ""
};

_cvint  _opexsatlen3 = { &opexsatlen3,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 3.", 
    0, ""
};

_cvint  _opexsatlen4 = { &opexsatlen4,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 4.", 
    0, ""
};

_cvint  _opexsatlen5 = { &opexsatlen5,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 5.", 
    0, ""
};

_cvint  _opexsatlen6 = { &opexsatlen6,  
    80, 
    640, 
    480,  0, 0, 0, 1, 1, 
    INVIS, 
    "Length in mm of targeted explicit Sat 6.", 
    0, ""
};



_cvfloat  _opdfsathick1 = { &opdfsathick1,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 1 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick2 = { &opdfsathick2,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 2 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick3 = { &opdfsathick3,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 3 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick4 = { &opdfsathick4,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 4 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick5 = { &opdfsathick5,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 5 thickness in mm.", 
    0, ""
};

_cvfloat  _opdfsathick6 = { &opdfsathick6,  
    MIN_STHICK, 
    MAX_STHICK, 
    40.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User specified default Sat 6 thickness in mm.", 
    0, ""
};













_cvfloat  _exsat1_normth_R = { &exsat1_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat1_normth_A = { &exsat1_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat1_normth_S = { &exsat1_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat2_normth_R = { &exsat2_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat2_normth_A = { &exsat2_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat2_normth_S = { &exsat2_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat3_normth_R = { &exsat3_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat3_normth_A = { &exsat3_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat3_normth_S = { &exsat3_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat4_normth_R = { &exsat4_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat4_normth_A = { &exsat4_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat4_normth_S = { &exsat4_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat5_normth_R = { &exsat5_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat5_normth_A = { &exsat5_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat5_normth_S = { &exsat5_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat6_normth_R = { &exsat6_normth_R, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat6_normth_A = { &exsat6_normth_A, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat6_normth_S = { &exsat6_normth_S, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat1_dist = { &exsat1_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat2_dist = { &exsat2_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat3_dist = { &exsat3_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat4_dist = { &exsat4_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat5_dist = { &exsat5_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _exsat6_dist = { &exsat6_dist, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _pigirscrn = { &pigirscrn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _piautoirbands = { &piautoirbands, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pigirdefthick = { &pigirdefthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pinumgir = { &pinumgir,  
    1, 
    MAX_NUM_GIR, 
    MAX_NUM_GIR,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of Allowed Graphic IR Bands", 
0, "" };

_cvint  _opnumgir = { &opnumgir,  
    0, 
    MAX_NUM_GIR, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Graphic IR Bands", 
0, "" };

_cvint  _pigirmode = { &pigirmode,  
    1, 
    3, 
    3,  0, 0, 0, 1, 1, 
    INVIS, 
    "1:Manual IR Band Only, 2:Auto IR Band Only, 3: Both Manual and Auto IR Bands", 
0, "" };

_cvint  _opgirmode = { &opgirmode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0:Manual IR Band, 1:Auto IR Band", 
0, "" };


_cvint  _optagging = { &optagging,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Cardiac Tagging (0=None, 1=Stripe, 2=Grid)", 
    EM_PSD_TAG_INCOMPATIBLE, ""
};

_cvint  _optagspc = { &optagspc,  
    0, 
    1024, 
    7,  0, 0, 0, 1, 1, 
    VIS, 
    "Cardiac Tagging spacing/separation (pixels)", 
0, "" };







_cvfloat  _optagangle = { &optagangle,  
    -180.0, 
     180.0, 
     45.0,  0, 0, 0, 1, 1, 
     VIS, 
     "TAGGING orientation angle", 
0, "" };





_cvfloat  _opvenc = { &opvenc,  
    5.0, 
    5500, 
    50.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Velocity Encode in mm/sec", 
0, "" };

_cvint  _opflaxx = { &opflaxx,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "X grad flow encode", 
0, "" };

_cvint  _opflaxy = { &opflaxy,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Y grad flow encode", 
0, "" };

_cvint  _opflaxz = { &opflaxz,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Z grad flow encode", 
0, "" };

_cvint  _opflaxall = { &opflaxall,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "all axises encoded", 
0, "" };

_cvint  _opproject = { &opproject,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Type of projection image", 
0, "" };

_cvint  _opcollapse = { &opcollapse,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Do max-pixel collapse along slice axis, 0: Dont.", 
0, "" };

_cvint  _oprlflow = { &oprlflow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Right-Left flow images, 0: Dont.", 
0, "" };

_cvint  _opapflow = { &opapflow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Anterior-Posterior flow images, 0: Dont.", 
0, "" };

_cvint  _opsiflow = { &opsiflow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Superior-Inferior flow images, 0: Dont.", 
0, "" };

_cvint  _opmagc = { &opmagc,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of magnitude images, 0: Dont.", 
0, "" };

_cvint  _opflrecon = { &opflrecon,  
    0, 
    64, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flow recon type.", 
0, "" };

_cvint  _oprampdir = { &oprampdir,  
    -1, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Direction of the slab excitation ramp pulse. -1: negative ramp, 0: non-ramp, 1: positive ramp", 
0, "" };

_cvint  _project = { &project,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Type of projection image", 
0, "" };

_cvint  _vas_ovrhd = { &vas_ovrhd,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Vascular collapse memory overhead", 
0, "" };

_cvint  _slice_col = { &slice_col,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Do max-pixel collapse along slice axis, 0: Dont.", 
0, "" };

_cvint  _phase_col = { &phase_col,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Do max-pixel collapse along phase axis, 0: Dont.", 
0, "" };

_cvint  _read_col = { &read_col,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Do max-pixel collapse along readout axis, 0: Dont.", 
0, "" };

_cvint  _mag_mask = { &mag_mask,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Use magnitude weighting mask, 0: Dont use.", 
0, "" };

_cvint  _phase_cor = { &phase_cor,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Phase correction enabled 0: No phase correction.", 
0, "" };

_cvint  _extras = { &extras,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Enable mag. and indiv. axis images, 0: Dont.", 
0, "" };

_cvint  _mag_create = { &mag_create,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of magnitude images, 0: Dont.", 
0, "" };

_cvint  _rl_flow = { &rl_flow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Right-Left flow images, 0: Dont.", 
0, "" };

_cvint  _ap_flow = { &ap_flow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Anterior-Posterior flow images, 0: Dont.", 
0, "" };

_cvint  _si_flow = { &si_flow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "1: Create set of Superior-Inferior flow images, 0: Dont.", 
0, "" };

_cvint  _imagenum = { &imagenum,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Total number of images per slice", 
0, "" };

_cvint  _motsa_ovrhd = { &motsa_ovrhd,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "motsa memory overhead for intermediate storage of overlap images", 
0, "" };

_cvint  _opslinky = { &opslinky,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1: SLINKY acquistion, 0: Non-SLINKY acq.", 
0, "" };

_cvint  _opinhance = { &opinhance,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for Inherence enhancement features", 
    0, ""
};

_cvint  _opmavric = { &opmavric,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for MAVRIC-SL features", 
    0, ""
};

_cvint  _opinhsflow = { &opinhsflow,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for Inhance Spinflow features", 
    0, ""
};

_cvint  _opmsde = { &opmsde,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MSDE Flag", 
0, "" };

_cvfloat  _opvest = { &opvest,  
    20.0, 
    100.0, 
    50.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Velocity Suppress Target in mm/sec", 
0, "" };

_cvint  _opmsdeaxx = { &opmsdeaxx,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "X grad MSDE", 
0, "" };

_cvint  _opmsdeaxy = { &opmsdeaxy,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Y grad MSDE", 
0, "" };

_cvint  _opmsdeaxz = { &opmsdeaxz,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Z grad MSDE", 
0, "" };


_cvint  _opbreathhold = { &opbreathhold,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Breath-hold input from scn: 0-None, 1-Expiration, 2-Inspiration, 3-Mid..", 
0, "" };





_cvint  _opautosubtract = { &opautosubtract,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to indicate if Auto Subtraction is on or off ", 
    0, ""
};

_cvint  _opsepseries = { &opsepseries,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to indicate if Separate Series is on or off ", 
    0, ""
};




_cvint  _pititle = { &pititle,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, "User Page Title", 0, "" };
_cvfloat  _opuser0 = { &opuser0,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  0", 0, "" };
_cvfloat  _opuser1 = { &opuser1,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  1", 0, "" };
_cvfloat  _opuser2 = { &opuser2,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  2", 0, "" };
_cvfloat  _opuser3 = { &opuser3,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  3", 0, "" };
_cvfloat  _opuser4 = { &opuser4,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  4", 0, "" };
_cvfloat  _opuser5 = { &opuser5,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  5", 0, "" };
_cvfloat  _opuser6 = { &opuser6,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  6", 0, "" };
_cvfloat  _opuser7 = { &opuser7,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  7", 0, "" };
_cvfloat  _opuser8 = { &opuser8,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  8", 0, "" };
_cvfloat  _opuser9 = { &opuser9,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable  9", 0, "" };
_cvfloat  _opuser10 = { &opuser10,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 10", 0, "" };
_cvfloat  _opuser11 = { &opuser11,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 11", 0, "" };
_cvfloat  _opuser12 = { &opuser12,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 12", 0, "" };
_cvfloat  _opuser13 = { &opuser13,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 13", 0, "" };
_cvfloat  _opuser14 = { &opuser14,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 14", 0, "" };
_cvfloat  _opuser15 = { &opuser15,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 15", 0, "" };
_cvfloat  _opuser16 = { &opuser16,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 16", 0, "" };
_cvfloat  _opuser17 = { &opuser17,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 17", 0, "" };
_cvfloat  _opuser18 = { &opuser18,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 18", 0, "" };
_cvfloat  _opuser19 = { &opuser19,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 19", 0, "" };
_cvfloat  _opuser20 = { &opuser20,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 20", 0, "" };
_cvfloat  _opuser21 = { &opuser21,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 21", 0, "" };
_cvfloat  _opuser22 = { &opuser22,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 22", 0, "" };
_cvfloat  _opuser23 = { &opuser23,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 23", 0, "" };
_cvfloat  _opuser24 = { &opuser24,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 24", 0, "" };
_cvfloat  _opuser25 = { &opuser25,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 25", 0, "" };
_cvfloat  _opuser26 = { &opuser26,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 26", 0, "" };
_cvfloat  _opuser27 = { &opuser27,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 27", 0, "" };
_cvfloat  _opuser28 = { &opuser28,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 28", 0, "" };
_cvfloat  _opuser29 = { &opuser29,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 29", 0, "" };
_cvfloat  _opuser30 = { &opuser30,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 30", 0, "" };
_cvfloat  _opuser31 = { &opuser31,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 31", 0, "" };
_cvfloat  _opuser32 = { &opuser32,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 32", 0, "" };
_cvfloat  _opuser33 = { &opuser33,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 33", 0, "" };
_cvfloat  _opuser34 = { &opuser34,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 34", 0, "" };
_cvfloat  _opuser35 = { &opuser35,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 35", 0, "" };

_cvfloat  _opuser36 = { &opuser36,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 36", 0, "" };
_cvfloat  _opuser37 = { &opuser37,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 37", 0, "" };
_cvfloat  _opuser38 = { &opuser38,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 38", 0, "" };
_cvfloat  _opuser39 = { &opuser39,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 39", 0, "" };
_cvfloat  _opuser40 = { &opuser40,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 40", 0, "" };
_cvfloat  _opuser41 = { &opuser41,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 41", 0, "" };
_cvfloat  _opuser42 = { &opuser42,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 42", 0, "" };
_cvfloat  _opuser43 = { &opuser43,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 43", 0, "" };
_cvfloat  _opuser44 = { &opuser44,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 44", 0, "" };
_cvfloat  _opuser45 = { &opuser45,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 45", 0, "" };
_cvfloat  _opuser46 = { &opuser46,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 46", 0, "" };
_cvfloat  _opuser47 = { &opuser47,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 47", 0, "" };
_cvfloat  _opuser48 = { &opuser48,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User CV variable 48", 0, "" };





_cvint  _opnostations = { &opnostations,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "The total number of stations for the current meta-series", 
0, "" };

_cvint  _opstation = { &opstation,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "The current station number", 
0, "" };

_cvint  _oploadprotocol = { &oploadprotocol,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "This Multistation series is loaded from saved Protocol", 
0, "" };

_cvint  _opmask = { &opmask,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to indicated mask series", 
0, "" };

_cvint  _opvenous = { &opvenous,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to indicated venous series", 
0, "" };


_cvint  _opprotRxMode = { &opprotRxMode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = Scan Mode, 1 = Protocol Mode", 
0, "" };





_cvint  _opacqo = { &opacqo,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Acq. mode: 0=interleaved, 1=sequential, 2=rapidframe", 
0, "" };

_cvint  _opfphases = { &opfphases,  
    PHASES_MIN, 
    PHASES_MAX, 
    PHASES_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Images per location in a FAST scan, range between 1 and 512", 
0, "" };

_cvint  _opsldelay = { &opsldelay,  
    50000, 
    20000000, 
    50000,  0, 0, 0, 1, 1, 
    VIS, 
    "Delay(ms) after acq.", 
0, "" };

_cvint  _avminsldelay = { &avminsldelay,  
    0, 
    20000000, 
    50000,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimum Delay after acq.", 
0, "" };


_cvint  _optphases = { &optphases,  
    PHASES_MIN, 
    PHASES_MAX, 
    PHASES_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Temporal Output Phases for Ectricks 1 and 512", 
0, "" };

_cvint  _opdynaplan_nphases = { &opdynaplan_nphases,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Dynamic Plan: number of temporal phases", 
0, "" };

_cvint  _opvsphases = { &opvsphases,  
    PHASES_MIN, 
    PHASES_MAX, 
    PHASES_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Wash-in Phases for DISCO with DynaPlan", 
0, "" };





_cvint  _opdiffuse = { &opdiffuse,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Diffusion,0=off,1=on", 
    EM_PSD_DIFF_INCOMPATIBLE, ""
};

_cvint  _opsavedf = { &opsavedf,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1=T2,Comb,2=T2,Diff,Comb", 
0, "" };

_cvint  _opmintedif = { &opmintedif,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimize Diffusion Timing", 
0, "" };

_cvint  _opseparatesynb = { &opseparatesynb,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Separate Series for Synthetic DWI", 
0, "" };

_cvint  _opdfaxx = { &opdfaxx, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfaxy = { &opdfaxy, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfaxz = { &opdfaxz, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfaxall = { &opdfaxall, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfaxtetra = { &opdfaxtetra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _opdfax3in1 = { &opdfax3in1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _opbval = { &opbval,  
    0, 
    1000, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "B Value for Diffusion", 
0, "" };

_cvint  _opnumbvals = { &opnumbvals,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Diffusion b values", 
0, "" };

_cvint  _opautonumbvals = { &opautonumbvals,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto # b-values", 
0, "" };

_cvint  _opnumsynbvals = { &opnumsynbvals,  
    MIN_NUM_SYNBVALS, 
    MAX_NUM_SYNBVALS, 
    MIN_NUM_SYNBVALS,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Synthetic b values", 
0, "" };

_cvfloat  _opdifnext2 = { &opdifnext2,  
    0, 
    MAXFLOAT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of excitations for diffusion T2 image", 
0, "" };

_cvint  _opautodifnext2 = { &opautodifnext2,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto NEX for T2", 
0, "" };

_cvint  _optensor = { &optensor,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "TENSOR", 
0, "" };

_cvint  _opdifnumdirs = { &opdifnumdirs,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Diffusion directions", 
0, "" };

_cvint  _opdifnumt2 = { &opdifnumt2,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of T2 images", 
0, "" };

_cvint  _opautodifnumt2 = { &opautodifnumt2,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto # of T2 Images", 
0, "" };

_cvint  _opdualspinecho = { &opdualspinecho,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Dual Spin Echo: Off=0, On=1", 
0, "" };

_cvint  _opdifproctype = { &opdifproctype,  
    0, 
    7, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Diffusion Tensor Automated Processing bitmask", 
0, "" };

_cvint  _opdifnumbvalues = { &opdifnumbvalues,  
    1, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of b values", 
0, "" };

_cvint  _dti_plus_flag = { &dti_plus_flag,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "DTI+ Flag", 
0, "" };




_cvint  _optouch = { &optouch,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH App.", 
    0, ""
};

_cvint  _optouchfreq = { &optouchfreq,  
    20, 
    5000, 
    60,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Driver Frequency", 
0, "" };

_cvint  _optouchmegfreq = { &optouchmegfreq,  
    20, 
    5000, 
    60,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Motion Encoding Gradient Frequency", 
0, "" };

_cvint  _optouchamp = { &optouchamp,  
    0, 
    100, 
    20,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Driver Amplitude", 
0, "" };

_cvint  _optouchtphases = { &optouchtphases,  
    4, 
    128, 
    4,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Temporal Phases", 
0, "" };

_cvint  _optouchcyc = { &optouchcyc,  
    0, 
    5000, 
    3,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH Driver Cycles per Trigger", 
0, "" };

_cvint  _optouchax = { &optouchax,  
    1, 
    7, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "MR-TOUCH MEG Direction: 1-X, 2-Y, 4-Z, 7-ALL", 
0, "" };




_cvint  _opaslprep = { &opaslprep,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASL Prep flag: 0=OFF, 1=ON.", 
    0, ""
};




_cvint  _opasl = { &opasl,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "3dASL flag: 0=off, 1=on.", 
    0, ""
};

_cvfloat  _oppostlabeldelay = { &oppostlabeldelay,  
    0.0, 
    5000.0, 
    1525.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Post label delay for ASL in msec", 
    0, ""
};

_cvint  _rhchannel_combine_method = { &rhchannel_combine_method,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    INVIS,  
    "Channel combination method",  
    0, ""
};

_cvint  _rhasl_perf_weighted_scale = { &rhasl_perf_weighted_scale,  
    1, 
    64, 
    32,  0, 0, 0, 1, 1, 
    INVIS,  
    "Scaling factor applied to ASL perfusion weighted images",  
    0, ""
};




_cvfloat  _cfslew_artmedium = { &cfslew_artmedium,  
    1.0, 
    20.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Medium ART mode slew rate in one  tenth of T/m/sec", 
0, "" };

_cvfloat  _cfgmax_artmedium = { &cfgmax_artmedium,  
    1.0, 
    5.0, 
    3.3,  0, 0, 0, 1, 1, 
    VIS, 
    "Medium ART mode gmax in G/cm", 
0, "" };

_cvfloat  _cfslew_arthigh = { &cfslew_arthigh,  
    1.0, 
    20.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "High ART  mode slew rate in one  tenth of T/m/sec", 
0, "" };

_cvfloat  _cfgmax_arthigh = { &cfgmax_arthigh,  
    1.0, 
    5.0, 
    3.3,  0, 0, 0, 1, 1, 
    VIS, 
    "High ART  mode gmax in G/cm", 
0, "" };

_cvint  _cfnumartlevels = { &cfnumartlevels,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of ART levels; 0-None; 1-One level; 2-Two levels", 
0, "" };

_cvint  _pinumartlevels = { &pinumartlevels,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "UI control to support multiple ART levels ", 
0, "" };


_cvfloat  _cfslew_artmediumopt = { &cfslew_artmediumopt,  
    1.0, 
    20.0, 
    5.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Medium optimal ART mode slew rate in one  tenth of T/m/sec", 
0, "" };

_cvfloat  _cfgmax_artmediumopt = { &cfgmax_artmediumopt,  
    1.0, 
    5.0, 
    2.2,  0, 0, 0, 1, 1, 
    VIS, 
    "Medium optimal ART mode gmax in G/cm", 
0, "" };




_cvint  _oprep_active = { &oprep_active,  
    1, 
    128, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "# of Active Repetitions", 
0, "" };

_cvint  _oprep_rest = { &oprep_rest,  
    1, 
    128, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "# of Rest Repetitions", 
0, "" };

_cvint  _opdda = { &opdda,  
    0, 
    50, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "# of Dummy Acquisitions", 
0, "" };

_cvint  _opinit_state = { &opinit_state,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Initial State", 
0, "" };

_cvint  _opfMRIPDTYPE = { &opfMRIPDTYPE,  
    SIMPLE_BLOCK, 
    EVENT_RELATED, 
    SIMPLE_BLOCK,  0, 0, 0, 1, 1, 
    VIS, 
    "fMRI paradigm type", 
0, "" };

_cvint  _opview_order = { &opview_order,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "View Order 1=Bottom/Up 0=Top/Down", 
0, "" };

_cvint  _opslice_order = { &opslice_order,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice Order 0=Sequential 1=Interleaved", 
0, "" };

_cvint  _oppsd_trig = { &oppsd_trig,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Trigger Type", 
0, "" };

_cvint  _oppdgm_str = { &oppdgm_str,  
    -1, 
    50, 
    -1,  0, 0, 0, 1, 1, 
    VIS, 
    "Paradigm String", 
0, "" };

_cvint  _opbwrt = { &opbwrt,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Brain Wave Real Time", 
0, "" };

_cvint  _cont_flag = { &cont_flag,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Acq. mode, 0=normscan, 1=contscan.", 
0, "" };






_cvint  _opautonecho = { &opautonecho,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto No of Echoes", 
0, "" };

_cvint  _opnecho = { &opnecho,  
    NECHO_MIN, 
    PSD_NECHO_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of echoes", 
    0, "opnecho out of range"
};

_cvint  _opnshots = { &opnshots,  
    1, 
    1024, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of shots", 
0, "" };

_cvint  _opautote = { &opautote,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto Min TE mode", 
0, "" };

_cvint  _opte = { &opte,  
    TE_MIN, 
    TE_MAX, 
    25000,  0, 0, 0, 1, 1, 
    VIS, 
    "Echo time", 
0, "" };

_cvint  _opte2 = { &opte2,  
    TE2_MIN, 
    TE_MAX, 
    50000,  0, 0, 0, 1, 1, 
    VIS, 
    "Time for second echo", 
0, "" };


_cvint  _optefw = { &optefw,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "TE selection: 0 = Minimum TE, 1 = Fat/Water in phase, 2 = Fat/Water out of phase.", 
0, "" };

_cvint  _opti = { &opti,  
    TI_MIN, 
    TI_MAX, 
    TI_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Inversion time", 
0, "" };

_cvint  _opbspti = { &opbspti,  
    TI_MIN, 
    TI_MAX, 
    TI_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "2/3 IR Blood Suppression TI.", 
    EM_PSD_BSP_INCOMPATIBLE, ""
};

_cvint  _opautoti = { &opautoti,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto TI mode", 
0, "" };

_cvint  _opautobti = { &opautobti,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto BSP TI mode", 
0, "" };

_cvint  _optrecovery = { &optrecovery,  
    TRECOVERY_MIN, 
    TRECOVERY_MAX, 
    TRECOVERY_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Recovery time", 
0, "" };

_cvint  _optlabel = { &optlabel,  
    TLABEL_MIN, 
    TLABEL_MAX, 
    TLABEL_DEF,  0, 0, 0, 1, 1, 
    VIS, 
    "Labeling time", 
0, "" };

_cvint  _opt2prepte = { &opt2prepte,  
    TE_MIN, 
    TE_MAX, 
    25000,  0, 0, 0, 1, 1, 
    VIS, 
    "T2PREP Echo time", 
0, "" };

_cvint  _opautotr = { &opautotr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto Min TR mode - 1:on, 0:off", 
0, "" };

_cvint  _opnspokes = { &opnspokes,  
    64, 
    512, 
    256,  0, 0, 0, 1, 1, 
    VIS, 
    "Spokes per Segment", 
0, "" };

_cvfloat  _opoversamplingfactor = { &opoversamplingfactor,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Over sampling factor", 
0, "" };

_cvint  _opacs = { &opacs,  
    1, 
    12, 
    4,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of ACS lines", 
0, "" };

_cvint  _opharmonize = { &opharmonize,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Harmonize (0=Off, 1=On).", 
    0, ""
};

_cvint  _pieffbladewidth = { &pieffbladewidth,  
   1, 
   MAXINT, 
   1,  0, 0, 0, 1, 1, 
   VIS, 
   "Effective blade width", 
0, "" };

_cvint  _opinrangetr = { &opinrangetr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,     
    "Flag for In-Range TR mode - 1:on, 0:off", 
0, "" };

_cvint  _opinrangetrmin = { &opinrangetrmin,  
    -MAXINT, 
    MAXINT, 
    160000,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimum TR for in-range auto TR", 
0, "" };

_cvint  _opinrangetrmax = { &opinrangetrmax,  
    -MAXINT, 
    MAXINT, 
    10000000,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximum TR for in-range auto TR", 
0, "" };

_cvint  _optr = { &optr,  
    TR_MIN, 
    TR_MAX, 
    400000,  0, 0, 0, 1, 1, 
    VIS, 
    "Time of repetition", 
0, "" };

_cvfloat  _opflip = { &opflip,  
    1, 
    180, 
    90,  0, 0, 0, 1, 1, 
    VIS, 
    "Flip angle for RF1 slice.", 
0, "" };

_cvint  _opautoflip = { &opautoflip,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto Flip Angle mode - 1:on, 0:off", 
0, "" };

_cvint  _opautoetl = { &opautoetl,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto ETL calculation - 1:on, 0:off", 
0, "" };

_cvint  _opetl = { &opetl,  
    1, 
    256, 
    8,  0, 0, 0, 1, 1, 
    VIS, 
    "Echo Train Length in number of echoes", 
0, "" };

_cvint  _opautorbw = { &opautorbw,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto RBW calculation - 1:on, 0:off", 
0, "" };




_cvfloat  _oprbw = { &oprbw,  
    0, 
    MAXFLOAT, 
    16.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Receive BW in khz", 
0, "" };

_cvfloat  _oprbw2 = { &oprbw2,  
    0, 
    MAXFLOAT, 
    16.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Receive BW for echoes 2-4 in kHz", 
0, "" };





_cvfloat  _opfov = { &opfov,  
    FOV_MIN_LX, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    VIS, 
    "Field of view size in both the x and y direction", 
0, "" };

_cvfloat  _opphasefov = { &opphasefov,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Fraction of the field of view size in the phase direction, 1=full", 
0, "" };

_cvfloat  _opnpwfactor = { &opnpwfactor,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "No Phase Wrap Factor", 
0, "" };

_cvfloat  _opfreqfov = { &opfreqfov,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Fraction of the field of view size in the frequency direction, 1=full", 
0, "" };

_cvint  _opautoslquant = { &opautoslquant,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto Slquant calculation - 1:on, 0:off", 
0, "" };

_cvint  _opslquant = { &opslquant,  
    1, 
    SLTAB_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice quantity", 
0, "" };

_cvint  _opsllocs = { &opsllocs,  
    1, 
    SLTAB_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice Locations", 
0, "" };

_cvfloat  _opslthick = { &opslthick,  
    MINTHICK, 
    MAXTHICK, 
    5,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice thickness in mm.", 
0, "" };

_cvfloat  _opslspace = { &opslspace,  
    -200, 
    200, 
    10,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice gap in mm.", 
0, "" };

_cvint  _opileave = { &opileave,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "This CV is set to 1 for INTerleaved slices, 0 otherwise", 
0, "" };





_cvint  _opcoax = { &opcoax,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Used to determine FOV for CFH", 
0, "" };

_cvfloat  _opvthick = { &opvthick,  
    0, 
    MAXVTHICK, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Total slab thickness in mm.", 
0, "" };

_cvint  _opvquant = { &opvquant,  
    1, 
    MAXVQUANT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "The number of slabs for 3D", 
0, "" };

_cvint  _opovl = { &opovl,  
    0, 
    SLTAB_MAX, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The number of overlapping locations in a multi-slab 3D prescription", 
0, "" };





_cvfloat  _oplenrl = { &oplenrl,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Length of ROI in the RL direction in mm", 
0, "" };

_cvfloat  _oplenap = { &oplenap,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Length of ROI in the AP direction in mm", 
0, "" };

_cvfloat  _oplensi = { &oplensi,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Length of ROI in the SI direction in mm", 
0, "" };

_cvfloat  _oplocrl = { &oplocrl,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Location of the ROI in the RL direction in mm", 
0, "" };

_cvfloat  _oplocap = { &oplocap,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Location of the ROI in the AP direction in mm", 
0, "" };

_cvfloat  _oplocsi = { &oplocsi,  
    -PSD_GRXROI_LEN, 
    PSD_GRXROI_LEN, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Location of the ROI in the SI direction in mm", 
0, "" };

_cvfloat  _oprlcsiis = { &oprlcsiis,  
    -PSD_COR, 
    PSD_COR, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Which logical board is RL direction 1=X,2=Y,3=Z", 
0, "" };

_cvfloat  _opapcsiis = { &opapcsiis,  
    -PSD_COR, 
    PSD_COR, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "Which logical board is AP direction 1=X,2=Y,3=Z", 
0, "" };

_cvfloat  _opsicsiis = { &opsicsiis,  
    -PSD_COR, 
    PSD_COR, 
    3,  0, 0, 0, 1, 1, 
    VIS, 
    "Which logical board is SI direction 1=X,2=Y,3=Z", 
0, "" };



_cvfloat  _opmonfov = { &opmonfov,  
    20, 
    FOV_MAX, 
    200,  0, 0, 0, 1, 1, 
    VIS, 
    "Length of monitor pulse in mm.", 
0, "" };

_cvfloat  _opmonthick = { &opmonthick,  
    5, 
    100, 
    20,  0, 0, 0, 1, 1, 
    VIS, 
    "Monitor thickness in mm.", 
0, "" };

_cvfloat  _opinittrigdelay = { &opinittrigdelay,  
    0.0, 
    100000000, 
    1000000,  0, 0, 0, 1, 1, 
    VIS, 
    "Initial trigger delay(s) for auto voice on smartprep and fluorotrigger.", 
0, "" };





_cvint  _opxres = { &opxres,  
    256, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    VIS, 
    "X(frequency) resolution", 
0, "" };

_cvint  _opyres = { &opyres,  
    128, 
    2048, 
    128,  0, 0, 0, 1, 1, 
    VIS, 
    "Y(phase) resolution", 
0, "" };

_cvint  _opautonex = { &opautonex,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto NEX calculation - 1:on, 0:off", 
0, "" };

_cvfloat  _opnex = { &opnex,  
    0, 
    MAX_NEX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Excitations", 
0, "" };

_cvint  _opslicecnt = { &opslicecnt,  
    0, 
    SLTAB_MAX, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "Number of slices before pause.", 
0, "" };

_cvint  _opnbh = { &opnbh,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Breath Hold", 
    0, ""
};

_cvint  _opspf = { &opspf,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Swap Phase and Frequency. 0 = no swap, 1 = swap", 
0, "" };

_cvint  _opcfsel = { &opcfsel,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=current, 1=mid, 2=water, 3=fat, 4=pk, 5=cent", 
0, "" };

_cvint  _opfcaxis = { &opfcaxis,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow comp axis: 1=freq, 2=slice.", 
0, "" };

_cvint  _opphcor = { &opphcor,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Phase Correction - 1:on, 0:off", 
0, "" };

_cvfloat  _opdose = { &opdose,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gadolinium dose in ml.", 0, "Contrast dose must be between 0 and 100 ml."
};

_cvint  _opcontrast = { &opcontrast,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Contrast agent administered. 0=false, 2=true", 
    0, ""
};





_cvint  _opchrate = { &opchrate,  
    ECG_BPM_MIN, 
    ECG_BPM_MAX, 
    100,  0, 0, 0, 1, 1, 
    VIS, 
    "Heartrate in beats/min.", 
    EM_PSD_HRATE_OUT_OF_RANGE, ""
};

_cvint  _opcphases = { &opcphases,  
    1, 
    MAX_CINE_PHASES, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of cardiac phases for cine.", 
    0, ""
};

_cvint  _opaphases = { &opaphases,  
    1, 
    512, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of average acquired cardiac phases for cine.", 
    0, ""
};

_cvint  _opclocs = { &opclocs,  
    1, 
    MAX_CINE_SLICES, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Locs/Acq for CINE", 
    0, ""
};





_cvint  _ophrate = { &ophrate,  
    ECG_BPM_MIN, 
    ECG_BPM_MAX, 
    60,  0, 0, 0, 1, 1, 
    VIS, 
    "Heartrate in beats/min.", 
    EM_PSD_HRATE_OUT_OF_RANGE, ""
};

_cvint  _oparr = { &oparr,  
    0, 
    50, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Arrythmia rejection ratio", 
0, "" };

_cvint  _ophrep = { &ophrep,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of heart beats per repetition", 
0, "" };

_cvint  _opautotdel1 = { &opautotdel1,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Auto Trigger Delay mode: 0=off, 1=minimum, 2=recommended, 3=systolic, 4=diastolic", 
0, "" };

_cvint  _optdel1 = { &optdel1,  
    MIN_TDEL1, 
    MAX_TDEL1, 
    20000,  0, 0, 0, 1, 1, 
    VIS, 
    "Time of delay from trigger to center of first RF 90", 
0, "" };

_cvint  _optseq = { &optseq,  
    -MAXINT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "Inter-sequence time from scan", 
0, "" };

_cvint  _opphases = { &opphases,  
    1, 
    DATA_ACQ_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of phases of the heart cycle to image", 
0, "" };

_cvint  _opcardseq = { &opcardseq,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0 = other, 1 = minimum, 2 = even", 
0, "" };

_cvint  _opmphases = { &opmphases,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=single phase, 1=multiple phase", 
0, "" };

_cvint  _oparrmon = { &oparrmon,  
    -10, 
    10, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Arrythmia rejection monitoring flag: 1 = yes, 0 = no", 
0, "" };

_cvint  _opvps = { &opvps,  
    -MAXINT, 
    MAXINT, 
    8,  0, 0, 0, 1, 1, 
    VIS, 
    "Views per segment", 
0, "" };

_cvint  _opautovps = { &opautovps,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Auto VPS calculation - 1:on, 0:off", 
0, "" };

_cvint  _opcgatetype = { &opcgatetype,  
    CARDIAC_GATE_TYPE_MIN, 
    CARDIAC_GATE_TYPE_MAX, 
    CARDIAC_GATE_TYPE_NONE,  0, 0, 0, 1, 1, 
    VIS, 
    "0=OFF, 1=ECG, 2=PG", 
0, "" };

_cvint  _opadvgate = { &opadvgate,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable Advanced ECG Gating.", 
0, "" };


_cvint  _opfcine = { &opfcine,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Fast CINE Mode.", 
    EM_PSD_FCINE_INCOMPATIBLE, ""
};




_cvint  _opcineir = { &opcineir,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "CineIR feature.", 
0, "" };






_cvint  _opstress = { &opstress,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Cardiac RealTime Visualization/Acquisition Activation Flag.", 
0, "" };


_cvint  _opnrr = { &opnrr,  
    0, 
    10, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of R-R Intervals to Acquire for Monitor Mode.", 
0, "" };


_cvint  _opnrr_dda = { &opnrr_dda,  
    0, 
    MAXINT, 
    8,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of R-R Intervals to Acquire for Monitor Mode.", 
0, "" };





_cvint  _oprtcgate = { &oprtcgate,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory Trigger flag", 
    EM_PSD_RESP_TRIG_NOT_SUPPORTED, ""
};

_cvint  _oprtrate = { &oprtrate,  
    3, 
    ECG_BPM_MAX, 
    12,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory rate  in beats/min.", 
0, "" };

_cvint  _oprtrep = { &oprtrep,  
    1, 
    5, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of breaths per repetition", 
0, "" };

_cvint  _oprttdel1 = { &oprttdel1,  
    MIN_TDEL1, 
    MAX_TDEL1, 
    20000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Time of delay from trigger to center of first RF 90", 
0, "" };

_cvint  _oprttseq = { &oprttseq,  
    -MAXINT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory Inter-sequence time from scan", 
0, "" };

_cvint  _oprtcardseq = { &oprtcardseq,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0 = other, 1 = minimum, 2 = even", 
0, "" };

_cvint  _oprtarr = { &oprtarr,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory Trigger window", 
0, "" };

_cvint  _oprtpoint = { &oprtpoint,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory trigger point", 
0, "" };





_cvint  _opnavrrmeas = { &opnavrrmeas,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory Rate measurement: 0 = off, 1 = on", 
0, "" };

_cvint  _opnavrrmeastime = { &opnavrrmeastime,  
    5, 
    300, 
    20,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximum Respiratory Rate measurement time in sec", 
0, "" };

_cvint  _opnavrrmeasrr = { &opnavrrmeasrr,  
    3, 
    ECG_BPM_MAX, 
    12,  0, 0, 0, 1, 1, 
    VIS, 
    "Respiratory rate in beats/min for pinavrrmeasmaxsl calculation", 
0, "" };

_cvint  _opnavsltrack = { &opnavsltrack,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator slab/slice tracking: 0 = off, 1 = on", 
0, "" };

_cvint  _opnavautoaccwin = { &opnavautoaccwin,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator auto acceptance window: 0 = off, 1 = on", 
0, "" };

_cvfloat  _opnavaccwin = { &opnavaccwin,  
    0.0, 
    200.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator acceptance window in mm", 
0, "" };

_cvint  _opnavautotrigtime = { &opnavautotrigtime,  
    0, 
    600, 
    10,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator auto trigger time in sec", 
0, "" };

_cvint  _opnavpsctime = { &opnavpsctime,  
    0, 
    600, 
    10,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator prescan time in sec", 
0, "" };

_cvint  _opnavmaxinterval = { &opnavmaxinterval,  
    50, 
    1000, 
    200,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximum Navigator interval in navigator gating in msec", 
0, "" };

_cvint  _opnavtype = { &opnavtype,  
    PSD_NAV_TYPE_90_180, 
    PSD_NAV_TYPE_CYL, 
    PSD_NAV_TYPE_90_180,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator Type: 0 = 90-180, 1 = Cylindric)", 
0, "" };

_cvint  _opnavpscpause = { &opnavpscpause,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Pause After navigator prescan: 0 = off, 1 = on", 
0, "" };

_cvint  _opnavsigenhance = { &opnavsigenhance,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Navigator Signal Enhancement: 0 = off, 1 = on", 
0, "" };


_cvint  _opasset = { &opasset,  
    0, 
    6, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET mode: 0=off, 1=calibration, 2=phase asset scan, 3=slice asset scan, 5=T2Map, 6= Regularized calibration", 
0, "" };

_cvint  _opassetcal = { &opassetcal,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET calibration mode: 0=off, 1=on", 
    EM_PSD_NO_ASSET_CAL, ""
};

_cvint  _opassetscan = { &opassetscan,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET scan mode: 0=off, 1=on", 
    EM_PSD_NO_ASSET_SCAN, ""
};

_cvint  _rhcoilno = { &rhcoilno,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number identifying currently selected coil", 
0, "" };










_cvint  _rhcal_options = { &rhcal_options,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon Calibration Strategy", 
0, "" };

_cvint  _rhasset = { &rhasset,  
    0, 
    12, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET mode: 0=off, 1=calib, 2=phase asset, 3=slice asset, 5=T2Map, 6=Regularized Calib, 7=Regularized Phase Asset, 8=Regularized Slice Asset, 11=ARC, 12=DVC ARC", 
0, "" };

_cvint  _rhasset_calthresh = { &rhasset_calthresh,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET background threshold (10^6 * percentage of volume peak)", 
0, "" };

_cvfloat  _rhasset_R = { &rhasset_R,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET phase encoding reduction factor", 
0, "" };

_cvint  _rhasset_phases = { &rhasset_phases,  
    PHASES_MIN, 
    PHASES_MAX, 
    PHASES_MIN,  0, 0, 0, 1, 1, 
    VIS, 
    "Images per location for ASSET", 
0, "" };

_cvfloat  _rhscancent = { &rhscancent,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Table position for ASSET scan", 
0, "" };

_cvint  _rhasset_alt_cal = { &rhasset_alt_cal,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Use alternate ASSET calibration (0-Normal, 1-Apodized for signal voids)", 
    0, ""
};

_cvint  _rhasset_torso = { &rhasset_torso,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Tune ASSET recon for torso scanning", 
    0, ""
};

_cvint  _rhasset_localTx = { &rhasset_localTx,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Tune ASSET recon for local transmit scanning", 
    0, ""
};

_cvfloat  _rhasset_TuningFactor = { &rhasset_TuningFactor,  
    0.0, 
    100.0, 
    15.0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET tuning factor for regularization", 
    0, ""
};

_cvfloat  _rhasset_SnrMin = { &rhasset_SnrMin,  
    0.0, 
    100.0, 
    15.0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET SNR Min limitation for regularization", 
    0, ""
};

_cvfloat  _rhasset_SnrMax = { &rhasset_SnrMax,  
    0.0, 
    100.0, 
    75.0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET SNR Max limitation for regularization", 
    0, ""
};

_cvfloat  _rhasset_SnrScalar = { &rhasset_SnrScalar,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET SNR Scaling factor", 
    0, ""
};




_cvint  _oppure = { &oppure,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PURE mode: 0==OFF, 1==OFF, 2==PURE 1, 3==PURE 2", 
    0, ""
};

_cvint  _rhpure = { &rhpure,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PURE mode: 0==OFF, 1==CAL, 2==PURE 1, 3==PURE 2", 
    0, ""
};

_cvint  _oppurecal = { &oppurecal,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PURE calibration mode: 0=off, 1=on", 
    0, ""
};

_cvint  _rhpurechannel = { &rhpurechannel,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "receive channel for volume refscan in PURE", 
    0, ""
};


_cvint  _rhpurefilter = { &rhpurefilter,  
    0, 
    1,  
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "use advanced filter for PURE 1 == yes, 0 == no", 
    0, ""
};

_cvfloat  _rhpure_scale_factor = { &rhpure_scale_factor,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "receiver scaling factor ratio between surface and volume coil for PURE", 
    0, ""
};

_cvint  _cfpure_filtering_mode = { &cfpure_filtering_mode,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE filtering mode", 
    0, ""
};

_cvint  _rhpure_filtering_mode = { &rhpure_filtering_mode,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE filtering mode", 
    0, ""
};

_cvfloat  _rhpure_lambda = { &rhpure_lambda,  
    1.0, 
    100.0, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE lambda", 
    0, ""
};

_cvfloat  _rhpure_tuning_factor_surface = { &rhpure_tuning_factor_surface,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE surface tuning factor", 
    0, ""
};

_cvfloat  _rhpure_tuning_factor_body = { &rhpure_tuning_factor_body,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE body tuning factor", 
    0, ""
};

_cvfloat  _rhpure_derived_cal_fraction = { &rhpure_derived_cal_fraction,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE derived calibration fraction", 
    0, ""
};

_cvfloat  _rhpure_cal_reapodization = { &rhpure_cal_reapodization,  
    0.0, 
    MAXFLOAT, 
    12.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE calibration reapodization window radius", 
    0, ""
};

_cvint  _opcalrequired = { &opcalrequired,  
    PSD_OFF, 
    2, 
    PSD_OFF ,  0, 0, 0, 1, 1, 
    VIS, 
    "Calibration needed: 0=Cal not needed, 1=valid Cal needed, 2=Cal required all the time", 
    0, ""
};

_cvint  _rhpure_blur_enable = { &rhpure_blur_enable,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE blur enable", 
    0, ""
};

_cvfloat  _rhpure_blur = { &rhpure_blur,  
    0.0, 
    100.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE blur", 
    0, ""
};

_cvfloat  _rhpure_mix_lambda = { &rhpure_mix_lambda,  
    1.0, 
    100.0, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix lambda", 
    0, ""
};

_cvfloat  _rhpure_mix_tuning_factor_surface = { &rhpure_mix_tuning_factor_surface,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix surface tuning factor", 
    0, ""
};

_cvfloat  _rhpure_mix_tuning_factor_body = { &rhpure_mix_tuning_factor_body,  
    0.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix body tuning factor", 
    0, ""
};

_cvint  _rhpure_mix_blur_enable = { &rhpure_mix_blur_enable,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix blur enable", 
    0, ""
};

_cvfloat  _rhpure_mix_blur = { &rhpure_mix_blur,  
    0.0, 
    100.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix blur", 
    0, ""
};

_cvfloat  _rhpure_mix_alpha = { &rhpure_mix_alpha,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix alpha", 
    0, ""
};

_cvint  _rhpure_mix_otsu_class_qty = { &rhpure_mix_otsu_class_qty,  
    2, 
    3, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix Otsu class quantity", 
    0, ""
};

_cvfloat  _rhpure_mix_exp_wt = { &rhpure_mix_exp_wt,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix exponential weight", 
    0, ""
};

_cvint  _rhpure_mix_erode_dist = { &rhpure_mix_erode_dist,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix erosion distance", 
    0, ""
};

_cvint  _rhpure_mix_dilate_dist = { &rhpure_mix_dilate_dist,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix dilation distance", 
    0, ""
};

_cvint  _rhpure_mix_aniso_blur = { &rhpure_mix_aniso_blur,  
    0, 
    9, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix anisotropic blur", 
    0, ""
};

_cvint  _rhpure_mix_aniso_erode_dist = { &rhpure_mix_aniso_erode_dist,  
    0, 
    9, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix anisotropic erosion distance", 
    0, ""
};

_cvint  _rhpure_mix_aniso_dilate_dist = { &rhpure_mix_aniso_dilate_dist,  
    0, 
    9, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix anisotropic dilation distance", 
    0, ""
};

_cvint  _opcalmode = { &opcalmode,  
    CAL_MODE_MIN, 
    CAL_MODE_MAX, 
    CAL_MODE_STANDARD,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET/PURE calibration mode: 0=standard, 1=breathhold/free-breathing, 2=free-breathing", 
    0, ""
};

_cvint  _rhcalmode = { &rhcalmode,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "calibration mode: 0=non-interleaved, 1=interleaved, 2=simultaneous", 
    0, ""
};

_cvint  _opcaldelay = { &opcaldelay,  
    0, 
    MAXINT, 
    5000000,  0, 0, 0, 1, 1, 
    VIS, 
    "delay time between breathhold and free-breathing passes of ASSET/PURE calibration scan", 
    0, ""
};

_cvint  _rhcal_pass_set_vector = { &rhcal_pass_set_vector,  
    11, 
    3222, 
    12,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET/PURE calibration pass set vector", 
    0, ""
};

_cvint  _rhcal_nex_vector = { &rhcal_nex_vector,  
    101, 
    3999999, 
    101,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET/PURE calibration pass set NEX vector", 
    0, ""
};

_cvint  _rhcal_weight_vector = { &rhcal_weight_vector,  
    101, 
    3999999, 
    101,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET/PURE calibration pass set weight vector", 
    0, ""
};

_cvint  _sifsetwokey = { &sifsetwokey,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to enable fse-II options. 0=off, 1=on"
, 0, "" };

_cvint  _opautosldelay = { &opautosldelay,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for auto sldelay mode. 0=off, 1=on", 
0, "" };




_cvint  _specnuc = { &specnuc,  
    1, 
    129, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Current spectro nucleus.", 
    0, ""
};

_cvint  _specpts = { &specpts,  
    256, 
    MAX_FILTER_POINTS, 
    256,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of points per frame for spectro.", 
    0, ""
};

_cvint  _specwidth = { &specwidth,  
    500, 
    32000, 
    2000,  0, 0, 0, 1, 1, 
    VIS, 
    "Spectral width.", 
    0, ""
};

_cvint  _specnavs = { &specnavs,  
    1, 
    2048, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of averages for spectro.", 
    0, ""
};

_cvint  _specnex = { &specnex,  
    1, 
    4096, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of excitations for spectro.", 
    0, ""
};

_cvint  _specdwells = { &specdwells,  
    0, 
    4096, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of dwell periods for spectro.", 
    0, ""
};

_cvint  _acquire_type = { &acquire_type,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Type of acq:0=MASTER_1H, 1=SLAVE_1H, 2=S_MNS, 3=M_MNS", 
    0, ""
};





_cvint  _pixmtband = { &pixmtband,  
    1, 
    3, 
    AMP_ERBTEC,  0, 0, 0, 1, 1, 
    INVIS, 
    "RF amplifier specification", 
    0, ""
};

_cvint  _pibbandfilt = { &pibbandfilt,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "o/p filter for broadband", 
    0, ""
};







_cvint  _opwarmup = { &opwarmup,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "warm up mode flag 0:no 1:yes", 
0, "" };

_cvint  _pscahead = { &pscahead,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable the Prescan Ahead option", 
0, "" };

_cvint  _opprescanopt = { &opprescanopt,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The option for skipping Prescan", 
0, "" };

_cvint  _autoadvtoscn = { &autoadvtoscn,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Automate the table movement", 
0, "" };

_cvint  _opapa = { &opapa,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "enable APA from scan", 
0, "" };

_cvint  _oppscapa = { &oppscapa,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "enable APA to prescan", 
0, "" };

_cvint  _PSslice_ind = { &PSslice_ind,   
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PS cfh/tg slice number",  
    0, ""
};

_cvint  _oppscshimtg = { &oppscshimtg,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Use shim volume for local TG : 0 = off, 1 = on", 
0, "" };

_cvint  _opdyntg = { &opdyntg,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "control for Dynamic TG", 
0, "" };


_cvfloat  _dynTG_fov = { &dynTG_fov,  
    FOV_MIN, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    INVIS, 
    "dynTG acquisition field of view (square)", 
0, "" };

_cvint  _dynTG_slquant = { &dynTG_slquant,  
    0, 
    SLTAB_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of planes to image in dynTG", 
0, "" };

_cvfloat  _dynTG_flipangle = { &dynTG_flipangle,  
    0, 
    360, 
    60.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "flip angle for dynTG entrypoint", 
0, "" };

_cvfloat  _dynTG_slthick = { &dynTG_slthick,  
    0, 
    MAXFLOAT, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "slice thickness for dynTG entry point", 
0, "" };

_cvint  _dynTG_xres = { &dynTG_xres,  
    32, 
    128, 
    64,  0, 0, 0, 1, 1, 
    INVIS, 
    "x resolution for dynTG entry point", 
0, "" };

_cvint  _dynTG_yres = { &dynTG_yres,  
    32, 
    128, 
    64,  0, 0, 0, 1, 1, 
    INVIS, 
    "y resolution for dynTG entry point", 
0, "" };

_cvint  _dynTG_baseline = { &dynTG_baseline,  
    0, 
    16, 
    8,  0, 0, 0, 1, 1, 
    INVIS, 
    "baselines for dynTG", 
0, "" };

_cvint  _dynTG_ptsize = { &dynTG_ptsize,  
    2, 
    4, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "pt. size for dynTG", 
0, "" };

_cvfloat  _dynTG_b1factor = { &dynTG_b1factor,  
    -MAXFLOAT, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "b1map scale factor for dynTG", 
0, "" };


_cvfloat  _rfshim_fov = { &rfshim_fov,  
    FOV_MIN, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    INVIS, 
    "rfshim acquisition field of view (square)", 
0, "" };

_cvint  _rfshim_slquant = { &rfshim_slquant,  
    0, 
    SLTAB_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of planes to image in rfshim", 
0, "" };

_cvfloat  _rfshim_flipangle = { &rfshim_flipangle,  
    0, 
    360, 
    60.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "flip angle for rfshim entrypoint", 
0, "" };

_cvfloat  _rfshim_slthick = { &rfshim_slthick,  
    0, 
    MAXFLOAT, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "slice thickness for rfshim entry point", 
0, "" };

_cvint  _rfshim_xres = { &rfshim_xres,  
    32, 
    128, 
    64,  0, 0, 0, 1, 1, 
    INVIS, 
    "x resolution for rfshim entry point", 
0, "" };

_cvint  _rfshim_yres = { &rfshim_yres,  
    32, 
    128, 
    64,  0, 0, 0, 1, 1, 
    INVIS, 
    "y resolution for rfshim entry point", 
0, "" };

_cvint  _rfshim_baseline = { &rfshim_baseline,  
    0, 
    16, 
    8,  0, 0, 0, 1, 1, 
    INVIS, 
    "baselines for rfshim", 
0, "" };

_cvint  _rfshim_ptsize = { &rfshim_ptsize,  
    2, 
    4, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "pt. size for rfshim", 
0, "" };

_cvfloat  _rfshim_b1factor = { &rfshim_b1factor,  
    -MAXFLOAT, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "b1map scale factor for rfshim", 
0, "" };


_cvint  _cal_xres = { &cal_xres,  
    16, 
    64, 
    32,  0, 0, 0, 1, 1, 
    INVIS, 
    "x resolution for extcal entry point", 
0, "" };

_cvint  _cal_yres = { &cal_yres,  
    16, 
    64, 
    32,  0, 0, 0, 1, 1, 
    INVIS, 
    "y resolution for extcal entry point", 
0, "" };

_cvint  _cal_slq = { &cal_slq,  
    16, 
    64, 
    36,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of slices for extcal entry point", 
0, "" };

_cvint  _cal_nex = { &cal_nex,  
    1, 
    16, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of nex for each coil receiver in extcal entry point", 
0, "" };

_cvint  _cal_interleave = { &cal_interleave,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "interleaving surface and volume coil in extcal entry point", 
0, "" };

_cvfloat  _cal_fov = { &cal_fov,  
    FOV_MIN_LX, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    VIS, 
    "Field of view size in both the x and y direction for extcal entry point", 
0, "" };

_cvfloat  _cal_slthick = { &cal_slthick,  
    5, 
    30, 
    15,  0, 0, 0, 1, 1, 
    INVIS, 
    "slice thickness for extcal entry point", 
0, "" };

_cvint  _cal_pass = { &cal_pass,  
    1, 
    2, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of passes for extcal entry point. 1 means surface only; 2 means surface and volume", 
0, "" };


_cvint  _coil_xres = { &coil_xres,  
    16, 
    64, 
    32,  0, 0, 0, 1, 1, 
    INVIS, 
    "x resolution for autocoil entry point", 
0, "" };

_cvint  _coil_yres = { &coil_yres,  
    16, 
    64, 
    32,  0, 0, 0, 1, 1, 
    INVIS, 
    "y resolution for autocoil entry point", 
0, "" };

_cvint  _coil_slq = { &coil_slq,  
    16, 
    64, 
    36,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of slices for autocoil entry point", 
0, "" };

_cvint  _coil_nex = { &coil_nex,  
    1, 
    16, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of nex for each coil receiver in autocoil entry point", 
0, "" };

_cvfloat  _coil_fov = { &coil_fov,  
    FOV_MIN_LX, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    VIS, 
    "Field of view size in both the x and y direction for autocoil entry point", 
0, "" };

_cvfloat  _coil_slthick = { &coil_slthick,  
    5, 
    30, 
    15,  0, 0, 0, 1, 1, 
    INVIS, 
    "slice thickness for autocoil entry point", 
0, "" };

_cvint  _coil_pass = { &coil_pass,  
    1, 
    2, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of passes for autocoil entry point", 
0, "" };

_cvint  _coil_interleave = { &coil_interleave,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "interleaving surface and volume coil in autocoil entry point", 
0, "" };




_cvfloat  _asfov = { &asfov,  
    FOV_MIN, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    VIS, 
    "Autoshim acquisition field of view (square)", 
0, "" };

_cvint  _asslquant = { &asslquant,  
    0, 
    3, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of planes to image in autoshim", 
0, "" };

_cvfloat  _asflip = { &asflip,  
    0, 
    360, 
    90,  0, 0, 0, 1, 1, 
    INVIS, 
    "flip angle for autoshim entrypoint", 
0, "" };

_cvfloat  _asslthick = { &asslthick,  
    0, 
    MAXFLOAT, 
    10,  0, 0, 0, 1, 1, 
    INVIS, 
    "slice thickness for autoshim entry point", 
0, "" };

_cvint  _asxres = { &asxres,  
    0, 
    MAXINT, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "x resolution for autoshim entry point", 
0, "" };

_cvint  _asyres = { &asyres,  
    0, 
    MAXINT, 
    128,  0, 0, 0, 1, 1, 
    INVIS, 
    "y resolution for autoshim entry point", 
0, "" };

_cvint  _asbaseline = { &asbaseline,  
    0, 
    MAXINT, 
    8,  0, 0, 0, 1, 1, 
    INVIS, 
    "baselines for autoshim", 
0, "" };

_cvint  _asrhblank = { &asrhblank,  
    0, 
    MAXINT, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "kissoff lines for autoshim", 
0, "" };

_cvint  _asptsize = { &asptsize,  
    2, 
    4, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "pt. size for autoshim", 
0, "" };

_cvint  _opascalcfov = { &opascalcfov,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "FOV for Localized Shim Calc", 
0, "" };




_cvfloat  _tgfov = { &tgfov,  
    FOV_MIN, 
    FOV_MAX, 
    FOV_MAX,  0, 0, 0, 1, 1, 
    VIS, 
    "Transmit Gain acquisition field of view (square)", 
0, "" };

_cvint  _tgcap = { &tgcap,  
    0, 
    MAX_SYS_TG, 
    MAX_SYS_TG,  0, 0, 0, 1, 1, 
    INVIS, 
    "TG Cap to prevent B1 field from exceeding coil limits", 
0, "" };

_cvint  _tgwindow = { &tgwindow,  
    0, 
    MAX_SYS_TG, 
    MAX_SYS_TG,  0, 0, 0, 1, 1, 
    INVIS, 
    "TG Window corresponding to difference between PSD B1 and system B1", 
0, "" };





_cvint  _oppscvquant = { &oppscvquant,  
     0, 
     MAX_PSC_VQUANT, 
     0,  0, 0, 0, 1, 1, 
     VIS, 
     "Number of Prescan Volumes", 
0, "" };




_cvint  _opdrivemode = { &opdrivemode,  
     0, 
     3, 
     1,  0, 0, 0, 1, 1, 
     VIS, 
     "Drive mode: 0-Single, 1-Quadrature, 2-Preset, 3-Optimized", 
0, "" };

_cvint  _pidrivemodenub = { &pidrivemodenub,  
     0, 
     7, 
     1,  0, 0, 0, 1, 1, 
     VIS, 
     "Bit mask for drive mode UI: 0-Hide UI, 1-Quadrature, 2-Preset, 4-Optimized", 
0, "" };


_cvint  _opexcitemode = { &opexcitemode,  
     0, 
     0, 
     0,  0, 0, 0, 1, 1, 
     VIS, 
     "Excitation Mode: 0-Selective, 1-Non-Selective, 2-Focus", 
0, "" };




_cvfloat  _lp_stretch = { &lp_stretch,  
    1.0, 
    10.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "RF stretch parameter (1 for no stretch)", 
    0, ""
};

_cvint  _lp_mode = { &lp_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Low power mode (0:off  1:on)", 
    0, ""
};

_cvfloat  _derateb1_body_factor = { &derateb1_body_factor,  
    0.0, 
    2.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "derateb1_body_factor", 
    0, ""
};

_cvfloat  _SAR_bodyNV_weight_lim = { &SAR_bodyNV_weight_lim,  
    0.0, 
    225.0, 
    110.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "SAR_bodyNV_weight_lim", 
    0, ""
};

_cvfloat  _derateb1_NV_factor = { &derateb1_NV_factor,  
    0.0, 
    2.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "derateb1_NV_factor", 
    0, ""
};

_cvfloat  _jstd_multiplier_body = { &jstd_multiplier_body,  
    0.0, 
    0.25, 
    0.145,  0, 0, 0, 1, 1, 
    INVIS, 
    "jstd_multiplier_body", 
    0, ""
};

_cvfloat  _jstd_multiplier_NV = { &jstd_multiplier_NV,  
    0.0, 
    0.25, 
    0.0137,  0, 0, 0, 1, 1, 
    INVIS, 
    "jstd_multiplier_NV", 
    0, ""
};

_cvfloat  _jstd_exponent_body = { &jstd_exponent_body,  
    0.0, 
    5.0, 
    0.763,  0, 0, 0, 1, 1, 
    INVIS, 
    "jstd_exponent_body", 
    0, ""
};

_cvfloat  _jstd_exponent_NV = { &jstd_exponent_NV,  
    0.0, 
    5.0, 
    1.154,  0, 0, 0, 1, 1, 
    INVIS, 
    "jstd_exponent_NV", 
    0, ""
};


_cvint  _pidiffmode = { &pidiffmode, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pifmriscrn = { &pifmriscrn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _piresol = { &piresol,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for resolution in mm field", 
0, "" };

_cvint  _pioverlap = { &pioverlap,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Will allow negative sl. spacing when 1", 
0, "" };

_cvint  _piforkvrgf = { &piforkvrgf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pinofreqoffset = { &pinofreqoffset, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _pirepactivenub = { &pirepactivenub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pireprestnub = { &pireprestnub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _piddanub = { &piddanub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _piinitstatnub = { &piinitstatnub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _piviewordernub = { &piviewordernub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pisliceordnub = { &pisliceordnub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pipsdtrignub = { &pipsdtrignub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _pispssupnub = { &pispssupnub, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




_cvint  _pi_neg_sp = { &pi_neg_sp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = positive, 1 = negative slice spacing", 
0, "" };

_cvfloat  _piisvaldef = { &piisvaldef,  
    0.0, 
    20.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "default value for the slice overlap", 
0, "" };


_cvint  _pi2dmde = { &pi2dmde,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to indicate 2DMDE sequence to scan", 
0, "" };




_cvint  _pidmode = { &pidmode,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=normal, 1=cardiac, 2=pause, 3=fastcard", 
0, "" };

_cvint  _piviews = { &piviews,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of views or reps needed for cardiac scan", 
0, "" };

_cvint  _piclckcnt = { &piclckcnt,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of seqs needed before view counter is decremented.", 
0, "" };

_cvfloat  _avmintscan = { &avmintscan,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "scan time", 
0, "" };

_cvfloat  _pitslice = { &pitslice,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "time for each slice in us", 
0, "" };

_cvfloat  _pitscan = { &pitscan,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "time for console clock", 
0, "" };


_cvfloat  _pimscan = { &pimscan,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "time for mask acquisition in ectricks", 
0, "" };

_cvfloat  _pivsscan = { &pivsscan,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "time for wash-in acquisition in DISCO with DynaPlan", 
0, "" };


_cvfloat  _pireconlag = { &pireconlag,  
    -3.0, 
    MAXFLOAT, 
    -3.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon Lag time in seconds ", 
0, "" };



_cvfloat  _pitres = { &pitres,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "temporal resolution time", 
0, "" };

_cvfloat  _pitres2 = { &pitres2,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Interp Temp time", 
0, "" };




_cvint  _pisaveinter = { &pisaveinter,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    " if 1 save intermediate images", 
0, "" };

_cvint  _pivextras = { &pivextras,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "number of extra (vascular) image files to create.", 
0, "" };

_cvint  _pinecho = { &pinecho,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Actual number of echoes for vascular image creation.", 
0, "" };




_cvfloat  _piscancenter = { &piscancenter,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    " center of scan - used by HPC ", 
0, "" };

_cvfloat  _pilandmark = { &pilandmark,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    " landmark position of scan", 
0, "" };

_cvfloat  _pitableposition = { &pitableposition,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    " table position of scan", 
0, "" };




_cvint  _pismode = { &pismode,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Service modes: 0=none,1=exciter,2=loopbk,3=exciter+loopbk", 
0, "" };

_cvint  _pishldctrl = { &pishldctrl,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Shield cooler control CV. 0=Turn off for scan", 
0, "" };

_cvint  _pinolr = { &pinolr,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Turn off left-right shading fix. 0=fix on, 1=no fix", 
0, "" };

_cvint  _pinoadc = { &pinoadc,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Turn off ADC correction. 0=correction on, 1=no fix", 
0, "" };

_cvint  _pimixtime = { &pimixtime,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "mixing time", 
0, "" };



_cvint  _pishim2 = { &pishim2,  
    HO_SHIM_NO, 
    HO_SHIM_YES, 
    HO_SHIM_NO,  0, 0, 0, 1, 1, 
    INVIS, 
    "High order shim psd", 
0, "" };

_cvint  _pi1stshimb = { &pi1stshimb,  
    HO_SHIM_1ST_BUTTON_ON, 
    HO_SHIM_1ST_BUTTON_OFF, 
    HO_SHIM_1ST_BUTTON_ON,  0, 0, 0, 1, 1, 
    INVIS, 
    "High order shim 1st button", 
0, "" };


_cvfloat  _pifractecho = { &pifractecho,  
    0.5, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Fractional echo ratio for SNR monitor", 
0, "" };

_cvint  _nope = { &nope,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for turning off phase encoding (1: turn off PE, 2: also display mag k-space and save raw data)", 
0, "" };




_cvint  _opuser_usage_tag = { &opuser_usage_tag,  
    0xFFFFFFFF, 
    0x7FFFFFFF, 
    0x00000000,  0, 0, 0, 1, 1, 
    INVIS, 
    "User CV and data acq usage tag", 
0, "" };

_cvint  _rhuser_usage_tag = { &rhuser_usage_tag,  
    0xFFFFFFFF, 
    0x7FFFFFFF, 
    0x00000000,  0, 0, 0, 1, 1, 
    INVIS, 
    "rhuser CV and data acq usage tag", 
0, "" };

_cvint  _rhFillMapMSW = { &rhFillMapMSW,  
    0x00000000, 
    0x0001FFFF, 
    0x00000000,  0, 0, 0, 1, 1, 
    INVIS, 
    "User CV and data acq fillmap MSW", 
0, "" };

_cvint  _rhFillMapLSW = { &rhFillMapLSW,  
    0xFFFFFFFF, 
    0x7FFFFFFF, 
    0x00000000,  0, 0, 0, 1, 1, 
    INVIS, 
    "User CV and data acq fillmap LSW", 
0, "" };




_cvint  _rhbline = { &rhbline,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of baseline pairs for NEX=1", 
0, "" };

_cvint  _rhblank = { &rhblank,  
    0, 
    MAXINT, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of blank pixel lines", 
0, "" };

_cvint  _rhnex = { &rhnex,  
    1, 
    150, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of excitations", 
0, "" };

_cvint  _rhnavs = { &rhnavs,  
    1, 
    32767, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of averages", 
0, "" };

_cvint  _rhnslices = { &rhnslices,  
    1, 
    DATA_ACQ_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of slices*phases.", 
0, "" };

_cvint  _rhnrefslices = { &rhnrefslices,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of reference slices.", 
0, "" };

_cvint  _rhnframes = { &rhnframes,  
    1, 
    YRES_MAX, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of recon frames.", 
0, "" };

_cvint  _rhfrsize = { &rhfrsize,  
    1, 
    XRES_MAX, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of complex sample pairs per view", 
0, "" };

_cvint  _rhnecho = { &rhnecho,  
    1, 
    PSD_NECHO_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of echoes ", 
0, "" };

_cvint  _rhnphases = { &rhnphases,  
    1, 
    PHASES_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of phases.", 
0, "" };

_cvint  _rhmphasetype = { &rhmphasetype,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Multiphase type: 0=Intleave 1=Seq.", 
0, "" };


_cvint  _rhtrickstype = { &rhtrickstype,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TRICKS Recon Options: 0:Unsub,1:k-space Sub,2:Mag Image Sub,4:Cmplx Image Sub,8:Both Sub & Unsub", 
0, "" };


































_cvint  _rhtype = { &rhtype,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS,  
    "Type of processing for recon.", 
0, "" };





















































_cvint  _rhtype1 = { &rhtype1,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Type of processing, 0=regular, 1=homodyne", 
0, "" };


























_cvint  _rhformat = { &rhformat,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Raw data format.", 
0, "" };

_cvint  _rhptsize = { &rhptsize,  
    2, 
    4, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of bytes per I or Q data", 
0, "" };

_cvint  _rhnpomp = { &rhnpomp,  
    1, 
    2, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of regular slices/POMP group", 
0, "" };





















_cvint  _rhrcctrl = { &rhrcctrl,  
    0, 
    MAXINT, 
    17,  0, 0, 0, 1, 1, 
    INVIS,         /* 17 = RHRCMAG + RHRCCOMP */
    "Recon image control", 
0, "" };

















_cvint  _rhdacqctrl = { &rhdacqctrl,  
    0, 
    32767, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon data acquisition control", 
0, "" };























_cvint  _rhexecctrl = { &rhexecctrl,  
    0, 
    32767, 
    RHXC_AUTO_DISPLAY | RHXC_XFER_IM,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon exective control", 
0, "" };









_cvint  _rhfdctrl = { &rhfdctrl,  
    0, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Feeder control bits", 
0, "" };

_cvfloat  _rhxoff = { &rhxoff,  
    -512.0, 
    512.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Frequency offset for this image", 
0, "" };

_cvfloat  _rhyoff = { &rhyoff,  
    -1024.0, 
    1024.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Phase offset for this image", 
0, "" };

_cvint  _rhrecon = { &rhrecon,  
    0, 
    30000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Alternate recon word", 
0, "" };

_cvint  _rhdatacq = { &rhdatacq,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Alternate data acquisition word", 
0, "" };

_cvint  _rhvquant = { &rhvquant,  
    0, 
    256, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of 3D slabs", 
0, "" };

_cvint  _rhslblank = { &rhslblank,  
    0, 
    256, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of kissoff slice pairs", 
0, "" };

_cvint  _rhhnover = { &rhhnover,  
    0, 
    1024, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of half nex overscans", 
0, "" };


_cvint  _rhfeextra = { &rhfeextra,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of points before echo", 
0, "" };

_cvint  _rhheover = { &rhheover,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of half echo oversamples", 
0, "" };

_cvint  _rhoscans = { &rhoscans,  
    0, 
    1024, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of overscans", 
0, "" };

_cvint  _rhddaover = { &rhddaover,  
    0, 
    256, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of half-nex overscans to throw away", 
0, "" };

_cvfloat  _rhzeroph = { &rhzeroph,  
    0.0, 
    1025.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Zero phase point", 
0, "" };

_cvfloat  _rhalpha = { &rhalpha,  
    0.0, 
    1.0, 
    0.46,  0, 0, 0, 1, 1, 
    INVIS, 
    "Alpha value for filter", 
0, "" };

_cvfloat  _rhnwin = { &rhnwin,  
    0.0, 
    256.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Window width", 
0, "" };

_cvfloat  _rhntran = { &rhntran,  
    0.0, 
    256.0, 
    2.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Transition width", 
0, "" };

_cvint  _rhherawflt = { &rhherawflt,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Half echo recon mode: 0 = Homodyne II, 1 = Homodyne II + BEF, 2 = 0 fill with HPF + BEF"
, 0, "" };

_cvfloat  _rhherawflt_befnwin = { &rhherawflt_befnwin,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Window width of band elimination filter (BEF)"
, 0, "" };

_cvfloat  _rhherawflt_befntran = { &rhherawflt_befntran,  
    0.0, 
    MAXFLOAT, 
    2.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Transition width of band elimination filter (BEF)"
, 0, "" };

_cvfloat  _rhherawflt_befamp = { &rhherawflt_befamp,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Amplitude of band elimination filter (BEF)"
, 0, "" };

_cvfloat  _rhherawflt_hpfamp = { &rhherawflt_hpfamp,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Amplitude of high pass filter (HPF)"
, 0, "" };

_cvfloat  _rhfermw = { &rhfermw,  
    0.0, 
    MAXFLOAT, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi width", 
0, "" };

_cvfloat  _rhfermr = { &rhfermr,  
    0.0, 
    MAXFLOAT, 
    128.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi radius", 
0, "" };

_cvfloat  _rhferme = { &rhferme,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi eccentricity", 
0, "" };

_cvfloat  _rhclipmin = { &rhclipmin,  
    -32767.0, 
    32767.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Minimum image value", 
0, "" };

_cvfloat  _rhclipmax = { &rhclipmax,  
    -32767.0, 
    32767.0, 
    16383.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Maximum image value", 
0, "" };

_cvfloat  _rhdoffset = { &rhdoffset,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Gain offset after reconstruction", 
0, "" };

_cvint  _rhudasave = { &rhudasave,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Size of save area in TPS", 
0, "" };

_cvint  _rhsspsave = { &rhsspsave,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Size of ssp save area in TPS", 
0, "" };

_cvfloat  _rh2dscale = { &rh2dscale,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon rational scaling adjustment", 
0, "" };

_cvfloat  _rh3dscale = { &rh3dscale,  
    1.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon scale factor for 3D acqusitions", 
0, "" };

_cvint  _rhnpasses = { &rhnpasses,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of passes in this scan", 
0, "" };

_cvint  _rhincrpass = { &rhincrpass,  
    1, 
    MAXINT, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Xth pass to increment", 
0, "" };

_cvint  _rhinitpass = { &rhinitpass,  
    1, 
    MAXINT, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Minimum # of passes in TPS", 
0, "" };

_cvint  _rhmethod = { &rhmethod,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon method", 
0, "" };

_cvint  _rhdaxres = { &rhdaxres,  
    0, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Points per frame collected", 
0, "" };

_cvint  _rhdayres = { &rhdayres,  
    0, 
    2049, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Frames per echo collected", 
0, "" };

_cvint  _rhrcxres = { &rhrcxres,  
    0, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "X transform size", 
0, "" };

_cvint  _rhrcyres = { &rhrcyres,  
    0, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Y transform size", 
0, "" };

_cvint  _rhimsize = { &rhimsize,  
    0, 
    2048, 
    256,  0, 0, 0, 1, 1, 
    INVIS, 
    "Image size", 
0, "" };

_cvint  _rhnoncart_dual_traj = { &rhnoncart_dual_traj,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Dual Trajectory Flag for 3D UTE", 
0, "" };

_cvint  _rhnoncart_traj_kmax_ratio = { &rhnoncart_traj_kmax_ratio,  

    2, 
    16, 
    8,  0, 0, 0, 1, 1, 
    INVIS, 
    "Low resolution trajectory factor", 
0, "" };

_cvint  _rhnspokes_lowres = { &rhnspokes_lowres,  

    0, 
    MAXINT, 
    8192,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of spokes for low resolution trajectory", 
0, "" };

_cvint  _rhnspokes_highres = { &rhnspokes_highres,  

    1, 
    MAXINT, 
    65536,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of spokes for high resolution trajectory", 
0, "" };

_cvint  _rhnoncart_traj_merge_start = { &rhnoncart_traj_merge_start,  

    1, 
    128, 
    3,  0, 0, 0, 1, 1, 
    INVIS, 
    "Dual trajectory merge start point", 
0, "" };

_cvint  _rhnoncart_traj_merge_end = { &rhnoncart_traj_merge_end,  

    1, 
    128, 
    5,  0, 0, 0, 1, 1, 
    INVIS, 
    "Dual trjaectory merge end point", 
0, "" };

_cvfloat  _rhoversamplingfactor = { &rhoversamplingfactor,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Over sampling factor for recon", 
0, "" };

_cvfloat  _rhnoncart_grid_factor = { &rhnoncart_grid_factor,  
    1.0, 
    4.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "k-space regrid extension factor", 
0, "" };

_cvint  _rhnoncart_traj_mode = { &rhnoncart_traj_mode,  
    RADIAL3D_TRAJECTORY_MODE_MIN, 
    RADIAL3D_TRAJECTORY_MODE_MAX, 
    RADIAL3D_TRAJECTORY_MODE_MIN,  0, 0, 0, 1, 1, 
    INVIS, 
    "Trajectory Mode bit mask for 3D Radial", 
0, "" };

_cvint  _rhviewSharing3D = { &rhviewSharing3D,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "View sharing bitmask: 1 = view sharing, 2 = complex subtraction", 
0, "" };

_cvint  _rhdaviewsPerBlade = { &rhdaviewsPerBlade,  
    1, 
    10000, 
    24,  0, 0, 0, 1, 1, 
    VIS, 
    "acquired views per blade", 
0, "" };

_cvfloat  _rhrotationThreshold = { &rhrotationThreshold,  
    0.0, 
    180.0, 
    2.0,  0, 0, 0, 1, 1, 
    VIS, 
    "rotation threshold in degrees", 
0, "" };

_cvfloat  _rhshiftThreshold = { &rhshiftThreshold,  
    0.0, 
    1.0, 
    0.01,  0, 0, 0, 1, 1, 
    VIS, 
    "shift threshold in fraction", 
0, "" };

_cvfloat  _rhcorrelationThreshold = { &rhcorrelationThreshold,  
    0.0, 
    1.0, 
    0.50,  0, 0, 0, 1, 1, 
    VIS, 
    "correlation threshold in fraction", 
0, "" };

_cvfloat  _rhphaseCorrFiltFreqRadius = { &rhphaseCorrFiltFreqRadius,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "radius of phase corr filter along freq dir", 
0, "" };

_cvfloat  _rhphaseCorrFiltPhaseRadius = { &rhphaseCorrFiltPhaseRadius,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "radius of phase corr filter along phase dir", 
0, "" };

_cvfloat  _rhnpwfactor = { &rhnpwfactor,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "nophasewrap factor in fraction", 
0, "" };





_cvfloat  _rhuser0 = { &rhuser0,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  0", 0, "" };
_cvfloat  _rhuser1 = { &rhuser1,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  1", 0, "" };
_cvfloat  _rhuser2 = { &rhuser2,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  2", 0, "" };
_cvfloat  _rhuser3 = { &rhuser3,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  3", 0, "" };
_cvfloat  _rhuser4 = { &rhuser4,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  4", 0, "" };
_cvfloat  _rhuser5 = { &rhuser5,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  5", 0, "" };
_cvfloat  _rhuser6 = { &rhuser6,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  6", 0, "" };
_cvfloat  _rhuser7 = { &rhuser7,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  7", 0, "" };
_cvfloat  _rhuser8 = { &rhuser8,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  8", 0, "" };
_cvfloat  _rhuser9 = { &rhuser9,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable  9", 0, "" };
_cvfloat  _rhuser10 = { &rhuser10,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 10", 0, "" };
_cvfloat  _rhuser11 = { &rhuser11,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 11", 0, "" };
_cvfloat  _rhuser12 = { &rhuser12,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 12", 0, "" };
_cvfloat  _rhuser13 = { &rhuser13,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 13", 0, "" };
_cvfloat  _rhuser14 = { &rhuser14,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 14", 0, "" };
_cvfloat  _rhuser15 = { &rhuser15,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 15", 0, "" };
_cvfloat  _rhuser16 = { &rhuser16,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 16", 0, "" };
_cvfloat  _rhuser17 = { &rhuser17,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 17", 0, "" };
_cvfloat  _rhuser18 = { &rhuser18,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 18", 0, "" };
_cvfloat  _rhuser19 = { &rhuser19,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 19", 0, "" };
_cvfloat  _rhuser20 = { &rhuser20,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 20", 0, "" };
_cvfloat  _rhuser21 = { &rhuser21,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 21", 0, "" };
_cvfloat  _rhuser22 = { &rhuser22,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 22", 0, "" };
_cvfloat  _rhuser23 = { &rhuser23,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 23", 0, "" };
_cvfloat  _rhuser24 = { &rhuser24,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 24", 0, "" };
_cvfloat  _rhuser25 = { &rhuser25,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 25", 0, "" };
_cvfloat  _rhuser26 = { &rhuser26,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 26", 0, "" };
_cvfloat  _rhuser27 = { &rhuser27,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 27", 0, "" };
_cvfloat  _rhuser28 = { &rhuser28,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 28", 0, "" };
_cvfloat  _rhuser29 = { &rhuser29,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 29", 0, "" };
_cvfloat  _rhuser30 = { &rhuser30,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 30", 0, "" };
_cvfloat  _rhuser31 = { &rhuser31,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 31", 0, "" };
_cvfloat  _rhuser32 = { &rhuser32,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 32", 0, "" };
_cvfloat  _rhuser33 = { &rhuser33,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 33", 0, "" };
_cvfloat  _rhuser34 = { &rhuser34,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 34", 0, "" };
_cvfloat  _rhuser35 = { &rhuser35,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 35", 0, "" };
_cvfloat  _rhuser36 = { &rhuser36,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 36", 0, "" };
_cvfloat  _rhuser37 = { &rhuser37,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 37", 0, "" };
_cvfloat  _rhuser38 = { &rhuser38,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 38", 0, "" };
_cvfloat  _rhuser39 = { &rhuser39,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 39", 0, "" };
_cvfloat  _rhuser40 = { &rhuser40,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 40", 0, "" };
_cvfloat  _rhuser41 = { &rhuser41,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 41", 0, "" };
_cvfloat  _rhuser42 = { &rhuser42,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 42", 0, "" };
_cvfloat  _rhuser43 = { &rhuser43,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 43", 0, "" };
_cvfloat  _rhuser44 = { &rhuser44,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 44", 0, "" };
_cvfloat  _rhuser45 = { &rhuser45,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 45", 0, "" };
_cvfloat  _rhuser46 = { &rhuser46,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 46", 0, "" };
_cvfloat  _rhuser47 = { &rhuser47,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 47", 0, "" };
_cvfloat  _rhuser48 = { &rhuser48,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "User data acquisition variable 48", 0, "" };

_cvint  _rhdab0s = { &rhdab0s,  
    0, 
    MAX_NUM_RECEIVERS - 1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Start receiver to poll", 
0, "" };

_cvint  _rhdab0e = { &rhdab0e,  
    0, 
    MAX_NUM_RECEIVERS - 1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "End receiver to poll", 
0, "" };

_cvfloat  _rhctr = { &rhctr,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Cine TR in seconds", 
0, "" };

_cvfloat  _rhcrrtime = { &rhcrrtime,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Cine R-R interval in seconds", 
0, "" };

_cvint  _rhcphases = { &rhcphases,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of Cine cardiac phases", 
0, "" };

_cvint  _rhaphases = { &rhaphases,  
    0, 
    MAX_CINE_PHASES, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of average acquired Cine cardiac phases", 
0, "" };

_cvint  _rhovl = { &rhovl,  
    0, 
    SLTAB_MAX, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of overlap slices on each interior side of a slab", 
0, "" };


























_cvint  _rhvtype = { &rhvtype,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Vascular recon type", 
0, "" };

_cvfloat  _rhvenc = { &rhvenc,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon header value for velocity encoding.", 
0, "" };

_cvfloat  _rhvcoefxa = { &rhvcoefxa,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefxb = { &rhvcoefxb,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefxc = { &rhvcoefxc,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefxd = { &rhvcoefxd,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefya = { &rhvcoefya,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefyb = { &rhvcoefyb,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefyc = { &rhvcoefyc,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefyd = { &rhvcoefyd,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefza = { &rhvcoefza,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefzb = { &rhvcoefzb,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefzc = { &rhvcoefzc,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };

_cvfloat  _rhvcoefzd = { &rhvcoefzd,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to phys translation factor for a phase contrast scan.", 
0, "" };





_cvfloat  _rhvmcoef1 = { &rhvmcoef1,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to static translation for phase contrast.", 
0, "" };

_cvfloat  _rhvmcoef2 = { &rhvmcoef2,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to static translation for phase contrast.", 
0, "" };

_cvfloat  _rhvmcoef3 = { &rhvmcoef3,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to static translation for phase contrast.", 
0, "" };

_cvfloat  _rhvmcoef4 = { &rhvmcoef4,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flow to static translation for phase contrast.", 
0, "" };




_cvfloat  _rhphasescale = { &rhphasescale,  
    0.0, 
    2.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Recon phase scale factor for Asymmetric FOV", 
0, "" };

_cvfloat  _rhfreqscale = { &rhfreqscale,  
    0.0, 
    2.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Future recon frequency scale factor for Asymmetric FOV", 
0, "" };


_cvint  _rawmode = { &rawmode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Raw image reconstruction: 0=off, 1=on.", 
0, "" };





_cvint  _rhileaves = { &rhileaves,  
    1, 
    512, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of interleaves", 
0, "" };

_cvint  _rhkydir = { &rhkydir,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Ky traversal direction:0=top-down,1=centric,2=bottom-up", 
0, "" };

_cvint  _rhalt = { &rhalt,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Alt read sign:0=no,1=odd/evn,2=halves,3=pairs", 
0, "" };

_cvint  _rhreps = { &rhreps,  
    1, 
    256, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of scan repetitions", 
0, "" };

_cvint  _rhref = { &rhref,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "0=use old phase corr, 1=use new phase corr", 
0, "" };





_cvint  _rhpcthrespts = { &rhpcthrespts,  
    2, 
    32, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "Adj pts req'd for amp threshold calc", 
0, "" };

_cvint  _rhpcthrespct = { &rhpcthrespct,  
    0, 
    100, 
    15,  0, 0, 0, 1, 1, 
    VIS, 
    "% of projection's peak magnitude for threshold calc", 
0, "" };

_cvint  _rhpcdiscbeg = { &rhpcdiscbeg,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Points discarded at beginning of post row FT array", 
0, "" };

_cvint  _rhpcdiscmid = { &rhpcdiscmid,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Points discarded at middle of post row FT array", 
0, "" };

_cvint  _rhpcdiscend = { &rhpcdiscend,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Points discarded at end of post row FT array", 
0, "" };

_cvint  _rhpcileave = { &rhpcileave,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Interleaves to use for correction: 0=all, 1=1st, 2=1st interpolated", 
0, "" };

_cvint  _rhpcextcorr = { &rhpcextcorr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Ext pc file /usr/g/bin/pc.dat: 0=don't use, 1=use", 
0, "" };

_cvint  _rhrefframes = { &rhrefframes,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Total number of frames acquired for an entire REF scan", 
0, "" };


_cvint  _rhpcsnore = { &rhpcsnore,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "SNORE processing switch for REF data: 0=off,1=on", 
0, "" };

_cvint  _rhpcspacial = { &rhpcspacial,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PC space specificity: 0=use all, >=1 for one slice", 
0, "" };

_cvint  _rhpctemporal = { &rhpctemporal,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "PC temporal specificity: 0=use all, >=1 for one phase", 
0, "" };

_cvfloat  _rhpcbestky = { &rhpcbestky,  
    1.0, 
    1024.0, 
    64.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Best ky index for coefficient remap", 
0, "" };

_cvint  _rhhdbestky = { &rhhdbestky,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Homodyne best ky", 
0, "" };


_cvint  _rhpcinvft = { &rhpcinvft,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Inverse row FT switch for post fix time domain image: 0=off, 1=on", 
0, "" };

_cvint  _rhpcctrl = { &rhpcctrl,  
    0, 
    32768, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Control for various phase correction tests", 
0, "" };


_cvint  _rhpctest = { &rhpctest,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Test mode control: 0=off, 1=msgs. to terminal/vectors to disk", 
0, "" };

_cvint  _rhpcgraph = { &rhpcgraph,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "UNUSED", 
0, "" };

_cvint  _rhpclin = { &rhpclin,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear correction: 0=off,1=on", 
0, "" };

_cvint  _rhpclinnorm = { &rhpclinnorm,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear corr norm. switch: 0=weight, 1=normalize", 
0, "" };

_cvint  _rhpclinnpts = { &rhpclinnpts,  
    0, 
    256, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear correction fit points (for ord>=2)", 
0, "" };

_cvint  _rhpclinorder = { &rhpclinorder,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear fit order: 0=Ky spcfc;1=Kybest;2=line;3,4=poly", 
0, "" };

_cvint  _rhpclinfitwt = { &rhpclinfitwt,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear corr fit weight: 0=equal,1=via kybest,2=via mag", 
0, "" };

_cvint  _rhpclinavg = { &rhpclinavg,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Linear corr averaging for order=1: 0=off, 1=on", 
0, "" };

_cvint  _rhpccon = { &rhpccon,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant corr:0=off,1=on", 
0, "" };

_cvint  _rhpcconnorm = { &rhpcconnorm,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant corr norm. switch: 0=weight, 1=normalize", 
0, "" };

_cvint  _rhpcconnpts = { &rhpcconnpts,  
    2, 
    256, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant corr fit points", 
0, "" };

_cvint  _rhpcconorder = { &rhpcconorder,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant fit order: 0=vu spcfc;1=Kybest;2=line;3,4=poly", 
0, "" };

_cvint  _rhpcconfitwt = { &rhpcconfitwt,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Constant corr fit weight: 0=equal,1=via kybest,2=via mag", 
0, "" };





_cvint  _rhvrgfxres = { &rhvrgfxres,  
    1, 
    XRES_MAX, 
    128,  0, 0, 0, 1, 1, 
    VIS, 
    "VRGF final xres.", 
0, "" };

_cvint  _rhvrgf = { &rhvrgf,   
    0, 
    16, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "VRGF switch: 0=off, 1=on.", 
0, "" };





_cvint  _rhbp_corr = { &rhbp_corr,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "EPI bandpass correction:0=off,1=on,2=magnitude only,3=phase only.", 
0, "" };

_cvfloat  _rhrecv_freq_s = { &rhrecv_freq_s,  
    -500.0e3, 
    500.0e3, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "bandpass correction interpolation range starting frequency (Hz).", 
0, "" };

_cvfloat  _rhrecv_freq_e = { &rhrecv_freq_e,  
    -500.0e3, 
    500.0e3, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "bandpass correction interpolation range ending frequency (Hz).", 
0, "" };

_cvint  _rhhniter = { &rhhniter,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "selects the type of homodyne 3reconstrution to be used: 0-I, 1-II.", 
0, "" };

_cvint  _rhfast_rec = { &rhfast_rec,  
    0, 
    5, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "tells if the fast receiver is being used and its lpf setting.", 
0, "" };





_cvint  _rhgridcontrol = { &rhgridcontrol,  
    0, 
    65536, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Mask for gridding related controls.", 
0, "" };

_cvint  _rhb0map = { &rhb0map,  
    0, 
    2049, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "B0 field inhomogeneity correction flag and B0 phase map size bitmask", 
0, "" };

_cvint  _rhtediff = { &rhtediff,  
    0, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "TE delay between the two arms for phase map.", 
0, "" };

_cvfloat  _rhradiusa = { &rhradiusa,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Inner trajectory part of a variable trajectory.", 
0, "" };

_cvfloat  _rhradiusb = { &rhradiusb,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Outer trajectory part of a variable trajectory.", 
0, "" };

_cvfloat  _rhmaxgrad = { &rhmaxgrad,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximum gradient based on FOV and BW.", 
0, "" };

_cvfloat  _rhslewmax = { &rhslewmax,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximum slew rate used.", 
0, "" };

_cvfloat  _rhscanfov = { &rhscanfov,  
    0, 
    FOV_MAX, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Scan FOV.in mm", 
0, "" };

_cvfloat  _rhtsamp = { &rhtsamp,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Sampling time.", 
0, "" };

_cvfloat  _rhdensityfactor = { &rhdensityfactor,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Density factor.", 
0, "" };

_cvfloat  _rhdispfov = { &rhdispfov,  
    0.0, 
    FOV_MAX, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Display FOV.in mm", 
0, "" };

_cvint  _rhmotioncomp = { &rhmotioncomp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for motion compensation (0=No, 1=Yes).", 
0, "" };

_cvint  _grid_fov_factor = { &grid_fov_factor,  
    1, 
    2, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "k-space oversampling factor for gridding (1 or 2)", 
0, "" };





_cvint  _rhte = { &rhte,  
    0, 
    TE_MAX, 
    25000,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for echo time", 
0, "" };

_cvint  _rhte2 = { &rhte2,  
    0, 
    TE_MAX, 
    50000,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for second echo time", 
0, "" };

_cvint  _rhdfm = { &rhdfm,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Recon CV to activate DFM reconstruction routine : 0=off, 1=on(least-squares method), 3=on(Ahn's method).", 
0, "" };

_cvint  _rhdfmnavsperpass = { &rhdfmnavsperpass,  
    1, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for Maximum number of DFM navigator frames per pass.", 
0, "" };

_cvint  _rhdfmnavsperview = { &rhdfmnavsperview,  
    1, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for number of DFM navigator frames per view.", 
0, "" };

_cvfloat  _rhdfmrbw = { &rhdfmrbw,  
    0, 
    MAXFLOAT, 
    31.25,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for RBW in khz for dfm navigator echo", 
0, "" };

_cvint  _rhdfmptsize = { &rhdfmptsize,  
    2, 
    4, 
    2,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Recon CV for DFM point size: 2=16 bit data, 4=32 bit data.", 
0, "" };

_cvint  _rhdfmxres = { &rhdfmxres,  
    16, 
    MAXINT, 
    256,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for DFM xres.", 
0, "" };

_cvint  _rhdfmdebug = { &rhdfmdebug,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "DFM recon debug. 0=nothing, 1=write data, 2=read data, 3=2 pass with and without MMC recon.", 
0, "" };

_cvfloat  _rhdfmthreshold = { &rhdfmthreshold,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CV for DFM threshold.", 
0, "" };


_cvint  _rh_rc_enhance_enable = { &rh_rc_enhance_enable,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "SO TOOLS WORK IN ME2", 
0, "" };

_cvint  _rh_ime_scic_enable = { &rh_ime_scic_enable,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS,  
    "surface coil intensity correction: 1 if enabled", 
0, "" };

_cvfloat  _rh_ime_scic_edge = { &rh_ime_scic_edge,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Edge Parameter for Enhanced Recon", 
0, "" };

_cvfloat  _rh_ime_scic_smooth = { &rh_ime_scic_smooth,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Smooth Parameter for Enhanced Recon", 
0, "" };

_cvfloat  _rh_ime_scic_focus = { &rh_ime_scic_focus,  
    0.0, 
    10.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Focus Parameter for Enhanced Recon", 
0, "" };

_cvint  _rh_ime_clariview_type = { &rh_ime_clariview_type,  
    0, 
    256, 
    1,  0, 0, 0, 1, 1, 
    VIS,  
    "Type ofClariview/Name of Filter", 
0, "" };

_cvfloat  _rh_ime_clariview_edge = { &rh_ime_clariview_edge,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Edge Parameter for Clariview", 
0, "" };

_cvfloat  _rh_ime_clariview_smooth = { &rh_ime_clariview_smooth,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Smooth Parameter for Clariview", 
0, "" };

_cvfloat  _rh_ime_clariview_focus = { &rh_ime_clariview_focus,  
    0.0, 
    10.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Focus Parameter for Clariview", 
0, "" };

_cvint  _rh_ime_definefilter_nr = { &rh_ime_definefilter_nr,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Noise Reduction setting for Define Filter", 
0, "" };

_cvint  _rh_ime_definefilter_sh = { &rh_ime_definefilter_sh,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Sharpening setting for Define Filter", 
0, "" };

_cvfloat  _rh_ime_scic_reduction = { &rh_ime_scic_reduction,  
    0.0, 
    2048.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Reduction Parameter for SCIC", 
0, "" };

_cvfloat  _rh_ime_scic_gauss = { &rh_ime_scic_gauss,  
    0.0, 
    128.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gauss Parameter for SCIC", 
0, "" };

_cvfloat  _rh_ime_scic_threshold = { &rh_ime_scic_threshold,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Threshold Parameter for SCIC", 
0, "" };

_cvfloat  _rh_ime_scic_contrast = { &rh_ime_scic_contrast,  
    0.0, 
    2.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Contrast Parameter for SCIC", 
0, "" };

_cvint  _cfscic_allowed = { &cfscic_allowed,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for SCIC compatibility", 
0, "" };

_cvfloat  _cfscic_edge = { &cfscic_edge,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Edge Parameter for Enhanced Recon", 
0, "" };

_cvfloat  _cfscic_smooth = { &cfscic_smooth,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Smooth Parameter for Enhanced Recon", 
0, "" };

_cvfloat  _cfscic_focus = { &cfscic_focus,  
    0.0, 
    10.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Focus Parameter for Enhanced Recon", 
0, "" };

_cvfloat  _cfscic_reduction = { &cfscic_reduction,  
    0.0, 
    2048.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Reduction Parameter for SCIC", 
0, "" };

_cvfloat  _cfscic_gauss = { &cfscic_gauss,  
    0.0, 
    128.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gauss Parameter for SCIC", 
0, "" };

_cvfloat  _cfscic_threshold = { &cfscic_threshold,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Threshold Parameter for SCIC", 
0, "" };

_cvfloat  _cfscic_contrast = { &cfscic_contrast,  
    0.0, 
    2.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Contrast Parameter for SCIC", 
0, "" };

_cvint  _piscic = { &piscic,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for SCIC enable", 
0, "" };


_cvint  _cfscenic = { &cfscenic,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for SCENIC support", 
0, "" };

_cvint  _piscenic = { &piscenic,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for SCENIC enable", 
0, "" };

_cvint  _opscenic = { &opscenic,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for SCENIC selected", 
0, "" };

_cvint  _rhscenic_type = { &rhscenic_type,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for SCENIC type: 0=disable, 1=SCIC, 2=ITK N4, 3=PURE+ITK N4", 
0, "" };


_cvint  _cfn4_allowed = { &cfn4_allowed,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for ITK N4 compatibility", 
0, "" };

_cvfloat  _cfn4_slice_down_sample_rate = { &cfn4_slice_down_sample_rate,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice down sampling rate Parameter for ITK N4", 
0, "" };

_cvfloat  _cfn4_inplane_down_sample_rate = { &cfn4_inplane_down_sample_rate,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Inplane down sampling rate Parameter for ITK N4", 
0, "" };

_cvint  _cfn4_num_levels_max = { &cfn4_num_levels_max,  
    0, 
    9, 
    4,  0, 0, 0, 1, 1, 
    VIS, 
    "Max Number of levels for ITK N4", 
0, "" };

_cvint  _cfn4_num_iterations_max = { &cfn4_num_iterations_max,  
    0, 
    200, 
    50,  0, 0, 0, 1, 1, 
    VIS, 
    "Max Number of iterations for ITK N4", 
0, "" };

_cvfloat  _cfn4_convergence_threshold = { &cfn4_convergence_threshold,  
    0.0, 
    1.0, 
    0.001,  0, 0, 0, 1, 1, 
    VIS, 
    "Convergence threshold of iterations for ITK N4", 
0, "" };

_cvint  _cfn4_gain_clamp_mode = { &cfn4_gain_clamp_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gain clamp mode for ITK N4", 
0, "" };

_cvfloat  _cfn4_gain_clamp_value = { &cfn4_gain_clamp_value,  
    0.0, 
    5.0, 
    5.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Intensity correction threshold for ITK N4", 
0, "" };


_cvfloat  _rhn4_slice_down_sample_rate = { &rhn4_slice_down_sample_rate,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice down sampling rate Parameter for ITK N4", 
0, "" };

_cvfloat  _rhn4_inplane_down_sample_rate = { &rhn4_inplane_down_sample_rate,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Inplane down sampling rate Parameter for ITK N4", 
0, "" };

_cvint  _rhn4_num_levels_max = { &rhn4_num_levels_max,  
    0, 
    9, 
    4,  0, 0, 0, 1, 1, 
    VIS, 
    "Max Number of levels for ITK N4", 
0, "" };

_cvint  _rhn4_num_iterations_max = { &rhn4_num_iterations_max,  
    0, 
    200, 
    50,  0, 0, 0, 1, 1, 
    VIS, 
    "Max Number of iterations for ITK N4", 
0, "" };

_cvfloat  _rhn4_convergence_threshold = { &rhn4_convergence_threshold,  
    0.0, 
    1.0, 
    0.002,  0, 0, 0, 1, 1, 
    VIS, 
    "Convergence threshold of iterations for ITK N4", 
0, "" };

_cvint  _rhn4_gain_clamp_mode = { &rhn4_gain_clamp_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gain clamp mode for ITK N4", 
0, "" };

_cvfloat  _rhn4_gain_clamp_value = { &rhn4_gain_clamp_value,  
    0.0, 
    5.0, 
    5.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Intensity correction threshold for ITK N4", 
0, "" };


_cvint  _rhpure_gain_clamp_mode = { &rhpure_gain_clamp_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gain clamp mode for PURE", 
0, "" };

_cvfloat  _rhpure_gain_clamp_value = { &rhpure_gain_clamp_value,  
    0.0, 
    5.0, 
    5.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Intensity correction threshold for PURE", 
0, "" };


_cvint  _rhphsen_pixel_offset = { &rhphsen_pixel_offset,  
    -32768, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "pixel offset value for Phase sensitive images", 
0, "" };



_cvint  _rhapp = { &rhapp,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Automatic post processing technique", 
    0, ""
};

_cvint  _rhapp_option = { &rhapp_option,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Tensor Post processing options", 
    0, ""
};



_cvint  _rhncoilsel = { &rhncoilsel,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Auto N-Coil selection", 
    0, ""
};

_cvint  _rhncoillimit = { &rhncoillimit,  
    0, 
    100, 
    45,  0, 0, 0, 1, 1, 
    VIS, 
    "Coil Selection limit", 
    0, ""
};

_cvint  _rhrefframep = { &rhrefframep,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of frames per pass for a REF scan", 
    0, ""
};

_cvint  _rhscnframe = { &rhscnframe,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Total number of frames acquired for an entire SCAN", 
    0, ""
};

_cvint  _rhpasframe = { &rhpasframe,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of frames per pass", 
    0, ""
};

_cvint  _rhpcfitorig = { &rhpcfitorig,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1=adjust view indices so bestky view = 0", 
    0, ""
};

_cvint  _rhpcshotfirst = { &rhpcshotfirst,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "First view within an echo group", 
    0, ""
};

_cvint  _rhpcshotlast = { &rhpcshotlast,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Last view within an echo group", 
    0, ""
};

_cvint  _rhpcmultegrp = { &rhpcmultegrp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1 = force pts from other echo groups to be used", 
    0, ""
};

_cvint  _rhpclinfix = { &rhpclinfix,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1=force neg slope to pos,2=fix to rhpclinslope", 
    0, ""
};

_cvfloat  _rhpclinslope = { &rhpclinslope,  
    -6.28318, 
    6.28318, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Value for linear correction slope if fixed", 
    0, ""
};

_cvint  _rhpcconfix = { &rhpcconfix,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1=force neg slope to pos,2=fix to rhpcconslope", 
    0, ""
};

_cvfloat  _rhpcconslope = { &rhpcconslope,  
    -6.28318, 
    6.28318, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Value for const correction slope if fixed", 
    0, ""
};

_cvint  _rhpccoil = { &rhpccoil,  
    0, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "0=coil specific, 1=use 1, 2=use 2, 3=use 3, 4=use 4", 
    0, ""
};

_cvfloat  _rhmaxcoef1a = { &rhmaxcoef1a,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Z^2 Maxwell Term for Flow Image 1", 
    0, ""
};

_cvfloat  _rhmaxcoef1b = { &rhmaxcoef1b,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "X^2+Y^2 Maxwell Term for Flow Image 1", 
    0, ""
};

_cvfloat  _rhmaxcoef1c = { &rhmaxcoef1c,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "XZ Maxwell Term for Flow Image 1", 
    0, ""
};

_cvfloat  _rhmaxcoef1d = { &rhmaxcoef1d,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "YZ Maxwell Term for Flow Image 1", 
    0, ""
};

_cvfloat  _rhmaxcoef2a = { &rhmaxcoef2a,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Z^2 Maxwell Term for Flow Image 2", 
    0, ""
};

_cvfloat  _rhmaxcoef2b = { &rhmaxcoef2b,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "X^2+Y^2 Maxwell Term for Flow Image 2", 
    0, ""
};

_cvfloat  _rhmaxcoef2c = { &rhmaxcoef2c,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "XZ Maxwell Term for Flow Image 2", 
    0, ""
};

_cvfloat  _rhmaxcoef2d = { &rhmaxcoef2d,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "YZ Maxwell Term for Flow Image 2", 
    0, ""
};

_cvfloat  _rhmaxcoef3a = { &rhmaxcoef3a,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Z^2 Maxwell Term for Flow Image 3", 
    0, ""
};

_cvfloat  _rhmaxcoef3b = { &rhmaxcoef3b,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "X^2+Y^2 Maxwell Term for Flow Image 3", 
    0, ""
};

_cvfloat  _rhmaxcoef3c = { &rhmaxcoef3c,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "XZ Maxwell Term for Flow Image 3", 
    0, ""
};

_cvfloat  _rhmaxcoef3d = { &rhmaxcoef3d,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "YZ Maxwell Term for Flow Image 3", 
    0, ""
};

_cvint  _rhdptype = { &rhdptype,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Diffusion / Perfusion imaging option", 
    0, ""
};

_cvint  _rhnumbvals = { &rhnumbvals,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of Diffusion b values", 
0, "" };

_cvint  _rhdifnext2 = { &rhdifnext2,   
    0,  
    MAXINT,  
    1,  0, 0, 0, 1, 1,  
    VIS,  
    "Number of NEX for diffusion T2 image", 
0, "" };

_cvint  _rhnumdifdirs = { &rhnumdifdirs,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of diffusion directions for DWI", 
0, "" };

_cvint  _rhutctrl = { &rhutctrl,  
    0, 
    MAXINT,  
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon utility control", 
    0, ""
};

_cvfloat  _rhzipfact = { &rhzipfact,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon slice ZIP factor.", 
    0, ""
};

_cvint  _rhfcinemode = { &rhfcinemode,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fast CINE mode bitmask.", 
    0, ""
};

_cvint  _rhfcinearw = { &rhfcinearw,  
    0, 
    100, 
    10,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fast CINE Arrhythmia Rejection Window (ARW)", 
    0, ""
};

_cvint  _rhvps = { &rhvps,  
    1, 
    1024, 
    8,  0, 0, 0, 1, 1, 
    INVIS, 
    "Views per Segment (VPS)", 
    0, ""
};

_cvint  _rhvvsaimgs = { &rhvvsaimgs,  
    1, 
    DATA_ACQ_MAX, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of original images.", 
    0, ""
};

_cvint  _rhvvstr = { &rhvvstr,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Variable-view sharing TR in us", 
    0, ""
};

_cvint  _rhvvsgender = { &rhvvsgender,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Gender (0=Male, 1=Female)", 
    0, ""
};


_cvint  _rhgradmode = { &rhgradmode, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _rhfatwater = { &rhfatwater,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "fat water imaging control flag.", 
    0, ""
};

_cvint  _rhfiesta = { &rhfiesta,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Recon type for FIESTA. 1:Averaging 2:Sum Square 3:MIP 256:DFT on/off 6:SOSOnMag+AvgOnPhase", 
    0, ""
};

_cvint  _rhlcfiesta = { &rhlcfiesta,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Recon type for LCFIESTA. 0:off 1:water&both 2:fat&both 3:water&fat", 
    0, ""
};

_cvfloat  _rhlcfiesta_phase = { &rhlcfiesta_phase,  
    0.0, 
    0.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "LCFIESTA combine phase value[radian]", 
    0, ""
};




_cvint  _rhdwnavview = { &rhdwnavview,  
    0, 
    512, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of views for navigator echoes", 
    0, ""
};

_cvint  _rhdwnavcorecho = { &rhdwnavcorecho,  
    1, 
    16, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of echoes for actual navigator correction", 
    0, ""
};

_cvint  _rhdwnavsview = { &rhdwnavsview,  
    1, 
    512, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Start view for phase connection process", 
    0, ""
};

_cvint  _rhdwnaveview = { &rhdwnaveview,  
    1, 
    512, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "End view for phase connection process", 
    0, ""
};

_cvint  _rhdwnavsshot = { &rhdwnavsshot,  
    1, 
    512, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Start shot for delta phase estimation in navigator echoes", 
    0, ""
};

_cvint  _rhdwnaveshot = { &rhdwnaveshot,  
    1, 
    512, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "End shot for delta phase estimation in navigator echoes", 
    0, ""
};

_cvfloat  _rhdwnavcoeff = { &rhdwnavcoeff,  
    0.0, 
    1.0, 
    0.5,  0, 0, 0, 1, 1, 
    INVIS, 
    "Coefficient for amount of phase connection", 
    0, ""
};







_cvint  _rhdwnavcor = { &rhdwnavcor,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Navigator correction control for DW-EPI.", 
    0, ""
};


_cvfloat  _rhassetsl_R = { &rhassetsl_R,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Slice ASSET encoding reduction factor", 
    0, ""
};

_cvfloat  _rhasset_slwrap = { &rhasset_slwrap,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Oversampling factor as a fraction of Rxed slices", 
    0, ""
};



_cvint  _rh3dwintype = { &rh3dwintype,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = Modified Hanning window;  1 = Modified Tukey window", 
    0, ""
};

_cvfloat  _rh3dwina = { &rh3dwina,  
    0.0, 
    1.0, 
    0.1,  0, 0, 0, 1, 1, 
    VIS, 
    "Degree of  apodization; 0.0 = Boxcar; 1.0 = Hanning", 
    0, ""
};

_cvfloat  _rh3dwinq = { &rh3dwinq,  
    0.0, 
    1.0, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Apodization at ends, 0.0 = Max apodization; 1.0 = Boxcar", 
    0, ""
};


_cvint  _rhectricks_num_regions = { &rhectricks_num_regions, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _rhectricks_input_regions = { &rhectricks_input_regions, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };













_cvint  _rhretro_control = { &rhretro_control,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "RetroPC configuration control", 
    0, ""
};

_cvint  _rhetl = { &rhetl,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "RetroPC echo train length", 
    0, ""
};


_cvint  _rhleft_blank = { &rhleft_blank,  
    0, 
     MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of data elements at start of frame to zero", 
    0, ""
};

_cvint  _rhright_blank = { &rhright_blank,  
    0, 
     MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of data elements at end of frame to zero", 
    0, ""
};




_cvfloat  _rhspecwidth = { &rhspecwidth,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS,  
    "Recon spectral width", 
    0, ""
};

_cvint  _rhspeccsidims = { &rhspeccsidims,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "Recon number of CSI dimensions", 
    0, ""
};

_cvint  _rhspecrescsix = { &rhspecrescsix,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CSI resolution of X dimension", 
    0, ""
};

_cvint  _rhspecrescsiy = { &rhspecrescsiy,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CSI resolution of Y dimension", 
    0, ""
};

_cvint  _rhspecrescsiz = { &rhspecrescsiz,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon CSI resolution of Z dimension", 
    0, ""
};

_cvfloat  _rhspecroilenx = { &rhspecroilenx,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI length in X dimension", 
    0, ""
};

_cvfloat  _rhspecroileny = { &rhspecroileny,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI length in Y dimension", 
    0, ""
};

_cvfloat  _rhspecroilenz = { &rhspecroilenz,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI length in Z dimension", 
    0, ""
};

_cvfloat  _rhspecroilocx = { &rhspecroilocx,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI location in X dimension", 
    0, ""
};

_cvfloat  _rhspecroilocy = { &rhspecroilocy,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI location in Y dimension", 
    0, ""
};

_cvfloat  _rhspecroilocz = { &rhspecroilocz,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon ROI location in Z dimension", 
    0, ""
};

_cvint  _rhexciterusage = { &rhexciterusage,  
    0, 
    65535, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Exciter usage bitmask: 1 activates SPS control", 
    0, ""
};

_cvint  _rhexciterfreqs = { &rhexciterfreqs,  
    0, 
    65535, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Exciter freq. usage bitmask: 0 precludes broadband", 
    0, ""
};


_cvint  _rhwiener = { &rhwiener,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Use Wiener filter", 
0, "" };

_cvfloat  _rhwienera = { &rhwienera,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Demodulation denoising", 
0, "" };

_cvfloat  _rhwienerb = { &rhwienerb,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Demodulation gain", 
0, "" };

_cvfloat  _rhwienert2 = { &rhwienert2,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "T2 for demodulation", 
0, "" };

_cvfloat  _rhwieneresp = { &rhwieneresp,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Echo spacing in seconds", 
0, "" };

_cvint  _rhflipfilter = { &rhflipfilter,  
    0, 
    1000, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for PSD generated filter", 
0, "" };

_cvint  _rhdbgrecon = { &rhdbgrecon,  
    0, 
    10, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Use Wiener filter", 
0, "" };

_cvint  _rhech2skip = { &rhech2skip,  
    0, 
    2048, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Use Wiener filter", 
0, "" };














_cvint  _rhrcideal = { &rhrcideal,  
    0, 
    255, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "IDEAL processing indicator", 
    0, ""
};





















_cvint  _rhrcdixproc = { &rhrcdixproc,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bitmask for choice of images to be reconstructed by IDEAL processing", 
    0, ""

};

























_cvint  _rhrcidealctrl = { &rhrcidealctrl,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "IDEAL processing control", 
    0, ""

};

_cvint  _rhdf = { &rhdf,  
    0, 
    MAXINT, 
    FATWATER_DIXFREQ_1_5T,  0, 0, 0, 1, 1, 
    INVIS, 
    "Delta frequency(Hz) used in IDEAL", 
0, "" };

_cvint  _rhmedal_mode = { &rhmedal_mode,  
    0, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL recon mode: 0=off, 1:PSIR, 2:MEDAL", 
    0, ""
};

_cvint  _rhmedal_nstack_size = { &rhmedal_nstack_size,  
    18, 
    255, 
    54,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL nstack", 
    0, ""
};

_cvint  _rhmedal_echo_order = { &rhmedal_echo_order,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL echo order: 0=OOP/IP, 1=IP/OOP", 
    0, ""
};

_cvint  _rhmedal_up_kernel_size = { &rhmedal_up_kernel_size,  
    4, 
    2048, 
    15,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL up kernel size", 
    0, ""
};

_cvint  _rhmedal_down_kernel_size = { &rhmedal_down_kernel_size,  
    4, 
    2048, 
    8,  0, 0, 0, 1, 1,  
    VIS, 
    "MEDAL down kernel size", 
    0, ""
};

_cvint  _rhmedal_smooth_kernel_size = { &rhmedal_smooth_kernel_size,  
    4, 
    2048, 
    8,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL smooth kernel size", 
    0, ""
};

_cvint  _rhmedal_starting_slice = { &rhmedal_starting_slice,  
    0, 
    2048, 
    32,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL starting slice", 
    0, ""
};

_cvint  _rhmedal_ending_slice = { &rhmedal_ending_slice,  
    0, 
    2048, 
    32,  0, 0, 0, 1, 1, 
    VIS, 
    "MEDAL ending slice", 
    0, ""
};

_cvfloat  _rhmedal_param = { &rhmedal_param,  
    0.1, 
    5.0, 
    3.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "MEDAL parameter", 
    0, ""
};

_cvint  _rhvibrant = { &rhvibrant,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "VIBRANT/VIBRANT-FLEX recon flag", 
    0, ""
};

_cvint  _rhkacq_uid = { &rhkacq_uid,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Parallel Imaging kacq file unique ID", 
    0, ""
};


_cvint  _rhnex_unacquired = { &rhnex_unacquired,  
    1, 
    150, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "NEX for unacquired encodes", 
0, "" };





_cvint  _rhdiskacqctrl = { &rhdiskacqctrl,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Acquisition to Disk Control Variable", 
    0, ""	
};


_cvint  _rhechopc_extra_bot = { &rhechopc_extra_bot,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Ky data length of extra frame space for phase correction", 
    0, ""	
};

_cvint  _rhechopc_ylines = { &rhechopc_ylines,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of Ky lines for primary/reverse reference data", 
    0, ""	
};

_cvint  _rhechopc_primary_yfirst = { &rhechopc_primary_yfirst,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Location of first line of primary reference data", 
    0, ""	
};

_cvint  _rhechopc_reverse_yfirst = { &rhechopc_reverse_yfirst,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Location of first line of reverse reference data", 
    0, ""	
};

_cvint  _rhechopc_zlines = { &rhechopc_zlines,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of Kz lines for primary/reverse reference data", 
    0, ""	
};

_cvint  _rhechopc_yxfitorder = { &rhechopc_yxfitorder,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "fitting order of phase correction", 
    0, ""	
};

_cvint  _rhechopc_ctrl = { &rhechopc_ctrl,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Control flag for phase correction", 
    0, ""	
};

_cvint  _rhchannel_combine_filter_type = { &rhchannel_combine_filter_type,  
    RHCHANNEL_COMBINE_FILTER_TYPE_NONE, 
    RHCHANNEL_COMBINE_FILTER_TYPE_HANNING, 
    RHCHANNEL_COMBINE_FILTER_TYPE_NONE,  0, 0, 0, 1, 1, 
    VIS, 
    "Filter type for phase filtering. 0- None, 1-Bessel, 2-Hanning", 
    0, ""
};

_cvfloat  _rhchannel_combine_filter_width = { &rhchannel_combine_filter_width,  
    0.05, 
    1.0, 
    0.3,  0, 0, 0, 1, 1, 
    VIS, 
    "Percentage of pixels under main lobe width", 
    0, ""
};

_cvfloat  _rhchannel_combine_filter_beta = { &rhchannel_combine_filter_beta,  
    0, 
    MAXFLOAT, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "Beta value for the Modified Bessel Filter", 
    0, ""
};

_cvfloat  _rh_low_pass_nex_filter_width = { &rh_low_pass_nex_filter_width,  
    0.0, 
    MAXFLOAT, 
    8.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Phase correction filter width for Complex NEX", 
0, "" };

_cvint  _rh3dgw_interptype = { &rh3dgw_interptype,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "3D GradWarp interpolation type", 
    0, ""
};


_cvint  _rhrc3dcinectrl = { &rhrc3dcinectrl,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "3dcine processing control", 
    0, ""		
};


_cvint  _rhncycles_cine = { &rhncycles_cine,  
    0, 
    18000, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "total num of cardiac cycles in 3dcine", 
    0, ""
};


_cvint  _rhnvircchannel = { &rhnvircchannel,  
    0, 
    128, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "virtual coil channels with coil compression", 
    0, ""
};









_cvint  _rhrc_cardt1map_ctrl = { &rhrc_cardt1map_ctrl,  
    0, 
    7, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Cardiac T1 mapping recon control bitmask", 
    0, ""
};







_cvint  _rhrc_moco_ctrl = { &rhrc_moco_ctrl,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Motion Correction recon control bitmask", 
    0, ""
};







_cvint  _rhrc_algorithm_ctrl = { &rhrc_algorithm_ctrl,  
    0, 
    65536, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon algorithm control bitmask", 
    0, ""
};




_cvint  _ihtr = { &ihtr,  
    TR_MIN, 
    TR_MAX, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TR annonation for current image.", 
0, "" };

_cvint  _ihti = { &ihti,  
    0, 
    TI_MAX, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TI annotation for current image.", 
0, "" };

_cvint  _ihtdel1 = { &ihtdel1,  
    MIN_TDEL1, 
    MAX_TDEL1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Delay from trigger to center of RF1 pulse.", 
0, "" };

_cvfloat  _ihnex = { &ihnex,  
    0, 
    NEX_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of excitations for current image.", 
0, "" };

_cvfloat  _ihflip = { &ihflip,  
    0, 
    180, 
    90,  0, 0, 0, 1, 1, 
    INVIS, 
    "flip angle for the current image.", 
0, "" };

_cvint  _ihte1 = { &ihte1,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 1.", 
0, "" };

_cvint  _ihte2 = { &ihte2,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 2.", 
0, "" };

_cvint  _ihte3 = { &ihte3,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 3.", 
0, "" };

_cvint  _ihte4 = { &ihte4,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 4.", 
0, "" };

_cvint  _ihte5 = { &ihte5,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 5.", 
0, "" };

_cvint  _ihte6 = { &ihte6,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 6.", 
0, "" };

_cvint  _ihte7 = { &ihte7,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 7.", 
0, "" };

_cvint  _ihte8 = { &ihte8,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 8.", 
0, "" };

_cvint  _ihte9 = { &ihte9,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 9.", 
0, "" };

_cvint  _ihte10 = { &ihte10,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 10.", 
0, "" };

_cvint  _ihte11 = { &ihte11,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 11.", 
0, "" };

_cvint  _ihte12 = { &ihte12,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 12.", 
0, "" };

_cvint  _ihte13 = { &ihte13,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 13.", 
0, "" };

_cvint  _ihte14 = { &ihte14,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 14.", 
0, "" };

_cvint  _ihte15 = { &ihte15,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 15.", 
0, "" };

_cvint  _ihte16 = { &ihte16,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "TE annotation for echo 16.", 
0, "" };

_cvint  _ihdixonte = { &ihdixonte,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Effective TE annotation for DIXON-processed images for IDEAL/MEDAL.", 
0, "" };

_cvint  _ihdixonipte = { &ihdixonipte,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Effective IP TE annotation for DIXON-processed images for IDEAL/MEDAL.", 
0, "" };


_cvint  _ihdixonoopte = { &ihdixonoopte,  
    0, 
    10000000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Effective OOP TE annotation for DIXON-processed images for IDEAL/MEDAL.", 
0, "" };

_cvfloat  _ihvbw1 = { &ihvbw1,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 1.", 
0, "" };

_cvfloat  _ihvbw2 = { &ihvbw2,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 2.", 
0, "" };

_cvfloat  _ihvbw3 = { &ihvbw3,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 3.", 
0, "" };

_cvfloat  _ihvbw4 = { &ihvbw4,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 4.", 
0, "" };

_cvfloat  _ihvbw5 = { &ihvbw5,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 5.", 
0, "" };

_cvfloat  _ihvbw6 = { &ihvbw6,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 6.", 
0, "" };

_cvfloat  _ihvbw7 = { &ihvbw7,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 7.", 
0, "" };

_cvfloat  _ihvbw8 = { &ihvbw8,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 8.", 
0, "" };

_cvfloat  _ihvbw9 = { &ihvbw9,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 9.", 
0, "" };

_cvfloat  _ihvbw10 = { &ihvbw10,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 10.", 
0, "" };

_cvfloat  _ihvbw11 = { &ihvbw11,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 11.", 
0, "" };

_cvfloat  _ihvbw12 = { &ihvbw12,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 12.", 
0, "" };

_cvfloat  _ihvbw13 = { &ihvbw13,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 13.", 
0, "" };

_cvfloat  _ihvbw14 = { &ihvbw14,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 14.", 
0, "" };

_cvfloat  _ihvbw15 = { &ihvbw15,  
    0.0, 
    2000000, 
    16.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 15.", 
0, "" };

_cvfloat  _ihvbw16 = { &ihvbw16,  
    0.0, 
    2000000, 
    16,  0, 0, 0, 1, 1, 
    INVIS, 
    "VBW annotation for echo 16.", 
0, "" };

_cvint  _ihnegscanspacing = { &ihnegscanspacing,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0 = sp, 1 = ov for slice spacing", 
    0, ""
};

_cvint  _ihoffsetfreq = { &ihoffsetfreq,  
    400, 
    1600, 
    1200,  0, 0, 0, 1, 1, 
    INVIS, 
    "MT offset frequency (hz)", 
    0, ""
};

_cvint  _ihbsoffsetfreq = { &ihbsoffsetfreq,  
    -5000, 
    5000, 
    4000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bloch Siegert RF offset frequency (hz)", 
    0, ""
};

_cvint  _iheesp = { &iheesp,  
    0, 
    10000, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Annotation for effective echo spacing (usec)", 
    0, ""
};

_cvint  _ihfcineim = { &ihfcineim,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Annotation for Fast CINE interpolation method (0=None, 1=Linear, 2=Nearest Neighbor)", 
    0, ""
};

_cvint  _ihfcinent = { &ihfcinent,  
    0, 
    2, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Annotation for Fast CINE normalization type (0=None, 1=Systole-Diastole, 2=Uniform)", 
    0, ""
};

_cvint  _ihbspti = { &ihbspti,  
    TI_MIN, 
    TI_MAX, 
    TI_MIN,  0, 0, 0, 1, 1, 
    INVIS, 
    "Blood Suppression TI annotation for current image.", 
    0, ""
};

_cvfloat  _ihtagfa = { &ihtagfa,  
    0.0, 
    180.0, 
    180.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Annotation for Cardiac Tagging Flip Angle", 
    0, ""
};

_cvfloat  _ihtagor = { &ihtagor,  
    -180.0,  
    180.0, 
    45.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Annotation for Cardiac Tagging Orientation", 
    0, ""
};


_cvfloat  _ih_idealdbg_cv1 = { &ih_idealdbg_cv1,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 1", 0, "" };
_cvfloat  _ih_idealdbg_cv2 = { &ih_idealdbg_cv2,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 2", 0, "" };
_cvfloat  _ih_idealdbg_cv3 = { &ih_idealdbg_cv3,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 3", 0, "" };
_cvfloat  _ih_idealdbg_cv4 = { &ih_idealdbg_cv4,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 4", 0, "" };
_cvfloat  _ih_idealdbg_cv5 = { &ih_idealdbg_cv5,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 5", 0, "" };
_cvfloat  _ih_idealdbg_cv6 = { &ih_idealdbg_cv6,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 6", 0, "" };
_cvfloat  _ih_idealdbg_cv7 = { &ih_idealdbg_cv7,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 7", 0, "" };
_cvfloat  _ih_idealdbg_cv8 = { &ih_idealdbg_cv8,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 8", 0, "" };
_cvfloat  _ih_idealdbg_cv9 = { &ih_idealdbg_cv9,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 9", 0, "" };
_cvfloat  _ih_idealdbg_cv10 = { &ih_idealdbg_cv10,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 10", 0, "" };
_cvfloat  _ih_idealdbg_cv11 = { &ih_idealdbg_cv11,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 11", 0, "" };
_cvfloat  _ih_idealdbg_cv12 = { &ih_idealdbg_cv12,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 12", 0, "" };
_cvfloat  _ih_idealdbg_cv13 = { &ih_idealdbg_cv13,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 13", 0, "" };
_cvfloat  _ih_idealdbg_cv14 = { &ih_idealdbg_cv14,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 14", 0, "" };
_cvfloat  _ih_idealdbg_cv15 = { &ih_idealdbg_cv15,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 15", 0, "" };
_cvfloat  _ih_idealdbg_cv16 = { &ih_idealdbg_cv16,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 16", 0, "" };
_cvfloat  _ih_idealdbg_cv17 = { &ih_idealdbg_cv17,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 17", 0, "" };
_cvfloat  _ih_idealdbg_cv18 = { &ih_idealdbg_cv18,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 18", 0, "" };
_cvfloat  _ih_idealdbg_cv19 = { &ih_idealdbg_cv19,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 19", 0, "" };
_cvfloat  _ih_idealdbg_cv20 = { &ih_idealdbg_cv20,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 20", 0, "" };
_cvfloat  _ih_idealdbg_cv21 = { &ih_idealdbg_cv21,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 21", 0, "" };
_cvfloat  _ih_idealdbg_cv22 = { &ih_idealdbg_cv22,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 22", 0, "" };
_cvfloat  _ih_idealdbg_cv23 = { &ih_idealdbg_cv23,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 23", 0, "" };
_cvfloat  _ih_idealdbg_cv24 = { &ih_idealdbg_cv24,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 24", 0, "" };
_cvfloat  _ih_idealdbg_cv25 = { &ih_idealdbg_cv25,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 25", 0, "" };
_cvfloat  _ih_idealdbg_cv26 = { &ih_idealdbg_cv26,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 26", 0, "" };
_cvfloat  _ih_idealdbg_cv27 = { &ih_idealdbg_cv27,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 27", 0, "" };
_cvfloat  _ih_idealdbg_cv28 = { &ih_idealdbg_cv28,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 28", 0, "" };
_cvfloat  _ih_idealdbg_cv29 = { &ih_idealdbg_cv29,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 29", 0, "" };
_cvfloat  _ih_idealdbg_cv30 = { &ih_idealdbg_cv30,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 30", 0, "" };
_cvfloat  _ih_idealdbg_cv31 = { &ih_idealdbg_cv31,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 31", 0, "" };
_cvfloat  _ih_idealdbg_cv32 = { &ih_idealdbg_cv32,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS, "IDEAL debug variable 32", 0, "" };


_cvint  _ihlabeltime = { &ihlabeltime,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "3D ASL labeling time (msec)", 
    0, ""
};

_cvint  _ihpostlabeldelay = { &ihpostlabeldelay,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "3D ASL post label delay time (usec)", 
    0, ""
};

_cvint  _ihnew_series = { &ihnew_series,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Put image type in a new series. Bit mask 1-Phase, 2-Real, 3-Imag", 
    0, ""
};


_cvint  _ihcardt1map_hb_pattern = { &ihcardt1map_hb_pattern,  
    0, 
    999999999, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Heartbeat pattern for cardiac T1 mapping", 
    0, ""
};



_cvint  _dbdt_option_key_status = { &dbdt_option_key_status,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "existence of dbdt option key", 
    0, ""
};

_cvint  _dbdt_mode = { &dbdt_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=normal, 1=first controlled dbdt mode", 
    0, ""
};

_cvint  _opsarmode = { &opsarmode,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=normal, 1=first, 2=second, 3=low sar controlled sar mode", 
    0, ""
};

_cvint  _cfdbdttype = { &cfdbdttype,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "0=duration dependent (cfdbdtper), 1=uniform limit (cfdbdtts)", 
    0, ""
};

_cvfloat  _cfrinf = { &cfrinf,  
    0.0, 
    200.0, 
    23.4,  0, 0, 0, 1, 1, 
    INVIS, 
    "new REILLYDBDTINF", 
    0, ""
};

_cvint  _cfrfact = { &cfrfact,  
    0, 
    10000, 
    334,  0, 0, 0, 1, 1, 
    INVIS, 
    "new REILLYDBDTFACTOR", 
    0, ""
};

_cvfloat  _cfdbdtper_norm = { &cfdbdtper_norm,  
    0.0, 
    100.0, 
    80.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "new F - normal mode", 
    0, ""
};

_cvfloat  _cfdbdtper_cont = { &cfdbdtper_cont,  
    0.0, 
    100.0, 
    100.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "new F - first controlled mode", 
    0, ""
};

_cvfloat  _cfdbdtper_max = { &cfdbdtper_max,  
    100.0, 
    1000.0, 
    200.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "new max F - any mode", 
    0, ""
};




_cvint  _cfnumicn = { &cfnumicn,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of icn's ", 
    0, ""
};

_cvint  _cfdppericn = { &cfdppericn,  
    2, 
    32, 
    4,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of dp per icn ", 
    0, ""
};





_cvint  _cfgradcoil = { &cfgradcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvint  _cfswgut = { &cfswgut, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfswrfut = { &cfswrfut, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfswssput = { &cfswssput, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _cfhwgut = { &cfhwgut, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfhwrfut = { &cfhwrfut, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfhwssput = { &cfhwssput, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _cfoption = { &cfoption,  
    SEC_CODE_INIT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Code for coil option check", 
    0, ""
};







_cvint  _cfrfboardtype = { &cfrfboardtype,  
    RF_BOARD_RRF, 
    RF_BOARD_DCERD, 
    RF_BOARD_RRF,  0, 0, 0, 1, 1, 
    INVIS, 
    "RF Board Type 0:RRF 1:DCERD", 
    0, ""
};




_cvint  _psd_board_type = { &psd_board_type,  
    PSDCERD, 
    PSDDVMR, 
    PSDDVMR,  0, 0, 0, 1, 1, 
    VIS, 
    "type of transceiver", 
    0, ""
};




_cvint  _opdfm = { &opdfm,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Activate DFM : 0=off, 1=on.", 
    0, ""
};

_cvint  _opdfmprescan = { &opdfmprescan,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Enable dfm Prescan : 0=off, 1=on.", 
    0, ""
};

_cvint  _cfdfm = { &cfdfm,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "DFM Available   : 0=off, 1=on.", 
    0, ""
};

_cvint  _cfdfmTG = { &cfdfmTG,  
    0, 
    200, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "TG for DFM Coil.", 
    0, ""
};

_cvint  _cfdfmR1 = { &cfdfmR1,  
    0, 
    13, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "R1 for DFM Coil.", 
    0, ""
};

_cvint  _cfdfmDX = { &cfdfmDX,  
    -1000000, 
    1000000, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "DX for DFM Coil", 
    0, ""
};


_cvint  _derate_ACGD = { &derate_ACGD,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Derate ACGD to 2.2G/cm", 
    0, ""
};


_cvint  _rhextra_frames_top = { &rhextra_frames_top,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "top of EPI internal ref frames", 
    0, ""
};

_cvint  _rhextra_frames_bot = { &rhextra_frames_bot,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "bottom of EPI internal ref frames", 
    0, ""
};

_cvint  _rhpc_ref_start = { &rhpc_ref_start,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Start of ref phase correction", 
    0, ""
};
_cvint  _rhpc_ref_stop = { &rhpc_ref_stop,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "End of ref phase correction", 
    0, ""
};

_cvint  _rhpc_ref_skip = { &rhpc_ref_skip,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of ref phase correction frames to skip", 
    0, ""
};

_cvint  _opaxial_slice = { &opaxial_slice,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of axial slices in 3-Plane", 
    0, ""
};

_cvint  _opsagittal_slice = { &opsagittal_slice,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of sagittal slices in 3-Plane", 
    0, ""
};

_cvint  _opcoronal_slice = { &opcoronal_slice,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of coronal slices in 3-Plane", 
    0, ""
};

_cvint  _opvrg = { &opvrg,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "VERSE: 0=off, 1=on", 
    0, "The VERSE imaging option is not supported in this scan."
};

_cvint  _opmart = { &opmart,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MART: 0=off, 1=on", 
    0, "The MART imaging option is not supported in this scan."
};

_cvint  _piassetscrn = { &piassetscrn,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ASSET", 
    0, ""
};


_cvint  _opseriessave = { &opseriessave,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Save series pressed?: 0-No, 1-Yes", 
    0, ""
};


_cvint  _opt1map = { &opt1map,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "T1Map CV: 0=OFF, 1=ON", 
    0, ""
};


_cvint  _opt2map = { &opt2map,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "T2Map CV: 0=OFF, 1=ON", 
    0, ""
};


_cvint  _opmer2 = { &opmer2,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "R2* CV: 0=OFF, 1=ON", 
    0, ""
};


_cvint  _rhnew_wnd_level_flag = { &rhnew_wnd_level_flag,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for New Window Width and Window Level Algorithm", 
    0, "This must be 0 or 1"
};

_cvint  _rhwnd_image_hist_area = { &rhwnd_image_hist_area,  
    10, 
    100, 
    60,  0, 0, 0, 1, 1, 
    VIS, 
    "Percent of image (centered) which in included in the calculation", 
    0, "rhwnd_image_hist_area should be between 10 to 100"
};

_cvfloat  _rhwnd_high_hist = { &rhwnd_high_hist,  
    0.0, 
    100.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Percent of pixels with highest values removed from calculation", 
    0, "rhwnd_high_hist should be between 0.0 and 100.0"
};

_cvfloat  _rhwnd_lower_hist = { &rhwnd_lower_hist,  
    0.0,  
    100.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Percent of pixels with lowest values removed from the calculation", 
    0, "rhwnd_lower_hist should be between 0.0 and 100.0"
};


_cvint  _rhrcmavric_control = { &rhrcmavric_control,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MAVRIC-SL Reconstruction Control", 
    0, ""
};





_cvint  _rhrcmavric_image = { &rhrcmavric_image,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "MAVRIC-SL Output Image", 
    0, ""
};











_cvint  _rhrcmavric_bin_separation = { &rhrcmavric_bin_separation,  
    0, 
    20000, 
    1000,  0, 0, 0, 1, 1, 
    VIS, 
    "MAVRIC-SL Bin Separation Frequency in Hz", 
    0, ""
};


_cvint  _cfrfupa = { &cfrfupa,  
    -MAXINT, 
    0, 
    -50,  0, 0, 0, 1, 1, 
    VIS, 
    "PRE-RF Unblank time (us)", 
    0, ""
};

_cvint  _cfrfupd = { &cfrfupd,  
    0, 
    MAXINT, 
    50,  0, 0, 0, 1, 1, 
    VIS, 
    "POST-RF Unblank time (us) ", 
    0, ""
};

_cvint  _cfrfminblank = { &cfrfminblank,  
    -MAXINT, 
    MAXINT, 
    200,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimum blank time (us)", 
    0, ""
};

_cvint  _cfrfminunblk = { &cfrfminunblk,  
    -MAXINT, 
    MAXINT, 
    200,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimum un-blank time (us)", 
    0, ""
};

_cvint  _cfrfminblanktorcv = { &cfrfminblanktorcv,  
    -MAXINT, 
    MAXINT, 
    50,  0, 0, 0, 1, 1, 
    VIS, 
    "Minimum blank to rcv time (us)", 
    0, ""
};

_cvfloat  _cfrfampftconst = { &cfrfampftconst,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.784,  0, 0, 0, 1, 1, 
    VIS, 
    "RF Amp Capability const term coefficient", 
    0, ""
};

_cvfloat  _cfrfampftlinear = { &cfrfampftlinear,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "RF Amp Capability linear term coefficient", 
    0, ""
};

_cvfloat  _cfrfampftquadratic = { &cfrfampftquadratic,  
    -MAXFLOAT, 
    MAXFLOAT, 
    15.125,  0, 0, 0, 1, 1, 
    VIS, 
    "RF Amp Capability quadratic term coefficient", 
    0, ""
};

_cvint  _opradialrx = { &opradialrx,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The flag to indicate whether radial slices are prescribed", 
0, "" };

_cvint  _cfsupportreceivefreqbands = { &cfsupportreceivefreqbands,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The flag to indicate whether system support receive frequency bands to avoid CNT", 
    0, ""
};

_cvfloat  _cfcntfreefreqlow = { &cfcntfreefreqlow,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Coherent noise free frequency low bound", 
    0, ""
};

_cvfloat  _cfcntfreefreqhigh = { &cfcntfreefreqhigh,  
    -MAXFLOAT,    
    MAXFLOAT, 
    10000.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Coherent noise free frequency high bound", 
    0, ""  
};


_cvint  _optracq = { &optracq,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Acqs & TR for Fixed Acqs", 
    0, ""
};


_cvint  _opswift = { &opswift,   
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "SWIFT Application on=1/off=0", 
    0, "opswift should be 0 or 1"
};

_cvint  _rhswiftenable = { &rhswiftenable,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Swift enable: bit 0, Rcvr noise switch: bit 1", 
0, "" };

_cvint  _rhnumCoilConfigs = { &rhnumCoilConfigs,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "How many different coils in the data acq table?", 
0, "" };

_cvint  _rhnumslabs = { &rhnumslabs,  
    1, 
    MAXVQUANT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "The number of slabs for 3D for recon", 
0, "" };


_cvint  _opncoils = { &opncoils,  
    1, 
    (MAX_COIL_SETS), 
    1,  0, 0, 0, 1, 1, 
    VISONLY, 
    "The number of coil configurations in coilInfo and volRecCoilInfo", 
0, "" };




_cvint  _rtsar_first_series_flag = { &rtsar_first_series_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "First Series Flag for RT SAR feature. 0 = off, 1 = on", 
0, "" };

_cvint  _rtsar_enable_flag = { &rtsar_enable_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable flag for RT SAR feature. 0 = off, 1 = on", 
0, "" };

_cvint  _measured_TG = { &measured_TG,  
    -1, 
    400, 
    -1,  0, 0, 0, 1, 1, 
    VIS, 
    "Measured TG for FTG/APS1 entry point from prescan", 
0, "" };

_cvint  _predicted_TG = { &predicted_TG,  
    -1, 
    400, 
    -1,  0, 0, 0, 1, 1, 
    VIS, 
    "Predicted TG for FTG/APS1 entry point from PSD", 
0, "" };

_cvfloat  _sar_correction_factor = { &sar_correction_factor,  
    0.001, 
    1000.0, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "RT SAR feature - SAR correction factor from SCAN", 
0, "" };

_cvint  _gradHeatMethod = { &gradHeatMethod,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Gradient Heating Method (0=Traditional, 1=Optimized).", 
    0, ""
};

_cvint  _gradHeatFile = { &gradHeatFile,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Write Corner Points Files (0=OFF, 1=ON).", 
    0, ""
};

_cvint  _gradCoilMethod = { &gradCoilMethod,  
    GRADIENT_COIL_METHOD_AUTO, 
    GRADIENT_COIL_METHOD_QAC, 
    GRADIENT_COIL_METHOD_AUTO,  0, 0, 0, 1, 1, 
    VIS, 
    "Gradient Coil Heating Model (-1=Auto, 0=DC model, 1=AC Model FFTW, 2=QAC Model).", 
    0, ""
};

_cvint  _gradHeatFlag = { &gradHeatFlag,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Force to always run grad heating calculations (0=OFF, 1=ON).", 
    0, ""
};

_cvint  _xgd_optimization = { &xgd_optimization,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Timing optimization for XGD thermal model (0=OFF, 1=ON).", 
    0, ""
};

_cvint  _gradChokeFlag = { &gradChokeFlag,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Enables/Disables XGD Choke Model (0=Disable, 1=Use GradientConfig).", 
    0, ""
};


_cvint  _piburstmode = { &piburstmode,  
    PSD_OFF, 
    PSD_OFF, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to allow Burst Mode", 
    0, ""
};

_cvint  _opburstmode = { &opburstmode,  
    PSD_OFF, 
    PSD_OFF, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to enable Burst Mode", 
    0, ""
};

_cvint  _burstreps = { &burstreps,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of repetitions for Burst Mode", 
    0, ""
};

_cvfloat  _piburstcooltime = { &piburstcooltime,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Burst Mode cool time", 
    0, ""
};


_cvfloat  _opaccel_ph_stride = { &opaccel_ph_stride,  
    1.0, 
    MAX_ACCEL, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected phase acceleration", 
    0, ""
};

_cvfloat  _opaccel_sl_stride = { &opaccel_sl_stride,  
    1.0, 
    MAX_ACCEL, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected slice acceleration", 
    0, ""
};

_cvfloat  _opaccel_t_stride = { &opaccel_t_stride,  
    1.0, 
    MAX_ACCEL, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected temporal acceleration", 
    0, ""
};

_cvint  _opaccel_mb_stride = { &opaccel_mb_stride,  
    1, 
    MAX_ACCEL, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected multiband factor", 
    0, ""
};


_cvint  _opmb = { &opmb,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable/disable Multiband", 
    0, ""
};


_cvint  _rhmb_factor = { &rhmb_factor,  
    1, 
    20, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Multiband slice acceleration factor", 
    0, ""
};



_cvint  _rhmb_slice_fov_shift_factor = { &rhmb_slice_fov_shift_factor,  
    1, 
    20, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Multiband Slice FOV shift factor", 
    0, ""
};


_cvint  _rhmb_slice_order_sign = { &rhmb_slice_order_sign,  
    -1, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Multiband Order Sign", 
    0, ""
};


_cvint  _rhmuse = { &rhmuse,  
    0, 
    MUSE_MAX_ACCEL, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "rhmuse=0: Muse recon disabled; rhmuse>0: Muse recon enabled and rhmuse provides the acceleration factor.", 
    0, ""
};


_cvint  _rhmuse_nav = { &rhmuse_nav,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "rhmuse_nav=PSD_OFF: Muse with navigator recon disabled; rhmuse_nav=PSD_ON: Muse with navigator enabled", 
    0, ""
};


_cvint  _rhmuse_nav_accel = { &rhmuse_nav_accel,  
    1, 
    MUSE_MAX_ACCEL, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Acceleration factor for Muse phase mapping readout", 
    0, ""
};


_cvint  _rhmuse_nav_hnover = { &rhmuse_nav_hnover,  
    0, 
    128, 
    16,  0, 0, 0, 1, 1, 
    VIS, 
    "Half-nex overscans for Muse phase mapping readout", 
    0, ""
};


_cvint  _rhmuse_nav_yres = { &rhmuse_nav_yres,  
    16, 
    256, 
    96,  0, 0, 0, 1, 1, 
    VIS, 
    "Muse phase mapping readout yres", 
    0, ""
};

_cvfloat  _opaccel_cs_stride = { &opaccel_cs_stride,  
    1.0, 
    MAX_ACCEL, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected Compressed Sensing factor", 
    0, ""
};


_cvint  _opcompressedsensing = { &opcompressedsensing,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable/disable Compressed Sensing", 
    0, ""
};


_cvfloat  _rhcs_factor = { &rhcs_factor,  
    1.0, 
    10.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Compressed Sensing acceleration factor", 
    0, ""
};


_cvint  _rhcs_flag = { &rhcs_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Compressed Sensing flag", 
    0, ""
};


_cvint  _rhcs_maxiter = { &rhcs_maxiter,  
    0, 
    10000, 
    3,  0, 0, 0, 1, 1, 
    VIS, 
    "Compressed Sensing max iteration", 
    0, ""
};


_cvfloat  _rhcs_consistency = { &rhcs_consistency,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Compressed Sensing consistency ratio", 
    0, ""
};


_cvint  _rhcs_ph_stride = { &rhcs_ph_stride,  
    1, 
    MAX_ACCEL, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "ARC acceleration along phase direction", 
    0, ""
};


_cvint  _rhcs_sl_stride = { &rhcs_sl_stride,  
    1, 
    MAX_ACCEL, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "ARC acceleration along slice direction", 
    0, ""
};

_cvint  _oparc = { &oparc,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable ARC.", 
    0, ""
};

_cvint  _opaccel_kt_stride = { &opaccel_kt_stride,  
    1, 
    MAX_ACCEL, 
    8,  0, 0, 0, 1, 1, 
    VIS, 
    "User selected kt acceleration", 
    0, ""
};

_cvint  _rhkt_factor = { &rhkt_factor,  
    1, 
    12, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "kt acceleration factor", 
    0, ""
};


_cvint  _rhkt_cal_factor = { &rhkt_cal_factor,  
    1, 
    4, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "kt calibration acceleration factor", 
    0, ""
};


_cvint  _rhkt_calwidth_ph = { &rhkt_calwidth_ph,  
    0, 
    128, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "kt calibration size in ph", 
    0, ""
};


_cvint  _rhkt_calwidth_sl = { &rhkt_calwidth_sl,  
    0, 
    128, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "kt calibration size in sl", 
    0, ""
};





_cvint  _opab1 = { &opab1,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable Maximal RF.", 
    0, ""
};

_cvint  _op3dgradwarp = { &op3dgradwarp,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "3D Gradwarp (0=Off, 1=On).", 
    0, ""
};

_cvint  _opauto3dgradwarp = { &opauto3dgradwarp,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for 3D Gradwarp (0=Off, 1=On) visibility", 
    0, ""
};

_cvint  _cfmaxtransmitoffsetfreq = { &cfmaxtransmitoffsetfreq,  
    -MAXINT, 
    MAXINT, 
    650000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Maximum Transmit offset frequency (Hz)", 
    0, ""
};


_cvint  _cfreceiveroffsetfreq = { &cfreceiveroffsetfreq,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Receiver offset frequency (Hz)", 
    0, ""
};


_cvint  _cfcoilswitchmethod = { &cfcoilswitchmethod,  
    -MAXINT, 
    MAXINT, 
    COIL_SWITCH_SSP_HUB_INDEX,  0, 0, 0, 1, 1, 
    INVIS, 
    "Coil switch method bit-mask", 
    0, ""
};

_cvint  _TG_record = { &TG_record,  
    0, 
    200, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "TG value generated by previous scan TG", 
0, "" };





_cvint  _ab1_enable = { &ab1_enable,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag indicates if the current TG_record may be used for adaptive B1 max calculation", 
0, "" };

_cvint  _cfreceivertype = { &cfreceivertype,  
    -MAXINT, 
    MAXINT, 
    CFG_VAL_RECEIVER_RRX,  0, 0, 0, 1, 1, 
    INVIS, 
    "Receiver board type", 
    0, ""
};

_cvint  _cfreceiverswitchtype = { &cfreceiverswitchtype,  
    -MAXINT, 
    MAXINT, 
    CFG_VAL_RCV_SWITCH_RF_HUB,  0, 0, 0, 1, 1, 
    INVIS, 
    "Receiver switch type", 
    0, ""
};

_cvint  _cfEllipticDriveEnable = { &cfEllipticDriveEnable,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Config Variable for Elliptic Drive", 
    0, ""
};

_cvint  _pi3dgradwarpnub = { &pi3dgradwarpnub,  
    0, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "UI Control Variable for 3D gradwarp", 
    0, ""
};

_cvint  _cfDualDriveCapable = { &cfDualDriveCapable,  
    0, 
    1,  
    0,  0, 0, 0, 1, 1,  
    INVIS,  
    "Config Variable for Dual Drive Capable",  
    0, ""
};


_cvint  _optrip = { &optrip,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Enable TRIP (transducer tracking interleaved phase imaging)", 
    0, ""
};


_cvint  _oprtb0 = { &oprtb0,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Realtime B0 correction", 
    0, ""
};

_cvint  _pirtb0vis = { &pirtb0vis,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for Realtime B0 correction visibility (0=Invisible, 1=Visible)", 
    0, ""
};

_cvint  _pirtb0nub = { &pirtb0nub,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "UI control variable for Realtime B0 correction", 
    0, ""
};



_cvint  _ophoecc = { &ophoecc,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for high-order eddy current correction", 
    0, ""
};


_cvint  _rhhoecc = { &rhhoecc,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon cv for high-order eddy current correction", 
    0, ""
};


_cvint  _rhhoec_fit_order = { &rhhoec_fit_order,  
    0, 
    HOEC_MAX_FIT_ORDER, 
    3,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon cv for HOEC fit order", 
    0, ""
};


_cvint  _opdistcorr = { &opdistcorr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Distortion Correction flag", 
    0, ""
};



_cvint  _pidistcorrnub = { &pidistcorrnub,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Distortion Correction UI control", 
    0, ""
};



_cvint  _pidistcorrdefval = { &pidistcorrdefval,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Distortion Correction default value", 
    0, ""
};


_cvint  _rhdistcorr_ctrl = { &rhdistcorr_ctrl,  
    0, 
    31, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Distortion Correction recon control variable", 
    0, ""
};


_cvint  _rhdistcorr_B0_filter_size = { &rhdistcorr_B0_filter_size,  
    1, 
    15, 
    5,  0, 0, 0, 1, 1, 
    INVIS, 
    "Kernel size for Gaussian filter in B0-RPG correction", 
    0, ""
};


_cvfloat  _rhdistcorr_B0_filter_std_dev = { &rhdistcorr_B0_filter_std_dev,  
    0.5, 
    5.0, 
    1.5,  0, 0, 0, 1, 1, 
    INVIS, 
    "Std dev of kernel for Gaussian filter in B0-RPG correction", 
    0, ""
};



_cvint  _ihdistcorr = { &ihdistcorr,  
    0, 
    31, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Image header setting for Distortion Correction", 
    0, ""
};


_cvint  _rhtensor_file_number = { &rhtensor_file_number,  
    0, 
    9999, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Filename for diffusion vectors at tensorXXX.dat", 
    0, ""
};


_cvint  _ihpepolar = { &ihpepolar,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Image header setting for Phase Encoding Polarity", 
    0, ""
};


_cvint  _rhesp = { &rhesp,  
    0, 
    MAXINT, 
    500,  0, 0, 0, 1, 1, 
    VIS, 
    "Recon cv for echo spacing in us", 
    0, ""
};


_cvint  _viewshd_num = { &viewshd_num,  
    0, 
     MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Dual echo FSE view sharing k space lines number", 
    0, ""
};


_cvfloat  _grad_intensity_thres = { &grad_intensity_thres,  
    0.0, 
    100.0, 
    3.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The threshold above which the pixel will be selected to be annefact region", 
    0, ""
};

_cvint  _anne_mask_dilation_length = { &anne_mask_dilation_length,  
    0, 
    100, 
    2,  0, 0, 0, 1, 1, 
    INVIS, 
    "The dilation kernel length of the annefact mask", 
    0, ""
};

_cvfloat  _anne_intensity_thres = { &anne_intensity_thres,  
    0.0, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The threshold above which the channel will be marked as annefactive", 
    0, ""
};

_cvfloat  _anne_channel_percentage = { &anne_channel_percentage,  
    0.0, 
    1.0, 
    0.4,  0, 0, 0, 1, 1, 
    INVIS, 
    "The maximum percentage of channels that can be marked as annefactive", 
    0, ""
};

_cvint  _ec3_iterations = { &ec3_iterations,  
    0, 
    100, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "The number of iterations that the combined coil map will be applied onto the selected annefactive channels", 
    0, ""
};

_cvfloat  _combined_coil_map_thres = { &combined_coil_map_thres,  
    0.0, 
    1.0, 
    0.15,  0, 0, 0, 1, 1, 
    INVIS, 
    "The threshold used to generate the combined coil map", 
    0, ""
};

_cvfloat  _coil_map_smooth_factor = { &coil_map_smooth_factor,  
    0.0, 
    1.0, 
    0.02,  0, 0, 0, 1, 1, 
    INVIS, 
    "The factor that controls the smoothing of coil map combination filter", 
    0, ""
};

_cvfloat  _coil_map_2_filter_width = { &coil_map_2_filter_width,  
    0.0, 
    1.0, 
    0.02,  0, 0, 0, 1, 1, 
    INVIS, 
    "The filter width for coil map 2", 
    0, ""
};

_cvint  _ec3_iteration_method = { &ec3_iteration_method,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Choose iteration method of eC3 (0:No Phase Preserving; 1:With Phase Preserving)", 
    0, ""
};


_cvint  _edr_support = { &edr_support,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for EDR support: 1-yes, 0-no", 
    0, ""
};

_cvfloat  _recon_bandwidth_factor = { &recon_bandwidth_factor,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The factor that controls the recon downsampling factor for oversampled data in PRICE, which will be decided by host for Image-Cut Reduction", 
    0, ""
};



_cvint  _dacq_data_type = { &dacq_data_type,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The output data type of recon images ( 0: RDB_DATA_TYPE_UNKNOWN; 1: RDB_DATA_TYPE_SHORT; 2: RDB_DATA_TYPE_INT; 3: RDB_DATA_TYPE_FLOAT; 4: RDB_DATA_TYPE_DOUBLE )", 
    0, ""
};

_cvint  _rawmode_scaling = { &rawmode_scaling,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "The scaling type of raw mode image (0: No scaling, 1: A/D peak scaling, 2: User defined)", 
    0, ""
};

_cvfloat  _rawmode_scaling_factor = { &rawmode_scaling_factor,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "The scaling factor of raw mode image corresponding to rawmode_scaling ", 
    0, ""
};


_cvint  _oprgcalmode = { &oprgcalmode,  
    RG_CAL_MODE_MIN, 
    RG_CAL_MODE_MAX, 
    RG_CAL_MODE_MEASURED,  0, 0, 0, 1, 1, 
    VIS, 
    "RG Calibration Mode (0: Measured; 1: High Fixed; 2: Low Fixed; 3: Auto)", 
    0, ""
};


_cvint  _opnumgroups = { &opnumgroups,  
    0, 
    SLTAB_MAX, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Number of MSMA Groups", 
    0, ""
};


_cvint  _opsarburst = { &opsarburst,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "SAR burst mode allowed flag", 
    0, ""
};

_cvint  _opheadscout = { &opheadscout,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    INVIS, 
    "Activate the head-scout acquisition feature", 
    0, ""
};

_cvint  _rhposition_detection = { &rhposition_detection,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    INVIS, 
    "Activate reconstruction including position detection", 
    0, ""
};


_cvint  _opfus = { &opfus,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Focused Ultrasound Flag", 
    0, ""
};

_cvint  _opexamnum = { &opexamnum,  
    0, 
     MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Current Exam Number", 
    0, ""
};

_cvint  _opseriesnum = { &opseriesnum,  
    0, 
     MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Current Series Number", 
    0, ""
};



_cvint  _vol_shift_type = { &vol_shift_type,  
    0, 
    7, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bit mask for volume shift (1: Freq dir, 2: Phase dir, 4: Slice dir)", 
    0, ""    
};

_cvint  _vol_shift_constraint_type = { &vol_shift_constraint_type,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Constraint type for volume shift (Common among all slices in all dir(=1) or in freq/phase dir(=2))", 
    0, ""    
};


_cvint  _vol_scale_type = { &vol_scale_type,  
    0,     
    7,     
    0,  0, 0, 0, 1, 1,     
    INVIS,   
    "Bit mask for volume scaling (1: Freq dir, 2: Phase dir, 4: Slice dir)", 
    0, ""    
};

_cvint  _vol_scale_constraint_type = { &vol_scale_constraint_type,  
    0,     
    1,     
    0,  0, 0, 0, 1, 1,     
    INVIS,   
    "Constraint type for volume scaling (0: None, 1: freq scale = phase scale)", 
    0, ""    
};


_cvint  _rhsnrnoise = { &rhsnrnoise,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Mix and/or scale channels for SNR (0: Balanced prescan, 1: Optimal prescan, 2: Unscaled)", 
    0, ""
};

_cvint  _rhvircpolicy = { &rhvircpolicy,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Policy of number of channels used in channel compression (0: Disable, 1: Auto, 2: use the value of rhvircoilchannels)", 
    0, ""
};

_cvint  _rhvirsenstype = { &rhvirsenstype,  
    1, 
    2, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "For computing the compression ranking coefficients (1: Cal scan, 2: Self sensitivity)", 
    0, ""
};

_cvint  _rhvircoiltype = { &rhvircoiltype,  
    1, 
    2, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Virtual channel apply type (1: Volume, 2: X enocde)", 
    0, ""
};

_cvint  _rhvircoilunif = { &rhvircoilunif,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Restore balanced uniformity profile (0: None, 1: Cal scan, 2: Self sensitivity, 3: Self sensitivity advanced)", 
    0, ""
};

_cvint  _rhvircoilchannels = { &rhvircoilchannels,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of channels used in channel compression when rhvircpolicy = 2", 
    0, ""
};

_cvint  _cffield = { &cffield,  
    0, 
    MAXINT, 
    B0_15000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Field strength", 
    0, ""
};

_cvfloat  _act_field_strength = { &act_field_strength,  
    0, 
    MAXFLOAT, 
    30000.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Acutal field strength in Gauss from last scan", 
    0, ""
};

_cvint  _enableReceiveFreqBands = { &enableReceiveFreqBands,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to enable receive frequency bands", 
    0, ""
};

_cvint  _offsetReceiveFreqLower = { &offsetReceiveFreqLower,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The receive frequency offset to the left relative to center frequency", 
    0, ""
};

_cvint  _offsetReceiveFreqHigher = { &offsetReceiveFreqHigher,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "The receive frequency offset to the right relative to center frequency", 
    0, ""
};

_cvint  _cfrfamptyp = { &cfrfamptyp,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "RF Amplifier type", 
    0, ""
};

_cvint  _cfssctype = { &cfssctype,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "SSC type: 1-ICE, 0-non-ICE", 
    0, ""
};

_cvint  _cfbodycoiltype = { &cfbodycoiltype,  
    0, 
    MAXINT, 
    PSD_15_XRM_BODY_COIL,  0, 0, 0, 1, 1, 
    INVIS, 
    "RF body-coil type", 
    0, ""
};

_cvint  _cfptxcapable = { &cfptxcapable,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Parallel transmit capable: 1-Yes, 0-No", 
    0, ""
};


_cvint  _cfbdcabletglimit = { &cfbdcabletglimit,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "cable mode TG limit: 1 = apply limit; 0 = don't apply", 
    0, ""
};


_cvint  _cfcablefreq = { &cfcablefreq,  
    10, 
    500, 
    226,  0, 0, 0, 1, 1, 
    VIS, 
    "cable mode delta freq, kHz", 
    0, ""
};


_cvint  _cfcabletg = { &cfcabletg,  
    1, 
    200, 
    175,  0, 0, 0, 1, 1, 
    VIS, 
    "cable mode on resonance TG limit", 
    0, ""
};


_cvint  _cfcablebw = { &cfcablebw,  
    10, 
    1000, 
    500,  0, 0, 0, 1, 1, 
    VIS, 
    "cable mode 3dB bw, kHz", 
    0, ""
};

_cvint  _opgradshim = { &opgradshim,  
    0, 
    2, 
    2,  0, 0, 0, 1, 1, 
    VIS, 
    "Gradient Shimming selection 0:OFF, 1:ON, 2:AUTO", 
    0, ""
};

_cvint  _track_flag = { &track_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to enable FUS Track PSD", 
    0, ""
};



/*
 * reqexport
 * common variables that do not fit the simple data model of a CV
 * but are used to transfer information between the PSD and host
 * processes (scn, ifcc, psc, etc.). The content is name and order-
 * sensitive so any change that are made to names or the order
 * including additions anywhere except the very end require a change
 * to the revision number; otherwise, unpredictable results may
 * occur.
 */ 

/* Scan info table holds information filled in by
 * scan in prescribed order. Each entry holds the slice
 * location in mm from isocenter, the receive location of
 * each slice in mm, and the rotation matrix */

SCAN_INFO scan_info[SLTAB_MAX] = {DEFAULT_AXIAL_SCAN_INFO};

/* Monitor location - returned by scan */
SCAN_INFO mon_loc;

/* Prescan Calibration and Auto Coil*/
SCAN_INFO calscan_info[CAL_SLTAB_MAX] = {DEFAULT_AXIAL_SCAN_INFO};
SCAN_INFO coilscan_info[CAL_SLTAB_MAX] = {DEFAULT_AXIAL_SCAN_INFO};

/* Data acquisition order table holds the pass and time order
 * within the pass of each phase. */

int DATA_ACQ_ORDER_ENTRIES = SLICE_FACTOR*DATA_ACQ_MAX;
DATA_ACQ_ORDER data_acq_order[SLICE_FACTOR*DATA_ACQ_MAX];

ENTRY_POINT_TABLE entry_point_table[ENTRY_POINT_MAX] = {
    {
        "", /* s8  epname[16]; name that entry point will be named */
        0,  /* n32 epamph;     power for the head coil*/
        0,  /* n32 epampb;     power for the body coil*/
        0,  /* n32 epamps;     peak power for the spectro coil */
        0,  /* n32 epampc;     peak power for the CW Amp */

        0,  /* n32 epwidthh;   max pulse width for the head coil */
        0,  /* n32 epwidthb;   max pulse width for the body coil */
        0,  /* n32 epwidths;   max pulse width for the spectro coil */
        0,  /* n32 epwidthc;   max pulse width for the CW amp */

        0,  /* n32 epdcycleh;  peak duty cycle for the head coil */
        0,  /* n32 epdcycleb;  peak duty cycle for the body coil */
        0,  /* n32 epdcycles;  peak duty cycle for the spectro coil */
        0,  /* n32 epdcyclec;  peak duty cycle for the CW amp */

        0,  /* n8  epsmode;    select exciter mode */
        0,  /* n8  epfilter;   initial filter to use */
        PSD_BROADBANDOFF, /* n8 eprcvrband; tells whether broadband is used */

        PSD_RP_BODY, /* n8 eprcvrinput; receiver port to use */
        PSD_RB_BODY, /* n8 eprcvrbias;  receiver to bias */
        PSD_RP_BODY, /* n8 eptrdriver;  tr driver control */
        0,           /* n8 epfastrec;   type of recevier 0=standard, 1=fast */

        0,   /* s16 epxmtadd;    additional transmit gain to add */
        256, /* s16 epprexres;   prescan xres */  
        0,   /* s16 epshldctrl;  expansion for shield cooler control */
        0,   /* s16 epgradcoil;  indicate gradient shield mode */
        0,   /* n32 eppkpower;   peak power */
        0,   /* n32 epseqtime;   seq time */
        0,   /* s16 epstartrec;  start receiver */
        0,   /* s16 ependrec;    end receiver */

        /* power_monitor_table_t eppmtable; */
        {
            0x7fff,/* s16  pmPredictSAR;   Predicted SAR for this scan */
            0      /* s16  pmContinuousUpdate; Mode for SAR de-rating based on temperature */
        },

        /* General and R1 indicies */
        0,  /* n8  epGeneralBankIndex; general bank index to use */
        0,  /* n8  epGeneralBankIndex2; second bank index for SwiFT on 16 Ch and Megaswitch */
        10, /* n8  epR1BankIndex;     R1 bank index to use */

        TRANSMIT_SELECT_NONE, /* n8 epNbTransmitSelect; narrowband transmit switch selection */
        TRANSMIT_SELECT_NONE, /* n8 epBbTransmitSelect; broadband transmit switch selection */

        MNS_CONVERTER_SELECT_NONE, /* n32 epMnsConverterSelect; MNS converter selection */

        RX_COIL_BODY,          /* n32 epRxCoilType; Receive coil type for primary selected coil */

        0.0, /* f32 epxgd_cableirmsmax; max of XGD cable RMS current for all axes */
        0.0, /* f32 epcoilAC_powersum;  sum of coil AC power for all axes */

        0, /* the flag to enable the receive frequency bands */
        0, /* receive frequency offset to the left relative to center frequency */
        0  /* receive frequency offset to the right relative to center frequency */
    }
};

PSD_FILTER_GEN psd_filt_spec[PSD_FILTER_MAX];

/* changed from short to int. YH */ /* changed to short again  2/16/95 YI */
float eg_sat_rot[6][9]; /* rotation matrices for sat */

/* Psc info table holds information filled in by
 * scan in multislab prescan. Each entry holds the slice
 * location in mm from the center of the prescan slab, the receive location
 * each slice in, the rotation matrix, and the lengths of the
 * prescribed volumes */

PSC_INFO psc_info[MAX_PSC_VQUANT];

/* Graphic IR Bands */
GIR_INFO gir_info[MAX_NUM_GIR];

/* HOEC calibration information */
HOEC_CAL_INFO hoec_cal_info =
{
    0,
    0,
    {{0}},
    {{{0}}},
    {{{0}}},
    {{0}},
    {{{0}}}
};

/* DW gradient vectors */
float rhdiffusion_grad_amp[HOEC_MAX_DIFFGRADAMP_SIZE][HOEC_TOTAL_NUM_AXES] = {{0}}; /* diffusion gradient amplitudes on logical axis */

/* HOEC bases for recon */
RDB_HOEC_BASES_TYPE rhhoec_bases =
{
    {{0}},
    {0},
    {0},
    {0}
};

/* Multi Slab Prescan */
int pipscvol = 2;

/* ***************************
   Image header array pointers
   *************************** */
int *ihtdeltab;
int *ihtrtab;
int ihmaxtdelphase; /* Max tdel value for the first phase */
int *ihtitab; 

/* *******************************
   Advisory Panel Export Variables
   ******************************* */

/* Scan Timing Advisory Variables */

int avminnecho;
int avmaxnecho;

int avminnshots;
int avmaxnshots;

int avminte;
int avmaxte;

int avminte2;
int avmaxte2;

int avmintissuet1;
int avmaxtissuet1;

int avminti;
int avmaxti;

int avminbspti;   /* Minimum Blood Suppression TI */
int avmaxbspti;   /* Maximum Blood Suppression TI */

int avmintrecovery;
int avmaxtrecovery;

int avmintlabel;
int avmaxtlabel;

int avmint2prepte;
int avmaxt2prepte;

int avminnspokes;
int avmaxnspokes;

float avminoversamplingfactor;
float avmaxoversamplingfactor;

int avmintr;
int avmaxtr;

float avminflip;
float avmaxflip;

int avminetl;
int avmaxetl;

float avminrbw;  /* minimum bw in KHz (echoes 2-4 for 1.5T, echo 1 for 0.5T */
float avmaxrbw;  /* maximum bandwith in KHz (echoes 2-4 for 1.5 T, echo
				  one for 0.5T */
float avminrbw2; /* minimum bw in KHz (echoes 2-4, for 0.5T only) */
float avmaxrbw2; /* maximum bandwith in KHz (echoes 2-4, for 0.5T only) */

/* Scanning Range Advisory Variables */

float avminfov;
float avmaxfov;

float avminphasefov;
float avmaxphasefov;

float avminnpwfactor;
float avmaxnpwfactor;

float avminslthick;
float avmaxslthick;

float avminslspace;
float avmaxslspace;

int avminslquant;
int avmaxslquant;

int avmaxvquant = MAXVQUANT;

int avmaxacqs;

/* Overlapping slices, in Motsa */
int avmaxovl; /* Maximum number of overlapping slices */


/* Acquisition time Advisory Variables */

int avminxres;
int avmaxyres;

int avminyres;
int avmaxxres;

float avminnex;
float avmaxnex;

int avminslicecnt;
int avmaxslicecnt;

/* Cardiac Gating Advisory Variables */

int avminphases;
int avmaxphases;

int avminaphases = 1;  /* Minimum Number of phases to acquire per location */
int avmaxaphases = 30; /* Maximum Number of phases to acquire per location */

int avmintdel1; /* min cardiac delay */
int avmaxtdel1; /* max cardiac delay */
int pisystdel1; /* systolic cardiac delay */
int pidiatdel1; /* diastolic cardiac delay */
int pitdel1;   /* recommended delay with SAT modules */

int avminrttseq; /* Advisory panel min sequence time */

/* Navigator Advisory Variables */
float avminnavaccwin;
float avmaxnavaccwin;
int avminnavautotrigtime;
int avmaxnavautotrigtime;
int avminnavpsctime;
int avmaxnavpsctime;
int avminnavrrmeastime;
int avmaxnavrrmeastime;
int avminnavmaxinterval;
int avmaxnavmaxinterval;

/* Auto Navigator Tracker */
int pibreathholdnub = 0;
int piautonavtracker = 0;

/* Vascular Velocity Encoding Advisory Panel Variables.
   Min and Max velocity encoding value in cm/sec */
float avminvenc;
float avmaxvenc;

/* MSDE TAB related variables */
int pimsdeaxnub = 0;
int pivestnub = 0;
float avminvest = 0.0;
float avmaxvest = 0.0;

/* Delay after acquisition.  Needed in cardiac routines */
int avmaxsldelay;		/* Maximum Delay after acquisition */

int avminfphases;		/* Minimum Number of phases per locations */
int avmaxfphases;		/* Maximum Number of phases per locations */

/* DISCO with DynaPlan */
int avminvsphases;		/* Minimum Number of wash-in phases */
int avmaxvsphases;		/* Maximum Number of wash-in phases */
int avmindphases = 1;		/* Minimum Number of phases per locations for DynaPlan */

/* ECTRICKS multiphases */
int avmintphases;
int avmaxtphases;
int avmintricksdel = 1;
int avmaxtricksdel = 30000000;


/* b-value from DWI screen */ /* HFO3 merge 02/18/2003 YI */
int avminbval;
int avmaxbval;

float avminrep_rest = 1;
float avmaxrep_rest = 128;

float avminrep_active = 1;
float avmaxrep_active = 128;

float avmin_dda = 0;
float avmax_dda = 50;

int avminnseg;
int avmaxnseg;

int avmintseq;
int avmaxtseq;

/* For cases when PSD can override the entries 
in the config file */
float avminslassetfac;
float avmaxslassetfac;
float avminphassetfac;
float avmaxphassetfac;

/* MR-TOUCH */
int avmintouchfreq = 20;
int avmaxtouchfreq = 5000;
int avmintouchmegfreq = 20;
int avmaxtouchmegfreq = 5000;
int avmintouchcyc = 0;
int avmaxtouchcyc = 5000;
int avmintouchamp = 0;
int avmaxtouchamp = 100;
int avmintouchtphases = 4;
int avmaxtouchtphases = 128;

int avminnumbvals; 
int avmaxnumbvals;

float avminbvalstab;
float avmaxbvalstab;

int avminnumsynbvals;
int avmaxnumsynbvals;

float avminsynbvalstab;
float avmaxsynbvalstab;

float avmindifnextab;
float avmaxdifnextab;

float avmindifnext2;
float avmaxdifnext2;

/* PROMO rescan time in seconds */
int avminallowedrescantime = 0;
int avmaxallowedrescantime = 3600;
int pidefallowedrescantime = 300;
int piallowedrescantimenub = 0;

/* **********************************
   Interface Control Export Variables
   ********************************** */

/* advisory panel */
int piadvise = 0;
/* *************************************************
 * The following variables are read by Scan Rx to 
 * determine which advisory panel entries should be 
 * displayed.  
 * piadvmin and piadvmax are the bitmasks for respectively
 * displaying the min and max values for echos, TE, TE2,
 * TI, TR, FOV, receive bandwidth, and velocity encoding.
 * piadvtime is the bitmask for selectively displaying
 * the scan time, max. Locs/Acq, minimum # of acqs, and the
 * acquisition matrix.
 * piadvcard is the bitmask for selectively displaying the
 * cardiac adv. panel entries.  These entries are inter-sequence
 * delay, # of phases, effective TR, max # of scan locs, and
 * available image time.  It should be noted that these 
 * entries will never be displayed if cardiac gating is not 
 * selected.  
 * The bitmask position for each of these parameters is 
 * listed up above in the global section.
 * ************************************************* */

/* bit mask for minimum adv. panel values */
int piadvmin = (1<<PSD_ADVECHO) +
  (1<<PSD_ADVTE) + (1<<PSD_ADVTE2) + (1<<PSD_ADVTI) + (1<<PSD_ADVTR) +
  (1<<PSD_ADVFOV) + (1<<PSD_ADVRCVBW) + (1<<PSD_ADVVENC) + (1<<PSD_ADVRCVBW2); 
int piadvmax = (1<<PSD_ADVECHO) +
  (1<<PSD_ADVTE) + (1<<PSD_ADVTE2) + (1<<PSD_ADVTI) + (1<<PSD_ADVTR) +
  (1<<PSD_ADVFOV) + (1<<PSD_ADVRCVBW) + (1<<PSD_ADVVENC) + (1<<PSD_ADVRCVBW2); 

/* bit mask for scan time adv. panel values */
int piadvtime = (1<<PSD_ADVMINTSCAN) + (1<<PSD_ADVMAXLOCSPERACQ) +
  (1<<PSD_ADVMINACQS) + (1<<PSD_ADVMAXYRES);

/* bit mask for cardiac adv. panel values */
int piadvcard = (1<<PSD_ADVISEQDELAY) 
   + (1<<PSD_ADVMAXPHASES) + (1<<PSD_ADVEFFTR)
   + (1<<PSD_ADVMAXSCANLOCS) + (1<<PSD_ADVAVAILIMGTIME);


/* buttons for opnseg pull down menu */
int pinsegnub = 0;
int pinsegval2 = 1;
int pinsegval3 = 2;
int pinsegval4 = 3;
int pinsegval5 = 4;

/* frame rate(sec/frame) for Rapid Frame Acquisition */
int piframeratenub = 0;
float piframerate = 0;

int piimages = 1;

/* scanning range */
/* RS/YV Sat default thickness changed from 80mm to 40mm */
int pisatthick = 40;
int pisatthickx = 40;
int pisatthicky = 40;
int pisatthickz = 40;

int pisatnub = 1; /* 1 if Sat buttons should appear */

/* *************************************************
   SmartPrep Required Exports
   ************************************************ */
int pimonitor = 0;  /* Enable monitor */

/* Monitor FOV */
int pimonfovnub=4;
float pimonfovval2=50.0;
float pimonfovval3=100.0;
float pimonfovval4=200.0;
float pidfmonfov=200.0;

/* Monitor Thickness */
int pimonthicknub=4;
float pimonthickval2=20.0;
float pimonthickval3=40.0;
float pimonthickval4=80.0;
float pidfmonthick=20.0;

int piccsat_obl = 0;	/* Concat sat capability for oblique scan in fse-xl. */

/* RJF - 11.0 SAT UI Enhancements. */
int pichemsatopt = 0;

int piccsatnub = 1; /* if 1, concatsat button should
		       appear */
int pisupnub = 1; /* if 1, chemsat buttons will appear */

int piautopause = 0;
int pislblank = 2;

int pislthicklabel = PSD_SLTHICK_LABEL_SLTHICK;
float pislthickstep = 1.0;

/* cardiac gating */
int pitseq;
int piait;
int pietr;

/* Graphic ROI inquiry CVs */
int picsifov;			/* Field of view for CSI phase encoding */
int pirlcsi;			/* Number of phase encodes in the RL dir */
int piapcsi;			/* Number of phase encodes in the AP dir */
int pisicsi;			/* Number of phase encodes in the SI dir */
int piroigrx=PSD_OFF;		/* Whether or not to do Grx ROI */

/* misc pi variables */
int pifilt4 = 0;
int pifilt5 = 0;
int pifilt6 = 0;
int pifilt7 = 0;

int pitfeextra= 0;

/* APS */
int pitr;
int pichop;
int pitsp1;
int pitsp2;
int picalmode;
int pislquant;
int pinex;

/* screen control */

int pimphscrn = 0;		/* controls the Multi-Phase screen,
				   0: no multi-phase,
				   1: multi-phase acq.*/

int pifphasenub = 0;	/* buttons for number of phases per location */
int pifphaseval2 = 1;
int pifphaseval3 = 2;
int pifphaseval4 = 4;
int pifphaseval5 = 8;
int pifphaseval6 = 16;

int pisldelnub = 6; 	/* buttons for delay after acquisition, value 0-6 */
int pisldelval3 = 500000;
int pisldelval4 = 1000000;
int pisldelval5 = 2000000;
int pisldelval6 = 5000000;

int piacqnub = 0;		/* buttons for phase acquisition order, value 0-2 */

/* ECTRICKS */
int pitphasenub = 6;
int pitphaseval2 = 5;
int pitphaseval3 = 9;
int pitphaseval4 = 13;
int pitphaseval5 = 17;
int pitphaseval6 = 21;

/* DISCO with DynaPlan */
int pivsphasenub = 0;
int pivsphaseval2 = 3;
int pivsphaseval3 = 4;
int pivsphaseval4 = 5;
int pivsphaseval5 = 8;
int pivsphaseval6 = 10;

int pitricksdelnub = 6;
int pitricksdelval3 = 3000000;
int pitricksdelval4 = 5000000;
int pitricksdelval5 = 10000000;
int pitricksdelval6 = 30000000;

/* user CV */
int piuset  = 0;
int piuset2 = 0;

/* Added for TENSOR ALP */
int pidualspinechonub = 0;       /* Bitmask for dualspinecho toggle button */

/* piechnub: No of Echoes/TEs
 * bitmask: 1 (allow type-in) + 2 (show 1st value) + 4 (show 2nd value)
 * + 8 ...
 *    1. Do not show number of echoes by default: piechnub=0 and opautonecho=0.
 *    2. if piechnub=0, opautonecho = 1, then the field will be read-only
 *    and will use opnecho as the value to display */

int piechnub = 0;
int piechdefval = 1;
int piechval2 = 1;
int piechval3 = 2;
int piechval4 = 4;
int piechval5 = 8;
int piechval6 = 16;

int pishotnub = 0;  /* number of buttons to display, not bit mask */
int pishotval2 = 1;
int pishotval3 = 2;
int pishotval4 = 4;
int pishotval5 = 8;
int pishotval6 = 16;

int picineiprot = 0;

int pitetype = PSD_LABEL_TE_NORM;  /* Flag for TE annotation */
int pite1nub = 63;
int pite1val2 = 10000;
int pite1val3 = 20000;
int pite1val4 = 25000;
int pite1val5 = 30000;
int pite1val6 = 35000;

int pite2type = PSD_LABEL_TE_NORM;  /* Flag for TE annotation */
int pite2nub = 0;
int pite2val2 = 40000;
int pite2val3 = 60000;
int pite2val4 = 80000;
int pite2val5 = 100000;
int pite2val6 = 120000;

int pitissuet1nub    = 0;
int pitissuet1defval = PSD_TISSUE_WM;    /* Default value for Tissue T1 */
int pitissuet1val2   = PSD_TISSUE_WM;
int pitissuet1val3   = PSD_TISSUE_GM;
int pitissuet1val4   = 900000;
int pitissuet1val5   = 1200000;

int pititype   = PSD_LABEL_TI_IR;  /*  Flag for TI annotation  */
int pitinub    = 0;
int pitidefval = 0;    /* Default value for TI */
int pitival2   = 50000;
int pitival3   = 130000;
int pitival4   = 200000;
int pitival5   = 300000;
int pitival6   = 400000;
int piautoti = 0; /* Flag to support Auto TI */

/* Black Blood Suppression buttons */
int pibsptinub    = 0;
int pibsptidefval = 0;
int pibsptival2   = 0;
int pibsptival3   = 0;
int pibsptival4   = 0;
int pibsptival5   = 0;
int pibsptival6   = 0;
int piautobspti   = 0; /* Flag to support Auto BSP TI */

int pitrecoverynub    = 0;
int pitrecoverystep   = 200000;
char pitrecoverylabel[32] = "Recovery Time";
int pitrecoverydefval = TRECOVERY_MIN;
int pitrecoveryval2   = 300000;
int pitrecoveryval3   = 600000;
int pitrecoveryval4   = 1000000;
int pitrecoveryval5   = 1500000;
int pitrecoveryval6   = 2000000;

int pitlabelnub    = 0;
int pitlabelstep   = 500000;
int pitlabeldefval = TLABEL_DEF;
int pitlabelval2   = 1500000;
int pitlabelval3   = 2000000;
int pitlabelval4   = 2500000;

int pit2preptenub    = 0;
int pit2preptedefval = 80000;
int pit2prepteval2   = 30000;
int pit2prepteval3   = 40000;
int pit2prepteval4   = 60000;
int pit2prepteval5   = 80000;
int pit2prepteval6   = 100000;

int pinspokesnub    = 0;
int pinspokesstep    = 32;
int pinspokesdefval = 128;
int pinspokesval2   = 128;
int pinspokesval3   = 192;
int pinspokesval4   = 256;
int pinspokesval5   = 384;
int pinspokesval6   = 512;

int pioversamplingfactornub  = 0;
float pioversamplingfactordefval = 1.0;
float pioversamplingfactorval2   = 1.0;
float pioversamplingfactorval3   = 1.5;
float pioversamplingfactorval4   = 2.0;
float pioversamplingfactorval5   = 2.5;
float pioversamplingfactorval6   = 3.0;

int piacsnub = 0;
int piacsdefval = 4;
int piacsval2 = 2;
int piacsval3 = 3;
int piacsval4 = 4;
int piacsval5 = 5;
int piacsval6 = 6;

int piharmonizenub = 0;

int pieffbladewidthnub = 0;
int pieffbladewidthdefval = 1;

int pisilentmr = 0;
int pinslices;

int pitrnub = 6;
int pitrval2 = 300000;
int pitrval3 = 500000;
int pitrval4 = 800000;
int pitrval5 = 1000000;
int pitrval6 = 2000000;
int piinrangetrmin = 0;
int piinrangetrmax = 0;
int piautotrmode = 0; /* Flag for Auto TR mode - 0:Manual TR, 1:In-Range TR, 2:Advancd In-Range TR */

int pifanub = 0;
int pifaval2 = 10;
int pifaval3 = 20;
int pifaval4 = 30;
int pifaval5 = 40;
int pifaval6 = 50;
int piautofa = 0;  /* Flag to support Auto Flip Angle */
int pifamode = 0;  /* Flag to display Flip Angle on UI - 0:"Flip Angle", 1:"Refocus Flip Angle" */

int pietlnub = 0;		/* Number of ETL buttons */
int pietlval2 = 2;
int pietlval3 = 4;
int pietlval4 = 8;
int pietlval5 = 16;
int pietlval6 = 32;
int piautoetl = 0; /* Flag to support Auto ETL */

/*
 * "pi" CV control to override the Asset screen
 * 0: do not override,Scan will populate the Asset screen based on 
 * the values in the Asset config file
 * 1: PSD will be able to pass values for Asset related parameters
 * which can be used to populate the Asset screen (override)
 */
int piassetoverride = 0; 

/*
 * "pi" CV to control the Asset screen
 * 0: hide the Asset screen,
 * 1: display the Asset screen
 * When PSD override is enabled, the title of the ASSET screen
 * can be customized by specifying the title in the description
 * field of the "pi" CV piassetscrn which has been defined in the
 * reqcv section.
 */
int piphassetnub = 0;
float piphassetval1 = 1.0;
float piphassetval2 = 1.0;
float piphassetval3 = 1.0;
float piphassetval4 = 1.0;
float pidefphasset = 1.0;

int pislassetnub = 0;
float pislassetval1 = 1.0;
float pislassetval2 = 1.0; 
float pislassetval3 = 1.0;
float pislassetval4 = 1.0;
float pidefslasset = 1.0; 

int picalmodenub = 0; /* flag for visibility of ASSET/PURE calibration mode menu */
int pidefcaldelay = 5000000; /* default delay time between breathhold and free-breathing passes of ASSET/PURE calibration scan */

int pipure = PSD_PURE_COMPATIBLE_1; /* PURE version compatibility bitmask */

int pirbwpage = PSD_BW_SCREEN_SET;  /*  Flag for RBW screen  */
float pidefrbw = 15.63;
int pircbnub = 6; /* number of variable bandwidth buttons */
float pircbval2 = 2.0;
float pircbval3 = 4.0;
float pircbval4 = 8.0;
float pircbval5 = 12.80;
float pircbval6 = 16.0;

int pircb2nub = 6; /* number of variable bandwidth buttons */
float pircb2val2 = 2.0;
float pircb2val3 = 4.0;
float pircb2val4 = 8.0;
float pircb2val5 = 12.80;
float pircb2val6 = 16.0;

/* piflosup has become obsolete but can't be changed. Now its pivascop */
int piflosup = 0; /* Set to 1 if flow suppression screen
		     required (i.e. phase contrast) */
int piflanub = 0; /* if 1, flow axis buttons will appear */
int pivelnub = 0; /* if 1, velocity encoding prompt will appear */
int piprojnub = 0; /* bitmask for num of projetion buttons */
int piaddinub = 0; /* bitmask for num of additional image buttons */
int piflrcnub = 0; /* bit mask for the flow recon type */
/* Ramp direction buttons */
int pirampnub = 0; /* Bitmask for Ramp Pulse buttons */
int pideframp = 0; /* Default value for Ramp Pulse direction, 0: nonramp pulses, 1: positive ramp pulse */


/* scanning range */
int piscran = 1;

int pifovnub = 6;
float pifovval2 = 80.0;
float pifovval3 = 120.0;
float pifovval4 = 160.0;
float pifovval5 = 200.0;
float pifovval6 = 240.0;

int piphasfovnub = 0; /* bitmap for variable fov buttons to appear of
                         Aquisition Timing page, 0=off, 7=on */
int pifreqfovnub = 0; /* bitmap for future frequency fov buttons */

int piphasfovnub2= 0; /* Used to select the "other" button in phase fov */

float piphasfovval1 = 1.0;
float piphasfovval2 = .75;    /* 5.5-QT */
float piphasfovval3 = 0.5;
float piphasfovval4;  /* not used - only 3 buttons are visible */
float piphasfovval5;  /* not used - only 3 buttons are visible */
float piphasfovval6;  /* not used - only 3 buttons are visible */

/* No Phase Wrap Factor */
int pinpwfactornub  = 0;
float pinpwfactordefval = 1.00;
float pinpwfactorval2   = 1.25;
float pinpwfactorval3   = 1.50;
float pinpwfactorval4   = 2.00;
float pinpwfactorval5   = 3.00;
float pinpwfactorval6   = 4.00;

int pistnub = 6;
float pistval2 = 3;
float pistval3 = 4;
float pistval4 = 5;
float pistval5 = 7;
float pistval6 = 10;

int piisnub = 5;
int piisil = 1;
float piisval2 = 1.5;
float piisval3 = 2.5;
float piisval4 = 5;
float piisval5 = 10;
float piisval6 = 15;

/* Overlap slices */
int pipctovl = 25; /* Percentage of overlapping region thickness over whole slab thickness. */
int pidefovl = 1; /* Indicate default button for overlap slices; 0: "Other" button, 1: "Recommended" button. */
int piovlnub = 0;  /* overlap locations on 3D MS scanning range (bitmap) */

int pilocnub = 0;
int pilocval2 = 28;
int pilocval3 = 60;
int pilocval4 = 124;
int pilocval5 = 252;
int pilocval6 = 508;

/* Number of locations per slab buttons */
int pislqnub = 15;  /* Bitmask for Number of locations per slab button */
int pislqval2 = 16; /* Button 2 value */
int pislqval3 = 32; /* Button 3 value */
int pislqval4 = 64; /* Button 4 value */
int pidefslq = 32;  /* Default value for Number of loc.s per slab */
int pislqval5 = 128; /* add a button when combining 3d-multi and 3d */

/* acquisition timing */
int piactim = 1;

/* piamnub is now a bitmap */
int piamnub = 7;
char piamval1[8] = "256x128";
char piamval2[8] = "256x192";
char piamval3[8] = "256x256";
char piamval4[8] = "512x256";
char piamval5[8] = "512x384";
char piamval6[8] = "512x512";

int pitresnub = 0;  /* Display pitres or temporal resolution on UI*/
int pitres2nub = 0; /* Display Interp. Temp value on UI*/

int pixresnub = 2; /* bitmask */
int pixresval2 = 256;
int pixresval3 = 512;
int pixresval4 = 256;
int pixresval5 = 256;
int pixresval6 = 256;

int piyresnub = 15;  /* bitmask */
int piyresval2 = 160;
int piyresval3 = 192;
int piyresval4 = 224;
int piyresval5 = 256;
int piyresval6 = 512;

int pinexnub = 63;
float pinexval2 = 0.5;
float pinexval3 = 0.75;
float pinexval4 = 1;
float pinexval5 = 2;
float pinexval6 = 4; 

/* pisctim */
int pisctim = 1;
float pisctim1 = 0;
float pisctim2 = 0;
float pisctim3 = 0;
float pisctim4 = 0;
float pisctim5 = 0;
float pisctim6 = 0;

int pipautype = PSD_LABEL_PAU_LOC;  /*  Flag for Pause annotation  */
int pipaunub = 0;
int pipauval2 = 0;
int pipauval3 = 1;
int pipauval4 = 2;
int pipauval5 = 3;
int pipauval6 = 4;

int piswapfc = 0;/* Used to change the default (highlighted) opspf value */
int pipscoptnub = 1; /* Bit map of number of Prescan option buttons 
                        0=none, 1=autoshim, 2=phase corr */
int pidoshim = 0;    /* Flag to force autoshim */
int pidotg = 0;    /* Flag to force TG PSC entry point */
int xtg_disabled = 0;    /* Flag to disable XTG */

int pipscshimtgnub = 0; /* UI control to enable shim volume for local TG */

int pidyntgnub = 0; /* UI control to enable Dynamic TG */

/* Flow comp axis buttons */
int pifsefcnub = 0;  /* bitmask - buttons for flow comp axis selection */
int pideffcaxis = 0; /* Default value for flow comp direction */


int pidltime = 100000000; /* Time in us that scan allows for wave form 
                             download in TGT before time out error */

/* Cardiac heart rate buttons */
int pihrepnub=30;		/* Bitmask for hrep buttons */
int pihrepval2=4;		/* Button 2 value */
int pihrepval3=3;		/* Button 3 value */
int pihrepval4=2;		/* Button 4 value */
int pihrepval5=1;		/* Button 5 value */
int pihrepval6=9;		/* Button 6 value */

/* default arrhythmia rejection window */
int pidefarr = 20;

/* FastCINE number of phases buttons */
int pifcinenub    = 0; 
int pifcinedefval = 0;
int pifcineval2   = 0;
int pifcineval3	  = 0;
int pifcineval4	  = 0;

int piaphasenub    = 0;
int piaphasdefval  = 16;
int piaphaseval2   = 10;
int piaphaseval3   = 16;
int piaphaseval4   = 20;

/*  Cardiac Auto phase button */
int piautophasenub = 1; 

/* Cardiac Tagging buttons */
int pitagging      = 0; /* Cardiac Tagging Selection */
int pitagspcdefval = 0;
int pitagspcval2   = 0;
int pitagspcval3   = 0;
int pitagspcval4   = 0;

/* Pull-down values for Tagging angle */
int pitaganglenub      = 0; /* bitmask: 0=OFF, 1=Type-In, 2=Val1, 4=Val2, 8=Val3 */
float pitagangledefval = 45.0;
float pitagangleval2   = 0.0;
float pitagangleval3   = 45.0;
float pitagangleval4   = 90.0;
float pitagangleval5   = 0.0; /* not currently used */
float pitagangleval6   = 0.0; /* not currently used */

/* Screen control for cardiac gating */
int pitdel1nub = 7; /* Bitmask for Trigger Delay buttons */
int pitdel1type = PSD_LABEL_TD_DEFAULT;  /* text label for Trigger Delay button */
int pitrigwinnub = 63; /* Bitmask for Trigger Window buttons */
int pitseqnub = 7; /* Bitmask for Inter-Sequence Delay buttons */
int pitseqtype = PSD_LABEL_INTERSEQDELAY_DEFAULT;  /* text label for inter- sequence delay button */
int piphasenub = 3; /* Bitmask for Phase buttons */
int piphslnub = 2; /* Bitmask for Phases/Slices feedback fields */
int piviewseg = 0;  /* Field to prompt for views per segment field */
int pivpsdef=8;		/* default number of views per seg for fastcard */

int pitetr = 0;  /* Effective TR determined by PSD, used by resp trig screen */

int piautovoice = 1; /* flag for autovoice compatibility */

int pirtrigwinnub = 5; /* number of trigger window buttons */
int pirtwindefval = 30;
int pirtwinval2 = 10;
int pirtwinval3 = 20;
int pirtwinval4 = 30;
int pirtwinval5 = 40;
int pirtwinval6 = 50;

int pirtseqnub = 7;    /* inter-seq delay buttons (bitmap) */ 
int pirttseq;/* pi inter sequence delay time for resp trig */
int pirtait; /* pi avaiable imaging time for resp trig */
int pirtetr; /* pi effective tr for resp trig */
 
int pirtrepnub = 63; /* bit mask for resp rep buttons */
int pirtrepval2 = 5;
int pirtrepval3 = 4;
int pirtrepval4 = 3;
int pirtrepval5 = 2;
int pirtrepval6 = 1;
int pidefrtrep = 1;

int pirtpointnub = 30;
int pirtpointval2 = 10;
int pirtpointval3 = 20;
int pirtpointval4 = 30;
int pirtpointval5 = 40;
int pirtpointval6 = 50;

int pirtratenub = 1;

int pinavsltracknub = 0; /* Navigator slab/slice tracking support:    0 = off, 1 = on */
int pidefnavsltrack = 0;

int pinavautoaccwinnub = 0; /* Navigator auto acceptance window support: 0 = off, 1 = on */
int pidefnavautoaccwin = 1;

int pinavrrmeasnub = 0;  /* Navigator Resp Rate measurement support:  0 = off, 1 = on */
int pidefnavrrmeas = 0;

int pinavaccwinnub = 0; /* Bit mask for Navigator acceptance window */
int pinavaccwinval2 = 2;
int pinavaccwinval3 = 4;
int pinavaccwinval4 = 6;
int pidefnavaccwin = 2;

int pinavautotrigtimenub = 0; /* Bit mask for Navigator auto tirgger time */
int pinavautotrigtimeval2 = 5;
int pinavautotrigtimeval3 = 10;
int pinavautotrigtimeval4 = 20;
int pidefnavautotrigtime = 5;

int pinavpsctimenub = 0; /* Bit mask for Navigator prescan time */
int pinavpsctimeval2 = 5;
int pinavpsctimeval3 = 10;
int pinavpsctimeval4 = 20;
int pidefnavpsctime = 10;

int pinavrrmeastimenub = 0; /* Bit mask for Max RR Measurement time */
int pinavrrmeastimeval2 = 20;
int pinavrrmeastimeval3 = 40;
int pinavrrmeastimeval4 = 60;
int pidefnavrrmeastime = 20;

int pinavmaxintervalnub = 0; /* Bit mask for Max Navigator interval in Navigator gating*/
int pinavmaxintervalval2 = 100;
int pinavmaxintervalval3 = 200;
int pinavmaxintervalval4 = 500;
int pidefnavmaxinterval = 200;

int pinavtypenub = 0; /* Bit mask for Navigator type */
int pidefnavtype = 1;

int pinavpscpausenub = 1; /* Check box for pause after navigator prescan */
int pidefnavpscpause = 0;

int pinavsigenhancenub = 0; /* Check box for Navigator signal enhancement */
int pidefnavsigenhance = 1;

float pinavmaxrr = 20.0;  /* Maximum RR value for same #slices, #acqs, # of resp interval for RR measurement */
int pinavrrmeasmaxsl = 1; /* Max #slices available with measured resp rate */
int pinavrrmeasrtrep = 1; /* Min # Resp Intervals available with measured resp rate */
int pinavrradjust = 0; /* bit for parameter optimization selection for RR measurement*/
                       /* bit0-thickness, bit1-spacing, bit2-# of resp interval, bit3-manual selection */

int pivascop = 0; /* Set to 1 if flow suppression screen
		     required (i.e. phase contrast) */

int pizmult = 0;	/* Multi group capability for scan in fse-xl. */
int pimultigroup = 1; /* Multi group capability for scan. 1=on, 0 = off */
int pimultislab  = 0; /* Multi slab capability for scan. 1=on, 0=off */

/* bit maps for default selection on vascular enhancement screens */
int pidefproj = 5;     /* projections */
int pidefflax = 8;     /* flow axes selection */
int pidefaddimg = 8;   /* additional images */
int pidefflrc = 1;     /* flow recon type */

int pigradcoil = 1;          /* gradient shield mode: 0 = unshielded gradient
			  coil, 1 = shielded gradient coil */
float dfscale = 1.0;   /* Digital Filter Scale Factor */

/* Prescan button defaults */
int pipscdef = 1;  /* bitmask control for default backlighting of prescan
                      buttons */
 
/********************************************************/
/*   EPI DWI-TENSOR pi variables		        */
/********************************************************/
int pidifpage = 0; 	        /* Control of diffusion page and diffusion option */

int pidifaxnub = 31;	         /* diffusion direction variables */
char pidifaxval1[7] = "L/R";
char pidifaxval2[7] = "A/P";
char pidifaxval3[7] = "S/I";
char pidifaxval4[7] = "ALL";
char pidifaxval5[7] = "SLICE";
char pidifaxval6[7] = "TENSOR";

int pidiffproctype = 0;          /* Bitmask to show/hide automated DTI processing buttons */
int pidifnumdirsnub = 15;        /* Bitmask to show/hide DTI directions that can be chosen */
int pidifnumdirsdefval = 6;       
int pidifnumdirsval2 = 6;
int pidifnumdirsval3 = 15;
int pidifnumdirsval4 = 55;
int pidifnumt2nub = 15;          /* Bitmask to show/hide # of T2 images menu for DTI */
int pidifnumt2defval = 1;          
int pidifnumt2val2 = 1;
int pidifnumt2val3 = 2;
int pidifnumt2val4 = 4;

int pidefbval = 1000;		 /* b value variables       */
int pibvnub = 15;
int pibval2 = 500;
int pibval3 = 750;
int pibval4 = 1000;
 
int pidifrecnub = 1;		 /* recon option variables       */

char pidifrecval1[30] = "SAVE DIFFUSION IMAGES";
char pidfirecval2[30];
char pidfirecval3[30];
char pidfirecval4[30];
char pidfirecval5[30];

int pimintediflabel = 0; /* Label indicator: 0 - Optimize TE, 1 - Super G */
int pimintedifvis = 1;   /* Visibility of the "Optimize TE"/"Super G" button : 0 - invisible, 1 - visible */

int pimintedifnub = 1; /* Optimize TE button control in diffusion screen */
int pimintedifdef = 1; /* Default Optimize TE button control */

int piseparatesynbnub = 0; /* Separate Series for Synthetic DWI button control */

/* Number of b-values UI */
int pinumbnub = 63;
int pinumbval2 = 1;
int pinumbval3 = 5;
int pinumbval4 = 10;
int pinumbval5 = 20;
int pinumbval6 = 40;

/* Number of synthetic b-values UI */
int pinumsynbnub = 63;
int pinumsynbval2 = 0;
int pinumsynbval3 = 1;
int pinumsynbval4 = 2;
int pinumsynbval5 = 3;
int pinumsynbval6 = 4;

/* Number of NEX for T2 images UI */
int pidifnext2nub = 63;
float pidifnext2val2 = 1;
float pidifnext2val3 = 2;
float pidifnext2val4 = 4;
float pidifnext2val5 = 8;
float pidifnext2val6 = 16;

int pibvalstab = 1; /* control to turn on/off bval input table for diffusion */
int pisynbvalstab = 1; /* control to turn on/off syn bval input table for diffusion */
int pidifnextab = 1; /* control to turn on/off nex input table for diffusion */
float pidifavgnex = 1; /* Average number of NEX across b-values */

/* Bolus Chasing CVs - CMC */
int pimultistation = 0; /* Doing MultiStation? */
int piautostep = 0;     /* Doing AutoStep? */
int pisioverlap = 0;    /* S/I Overlap in mm. (percent from FOV) */

/* scan setup */
int pisetup = 1;

/* SAR reporting */
float picasar; /* coil specific */
float pipsar;  /* coil peak */
float piasar;  /* whole body */
float pihsar;  /* head */
float pitsar;  /* torso */
float piesar;  /* extremity */

/* B1 RMS reporting */
float pib1rms;

/* All img opts are ON by default.  Note that piimgoptval4
   has to be updated every time a new imaging option is added. */
int piimgoptval2 = 1073741823;
int piimgoptval3 = 1073741823;
int piimgoptval4 = 15; 

int pidixproc = 0; 

/* T2Map Advisory */
int piadvt2map = 0;

/* Table movement control variables
   0 uses default hardware settings */
int pitablemaxspeed = 0; /* um/sec   */
int pitablemaxaccel = 0; /* um/sec^2 */
int pitablemaxdecel = 0; /* um/sec^2 */

/********************************************************/
/*   MR-TOUCH pi variables		        */
/********************************************************/
int pitouch = 0;     /* Control of MR-Touch tab*/
int pitouchfreq = 0; /* MR-TOUCH Driver Freq */
int pitouchamp = 0; /* MR-TOUCH Driver Amplitude */
int pitouchcyc = 0; /* MR-TOUCH Driver Cycle per Trigger */
int pitouchtphases = 0; /* MR-TOUCH Temporal Phases */

int pitouchfreqnub = 7; /* MR-TOUCH Driver Freq */
int pitouchfreqval2 = 40;
int pitouchfreqval3 = 60;
int pitouchfreqval4 = 80;
int pideftouchfreq = 60;

int pitouchmegfreqnub = 7; /* MR-Touch Motion Encoding Gradient Freq */
int pitouchmegfreqval2 = 60;
int pitouchmegfreqval3 = 120;
int pitouchmegfreqval4 = 150;
int pideftouchmegfreq = 60;

int pitouchampnub = 7; /* MR-TOUCH Driver Amplitude */
int pitouchampval2 = 30;
int pitouchampval3 = 50;
int pitouchampval4 = 80;
int pideftouchamp = 50;

int pitouchcycnub = 7; /* MR-TOUCH Driver Cycle per Trigger */
int pitouchcycval2 = 3;
int pitouchcycval3 = 60;
int pitouchcycval4 = 120;
int pideftouchcyc = 60;

int pitouchtphasesnub = 7; /* MR-TOUCH Temporal Phases */
int pitouchtphasesval2 = 4;
int pitouchtphasesval3 = 6;
int pitouchtphasesval4 = 8;
int pideftouchtphases = 4;

int pitouchaxnub = 15; /* MR-TOUCH MEG direction */
int pitouchaxval2 = 1;
int pitouchaxval3 = 2;
int pitouchaxval4 = 4;
int pitouchaxval5 = 7;
int pideftouchax = 4; /*only X/Y/Z displayed in default*/

float pitouchmenc = 0.0; /* MR-Touch MENC factor */

/* 3D ASL post label delay UI */
int pipostlabeldelaynub = 0;
float pipostlabeldelay2 = 1025.0;
float pipostlabeldelay3 = 1525.0;
float pipostlabeldelay4 = 2025.0;
float pipostlabeldelay5 = 2525.0;
float pipostlabeldelay6 = 3025.0;
float pidefpostlabeldelay = 1525.0;

/* For Phase Image UI element */
int piphaseimagenub = 0;
int piphaseimageval2 = PSD_PHASEIMAGE_NORMAL; 
int piphaseimageval3 = PSD_PHASEIMAGE_INVERT;
int piphaseimageval4 = PSD_PHASEIMAGE_OFF;

/* In-Plane Res advisory field support */
int piinplaneres = 0;
float ihinplanexres = 1.0;
float ihinplaneyres = 1.0;

/* RBW per pixel advisory field support */
int pirbwperpix = 0;
float ihrbwperpix = 1.0;

/* ESP advisory field support */
int piesp = 0;
float ihesp = 1.0;

/* Enable series per phase for multi-phase */
int piserperph = 0;

/* Auto Protocol Optimization UI */
int piapx = 0;
float pitbh = 0.0;
float pitbhlast = 0.0;
int pinbh = 0;
int pinbhnub = 0;
int pidefnbh = 0;
int piapxprfstepnub = 0;
int piapxprfstepval1 = 2000000; /* us */
int piapxprfstepval2 = 5000000; /* us */
int piapxprfres = 0;
int piapxprfacc = 0;

/* config file variables */
/* ------------------------------ */

/* Table Movement hardware capabilities
   Use to limit pitablemax* variables
   Initialize to zero to use default hardware settings */
int cftablemaxspeed = 0; /* um/sec   */
int cftablemaxaccel = 0; /* um/sec^2 */
int cftablemaxdecel = 0; /* um/sec^2 */

float cflinfrq = 60.0;
float cfhpdl = 800.0;
float cfbpdl = 5000.0;
float cfhpsl = 350.0;
float cfbpsl = 4000.0;
float cfhpv = 3000.0;
float cfbpv = 6000.0;
float cfhqpc = 0.15;
float cfbqpc = 0.7;
float cfhllr = 857.0;
float cfbllr = 394.0;
float cfloss = 1.0715;

int cfbwmin = 2;
int cfbwmin1 = 2;		/* First echo minimum bw for 0.5 T (in kHz) */

/* SAR Limits */
float cfmaxave = 2.0;        /* Operational whole body average SAR limit */
float discretionaryave = 2.0;  /* Discretionary whole body average SAR limit */
float cfmaxavepm = 2.0;      /* Regulatory whole body average SAR limit */
float cfmaxhave = 3.2;       /* Regulatory head average SAR limit */
float discretionaryhave = 3.2; /* Discretionary head average SAR limit */
float cfmaxextremity = 10.0; /* Extremity infinitesmial mass SAR limit */
float cfmaxcave = 3.2;       /* Coil average SAR limit */
float cfmaxpeak = 10.0;      /* Head/Body spatial peak-average SAR limit */
float cfmaxepeak = 20.0;     /* Spatial peak-average extremity SAR limit */
float cfmaxcpeak = 10.0;     /* Coil spatial peak-average SAR limit */

/* Derating factor for SAR limit in Burst Mode */
float cfderatingFactorRTSAR = 1.0;

float discretionaryPeakB1 = 30.0; /* Discretionary Peak B1 Limit */
float discretionaryB1rms = 3.2;   /* Discretionary B1 RMS Limit */

float   maxSeriesTime = 6E9;/* Maximum series time */ 

/* Available BAM
   Initialize to 1 ICN BAM (7476 MiB) rounded down to the nearest MB
   Actual value populated by scn during prescription */
float cftpssize = 7.839E9;

int cftpsnproc = 4;
/* Deprecated */
int cftpsproctype = 1;

/* Pass size in bytes for a single receiver */
n64 rhrawsize = 10000ULL;

/* Available disk space in bytes for Acquisition to Disk Feature */
n64 cfacqtodisksize = 75161927680ULL; /* 75161927680  = 70 GB, ~ size of disk */

/* Maximum exciter hardware attenuation value */
int cfrfMaxAttenuation = 400;

int cfdbmax = 100;
int cfbbmod = 0;
int cftrnew = 0;
int cfrecvst = 0;
int cfrecvend = 0;

/* Gradient amplifiers
 * 8603
 * 8604
 * 8607
 * 8645
 * 8250 - Analogic single for VMX 
 * 8251 - Analogic twin for VMX SR40
 * 9090 - YMS HDU for Profile system
 * 8651 - Analogic SGD Hi Slew
 * 8280 - Analogic SGD Base
 * 8915 - ACGD Hi Slew
 * 8905 - ACGD Lite 
 * 8925 - ACGD Pro
 * 8290 - MFO, Analogic SGD Base
 * 8916 - HFD
 * 8917 - HFD-S
 * 8295 - MFO4, Profile5  Analogic
 * 8918 - Dual HFD
 * 8919 - XFD
 * 8920 - XGD
 * 8921 - XG2
 * 5550 - SSSD
 */
int cfgradamp = 8920;   /* Indicate gradient amplifier type */

int cfhtdel = 10000;    /* Fixed hardware trigger delay in us */
int cfcftdel = 28000;   /* cine filter trigger delay in us */
float cfcgain = 1;      /* coil recon gain */

/* config CVs for new 0.5T RF amp/Power mon, 5/18/93 */
int cfrfrapb = 16000;   /* Rated Output Power(body), in unit of Watt */
int cfrfraph = 2000;    /* Rated Output Power(head), in unit of Watt */
int cfrfraps = 2000;    /* Rated Output Power(spectro), in unit of Watt */
int cfrfrapcw = 100;    /* Rated Output Power(CW), in unit of Watt */
int cfrfmapb = 1000;    /* Maximum Average Power(body), in unit of Watt */
int cfrfmaph = 100;     /* Maximum Average Power(head), in unit of Watt */
int cfrfmaps = 100;     /* Maximum Average Power(spectro), in unit of Watt */
float cfrfmpeb = 60.0;  /* Maximum Pulse Energy(body), in unit of J */
float cfrfmpeh = 6.0;   /* Maximum Pulse Energy(head), in unit of J */
float cfrfmpes = 6.0;   /* Maximum Pulse Energy(spectro), in unit of J */
int cfrfmpwb = 20000;   /* Maximum Pulse Width(body), in unit of us */
int cfrfmpwh = 20000;   /* Maximum Pulse Width(head), in unit of us */
int cfrfmpws = 20000;   /* Maximum Pulse Width(spectro), in unit of us */
float cfrfmdcb = 0.60;  /* Maximum Duty Cycle(body) */
float cfrfmdch = 0.60;  /* Maximum Duty Cycle(head) */
float cfrfmdcs = 0.60;  /* Maximum Duty Cycle(spectro) */
int cfpwrmontyp = PMTYP_UPMAVERAGE; /* Power Monitor type */
int cfpwrmonreflmeas = 1;/* Power Monitor reflection: 0=PM does not measure refl power,
                                                        1=PM does measure refl power */
int cfpsdgraddly = 120; /* Gradient system delay: default to 120us for 0.5T*/
int cfpsdrfdly = 56;    /* rf system delay: default to 56us */
int cfpsdrfdlyx = 56;   /* rf system delay in x dir */
int cfpsdrfdlyy = 56;   /* rf system delay in y dir */
int cfpsdrfdlyz = 56;   /* rf system delay in z dir */
int cfxrdelay = 180;    /* group delay in x dir for spiral */
int cfyrdelay = 180;    /* group delay in y dir for spiral */
int cfzrdelay = 180;    /* group delay in z dir for spiral */

/*more config file CVs to support vmx/vectra electronics */
int cfcoilshld = 0;  /* Indicates if a system has switchable grad shield:
			0=Not switchable, 1=switchable */
int cfrfunblank;     /* unblank time for rf amplifier */


/************************************
following parameters are new for 5.5
************************************/

float cfxfa = 194.0;
float cfxcc = 100.0;

float cfyfa = 194.0;
float cfycc = 100.0;

float cfzfa = 194.0;
float cfzcc = 100.0;

int cfxgram = PSD_GRAM1;    /* GRAM: 0 = no gram, 1 = gram-1 2 = gram-2 */
int cfygram = PSD_GRAM1;
int cfzgram = PSD_GRAM1;
int cfxasm = YES;    /* ASM present */
int cfyasm = YES;
int cfzasm = YES;
int cfxgasm = NO;    /* GASM present */
int cfygasm = NO;
int cfzgasm = NO;
int cfxseries = NO;  /* Axis in series */
int cfyseries = NO;
int cfzseries = NO;
int cfxnumpower = 1; /* Number of power modules for gradient */
int cfynumpower = 1;
int cfznumpower = 1;

int cftuning = GRAM_TUNE_ANALOG;  /* GRAM tuning board type */
 
int cfrealtime = PSD_ON; /* real-time monitoring */
  
int cfcompress = 100;  /* compression factor from config file. If 100
                          then don't set RHRCCOMP in rhrcctrl */
/* Patient dB/dt exposure limitations */
float cfdbdtts = 0.0;    /* dB/dt limit (Tesla/sec) */

/* SAR/dbdt changes for E3 */

float cfdbdtper = 100.0;    /* dB/dt limit (percent of limit) */
float cfdbdtper2 = 100.0;   /* secondary dB/dt limit (percent of limit) */

float pidbdtts = 0.0;     /* dB/dt value (Tesla/sec) */
float pidbdtper = 0.0;    /* dB/dt value (percent of limit) */
int cfgovbody = IEC_BODY;  /* governing body, e.g., FDA, IEC, MHW */

/* ..... XRMB (start) */

int cfgcoiltype   = PSD_XRMB_COIL; /* change default coil to XRMB */
int cfsrmode      = PSD_SR200;     /* change default slew rate to 200 */

float cfgpeakirms = 620.0; /* Peak rms current for gradient coil (Amps) */
float cfgcontirms = 256.0; /* Continuous rms current for gradient coil (Amps) */
float cfgburstime = 2.0;   /* longest burst at peak rms current (minutes) */

float cfxirms = 256.0;    /* RMS current, X driver (Amps) */
float cfyirms = 256.0;    /* RMS current, Y driver (Amps) */
float cfzirms = 256.0;    /* RMS current, Z driver (Amps) */

float cfxipeak = 620.0;   /* Peak current ouput, X driver (Amps) */
float cfyipeak = 620.0;   /* Peak current ouput, Y driver (Amps) */
float cfzipeak = 620.0;   /* Peak current ouput, Z driver (Amps) */

int cfrmp2xfs = 248;
int cfrmp2yfs = 248;
int cfrmp2zfs = 248;

int cffall2x0 = 248;
int cffall2y0 = 248;
int cffall2z0 = 248;

float cfxfs = 5.0;
float cfyfs = 5.0;
float cfzfs = 5.0;

int cfxfull = 31000;   /* Default "full" values are changed to 31000 for XGD driver */
int cfyfull = 31000;   /* The default will be same for both 1.5T and 3.0T */
int cfzfull = 31000;

float cfxbeta = 1.0;
float cfybeta = 1.0;
float cfzbeta = 1.0;

/* ..... XRMB (end) */

/* Gradient peak capability start */
float cfpeakFSAmp = 3.3;  /* peak grdient amplitude in G/cm */
int cfpeakRiseTime = 276; /* gradient rise time to reach peak gradient amplitude in uS */
int cfpeakFallTime = 276; /* gradient fall time to reach 0 G/cm from peak gradient amplitude in uS */
int cfpeakSRMode = 120;   /* peak slew rate in T/m/sec */
/* Gradient peak capability end */

float cfxamptran = 100.0;  /* Amp transition current, X driver (kA/sec) */
float cfyamptran = 100.0;  /* Amp transition current, Y driver (kA/sec) */
float cfzamptran = 100.0;  /* Amp transition current, Z driver (kA/sec) */

float cfxiavrgabs = 100.0; /*Average absolute value current, X driver (Amps)*/
float cfyiavrgabs = 100.0; /*Average absolute value current, Y driver (Amps)*/
float cfziavrgabs = 100.0; /*Average absolute value current, Z driver (Amps)*/

float cfxirmspos = 100.0;  /* Positive RMS current, X driver (Amps) */
float cfyirmspos = 100.0;  /* Positive RMS current, Y driver (Amps) */
float cfzirmspos = 100.0;  /* Positive RMS current, Z driver (Amps) */

float cfxirmsneg = 100.0;  /* Negative RMS current, X driver (Amps) */
float cfyirmsneg = 100.0;  /* Negative RMS current, Y driver (Amps) */
float cfzirmsneg = 100.0;  /* Negative RMS current, Z driver (Amps) */

float cfxpwmdc = 0.2;      /* Pulse width modulation duty cycle, X driver */
float cfypwmdc = 0.2;      /* Pulse width modulation duty cycle, Y driver */
float cfzpwmdc = 0.2;      /* Pulse width modulation duty cycle, Z driver */

/* GRAM freewheel mode slew rates */
int cfrmp2xfsfw = 4200;
int cfrmp2yfsfw = 4200;
int cfrmp2zfsfw = 4200;
int cffall2x0fw = 4200;
int cffall2y0fw = 4200;
int cffall2z0fw = 4200;

/* Distances from isocenter where dB/dt in measured, physical X, Y, & Z axes */
float cfdbdtdx = 33.3;  /* centimeters */
float cfdbdtdy = 33.3;
float cfdbdtdz = 33.3;

/* keys to determine whether zoom gradient limitations will be applied (July 2001) */
int cfzoomlim_fov = 1;
int cfzoomlim_ofc = 1;
int cfzoomlim_ctl = 1;

/* bitmask filled in by scan: 0 = freewheel or no gram,
   1 = active gram.  Bit 0 = X, Bit 1 = Y, Bit 2 = Z */
int sigrammode = XGRAM + YGRAM + ZGRAM;

float cfsrmodeconv = 77.0; /* maximum slew rate limit for conventional scans */
float cfsrmodeact = 77.0;  /* actual slew rate limit to use for conventional scans */
int   cfopenmagnet = 0;    /* Open Magnet type: 0=standard, 1=iMri*/
float cftableanglex = 0.0; /* table angle in axis x - for iMR - nMR*/
float cftableangley = 0.0; /* table angle in axis y - for iMR - nMR*/
float cftableanglez = 0.0; /* table angle in axis z - for iMR - nMR*/
float cftableoffsetx = 0.0; /* table offset in axis x - for nMR */
float cftableoffsety = 0.0; /* table offset in axis y - for nMR */
float cftableoffsetz = 0.0; /* table offset in axis z - for nMR */

/* Configuration variables to support SGD gradient heating and
   increased CERD receiver bandwidth */
float cfxmgrampow = 1500.0;
float cfymgrampow = 1500.0;
float cfzmgrampow = 1500.0;
float cfsdlim = 0.60;
float cfxrsat = 0.022;
float cfyrsat = 0.022;
float cfzrsat = 0.022;
float cfxvsat = 4.8;
float cfyvsat = 4.8;
float cfzvsat = 4.8;
float cfgpmpow =18900;
float cfmgps = 9000.0;
float cfvhr = 17.0;
float cfrcoil = 0.35;
float cflcoil = 1.4;
float cfraccoil = 152.0;
float cfpmgs = 3000;
float cfrhr = 0.1;
float cfxvpwm = 35.0;
float cfyvpwm = 35.0;
float cfzvpwm = 35.0;
float cfmaxbw = 250.0;  /* Max RBW of the system */
int cfnumrcvrs = 4;     /* Max number of receivers for a system */

/* Faster prescan cv */
int cffastprescan = 1;

/* XRMB and XGD model parameters read from GradientConfig.cfg */

float cfcoilDC_gain = 124.0;
float cfcoilDC_Rx = 0.097;
float cfcoilDC_Ry = 0.097;
float cfcoilDC_Rz = 0.105;
float cfcoilDC_Lx = 0.000767;
float cfcoilDC_Ly = 0.000782;
float cfcoilDC_Lz = 0.000782;

float cfcoilAC_gain = 124.0;
float cfcoilAC_power = 18000.0;
float cfcoilAC_power_1axis = 10000.0;
float cfcoilAC_power_burst = 36000.0; /* Burst Mode */
float cfcoilAC_temp_base_burst = 20.0; /* Burst Mode */
float cfcoilAC_temp_limit_burst = 56.0; /* Burst Mode */
float cfcoilAC_timeconstant_burst = 240.0; /* Burst Mode */
float cfcoilAC_RxA = 0.097;
float cfcoilAC_RyA = 0.097;
float cfcoilAC_RzA = 0.105;
float cfcoilAC_RxB = 2.5;
float cfcoilAC_RyB = 2.5;
float cfcoilAC_RzB = 0.2;
float cfcoilAC_RxC = 8.5;
float cfcoilAC_RyC = 8.5;
float cfcoilAC_RzC = 10.15;

float cfcoilAC_lumpR1x = 0.140;
float cfcoilAC_lumpR1y = 0.139;  
float cfcoilAC_lumpR1z = 0.150;
float cfcoilAC_lumpR2x = 22.3;
float cfcoilAC_lumpR2y = 21.6;
float cfcoilAC_lumpR2z = 37.3;
float cfcoilAC_lumpR3x = 22.3;
float cfcoilAC_lumpR3y = 21.6;
float cfcoilAC_lumpR3z = 37.3;
float cfcoilAC_lumpR4x = 22.3;
float cfcoilAC_lumpR4y = 21.6;
float cfcoilAC_lumpR4z = 37.3;
float cfcoilAC_lumpR5x = 221.0;
float cfcoilAC_lumpR5y = 186.0;
float cfcoilAC_lumpR5z = 214.0;
float cfcoilAC_lumpL1x = 0.000528;
float cfcoilAC_lumpL1y = 0.000528;
float cfcoilAC_lumpL1z = 0.000496;
float cfcoilAC_lumpL2x = 0.000528;
float cfcoilAC_lumpL2y = 0.000528;
float cfcoilAC_lumpL2z = 0.000496;
float cfcoilAC_lumpL3x = 0.000528;
float cfcoilAC_lumpL3y = 0.000528;
float cfcoilAC_lumpL3z = 0.000496;
float cfcoilAC_lumpL4x = 0.00272;
float cfcoilAC_lumpL4y = 0.00297;
float cfcoilAC_lumpL4z = 0.00464;
float cfcoilAC_lumpCx = 0.00001;
float cfcoilAC_lumpCy = 0.0002;
float cfcoilAC_lumpCz = 0.0002;
float cfcoilAC_lumpRcable = 16.28;
float cfcoilAC_lumpRoutputFilter = 0.0048;
float cfcoilAC_lumpLoutputFilter = 0.00138;
float cfcoilAC_timeres = 48.0;
int cfcoilAC_fftpoints = 65536;
float cfcoilAC_xgain = 99.90;
float cfcoilAC_ygain = 99.40;
float cfcoilAC_zgain = 89.52;
float cfcoilQAC_A0 = 6.3623;
float cfcoilQAC_A1 = 11.310;
float cfcoilQAC_A2 = 7.8672;
float cfcoilQAC_A3 = 2.4153;
float cfcoilQAC_A4 = 0.2774;
float cfcoilQAC_A5 = 0.0;
float cfcoilQAC_A6 = 0.0;
float cfcoilQAC_Xcoef = 1.0;
float cfcoilQAC_Ycoef = 0.9303;
float cfcoilQAC_Zcoef = 0.8667;
float cfcoilQAC_maxtime = 20000.0;
float cfcoilQAC_const = 0.322064;
float cfcoilQAC_heat_maxtime = 4660.0;
float cfcoilQAC_heat_slope = 0.0321;
float cfcoilQAC_heat_const = 1.1441;
float cfcoil_irmslimit_total = 140.0;

float cfxgd_timeres = 128.0;
float cfxgd_cableirmslimit  = 270.0;
float cfxgd_cableirmslimit_burst = 340.0; /* Burst Mode */
float cfxgd_cabletimeconstant_burst = 100.0; /* Burst Mode */
float cfxgd_busbartemplimit = 91.0;
float cfxgd_chokepowerlimit = 0.0;

float cfxps_avglvpwrlimit = 18000.0;
float cfxps_avghvpwrlimit = 26000.0;
float cfxps_avgpdulimit = 50000.0;
float cfxgd_IGBTtemplimit = 125.0;
float cfxfd_power_limit = 8.5;
float cfxfd_temp_limit = 8.5;

int cfecc_modeling = 0; 
int cfeccupdatetime = 24.0;
float cfecc_xtau1 = 1.0;
float cfecc_xtau2 = 1.0;
float cfecc_xtau3 = 1.0;
float cfecc_ytau1 = 1.0;
float cfecc_ytau2 = 1.0;
float cfecc_ytau3 = 1.0;
float cfecc_ztau1 = 1.0;
float cfecc_ztau2 = 1.0;
float cfecc_ztau3 = 1.0;
float cfecc_xalpha1 = 0.0;
float cfecc_xalpha2 = 0.0;
float cfecc_xalpha3 = 0.0;
float cfecc_yalpha1 = 0.0;
float cfecc_yalpha2 = 0.0;
float cfecc_yalpha3 = 0.0;
float cfecc_zalpha1 = 0.0;
float cfecc_zalpha2 = 0.0;
float cfecc_zalpha3 = 0.0;

int cfps_avgpwrLimit = 1000;
int cfps_avgpwrLimit_total = 1000;
int cfps_pkpwrLimit = 1000;
int cfps_pkpwrLimit_total = 1000;
int cfpdu_avgpwrLimit = 1000;
int cfpdu_pkpwrLimit = 1000;
int cfpdu_breakercurrentLimit = 10;
int cfcooling_model = 0;
int cfcooling_sysLimit = 1;
int cfcooling_coilLimit = 1;
int cfcooling_ccuLimit = 1;
int cfxfmr_rmsLimit = 1;
int cfresist_wattLimit = 1;
int cfcoilACpower_axisPer = 80;
int cfcoil_vrmsLimit = 1000;

/* Maximum allowed system FOV from MRconfig */
float cfsystemmaxfov = 500.0;

/*
 * Added 'cfcerdtype' config variable to indicate type of CERD.
 * The value will be obtained from the MRconfig.cfg file which contains a
 * 'cerdType' entry.
 * 
 * cerdType = "n01" -> standard CERD in slot 1
 *            "n02" -> Universal CERD in slot 1
 *            "n21" -> standard CERD in slot 1, Universal CERD in slot 2
 *            "n22" -> Universal CERD in slots 1 and 2 (dual UCERD)
 *    where n = 0 for Milwaukee, 1 for YMS
 * 
 */
int cfcerdtype = 1;

/* define a cfpicture for "Picture This". */
int cfpicture = 0;

float cfspectroPMcal = 0.1;  /* spectro amp/power monitor coupling cal. */


int rec_mode = 0;

int opnewgeo = 1;

/* Used to create simulation matrices in obloptimize */
/* If set equal to 1 obloptimize will create rotation matrices */
/*                 0 the rotation matrices from scan will be used */
int simulation = 0;

/* Spectroscopy interface variables */
int csi_grid_on = 0;  /*csi grid 0=off, 1=probeSI, 2=research mode*/
int pispecprescan = 0; /*Spectro Prescan button 0=off or 1=on*/

/* *****************
   Definitions for picsimode
   -------------------------
   PICSI_CALC_3D          0
   PICSI_CALC_1SLICE      1
   PICSI_CALC_RXEXACT     2
   PICSI_CALC_3D1SLICE    3
   PICSI_FREEFORM_GRX     4
   PICSI_CALDATA_REQ      8
   **************************** */
int picsimode = PICSI_CALC_1SLICE;

int rhrlfov = 0;
int rhapfov = 0;
int rhsifov = 0;

int pitracqnub = 0;
int pitracqval2 = 0;
int pitracqval3 = 0;
int pitracqval4 = 0;
int pitracqval5 = 0;
int pitracqval6 = 0;

/* Current application will use fast (SSP-based) coil switching */
int picoilfastswitchrequired = 0;

/*************************************************************************
 * coilInfo structure filled by Scan with coil related information.      *
 * volRecCoilInfo structure filled by Scan with coil related information *
 *   for the volume receive coil related to each element of CoilInfo.    *
 * fullRecCoilInfo structure filled by Scan with full coil related       *
 *   information for full rec coil mode.                                 *
 * txCoilInfo structure filled by Scan with transmit coil related        *
 *   information.                                                        *
 * The COIL_INFO and TX_COIL_INFO is defined                             * 
 *   in /vobs/lx/include/CoilParameters.h                                *
 *                                                                       *
 * Initialize coil information to 1.5T XRMB BODY coil to allow PSDs      *
 *   to evalute until Scan sends the values for the current coil.        *
 *************************************************************************/

COIL_INFO coilInfo[MAX_COIL_SETS] = {
    {"GE_BODY",     /* coilName */
     0,             /* txIndexPri */
     TX_INDEX_NONE, /* txIndexSec */
     RX_COIL_BODY,  /* rxCoilType */
     0,             /* hubIndex */
     PSD_PROTON,    /* rxNucleus */
     0,             /* aps1Mod */
     1,             /* aps1ModPlane */
     0,             /* coilSepDir */
     10000,         /* assetCalThreshold */
     FOV_MAX,       /* aps1ModFov */
     5,             /* aps1ModSlThick */
     0,             /* aps1ModPsTloc */
     0,             /* aps1ModPsRloc */
     FOV_MAX,       /* autoshimFov */
     FOV_MAX,       /* assetCalMaxFov */
     3.6,           /* maxB1Rms */
     0,             /* pureCompatible */
     10.0,          /* pureLambda */
     0.0,           /* pureTuningFactorSurface */
     1.0,           /* pureTuningFactorBody */
     1,             /* numChannels */
     -1.0}          /* switchingSpeed */
};

COIL_INFO fullRecCoilInfo[MAX_COIL_SETS] = {
    {"GE_BODY",     /* coilName */
     0,             /* txIndexPri */
     TX_INDEX_NONE, /* txIndexSec */
     RX_COIL_BODY,  /* rxCoilType */
     0,             /* hubIndex */
     PSD_PROTON,    /* rxNucleus */
     0,             /* aps1Mod */
     1,             /* aps1ModPlane */
     0,             /* coilSepDir */
     10000,         /* assetCalThreshold */
     FOV_MAX,       /* aps1ModFov */
     5,             /* aps1ModSlThick */
     0,             /* aps1ModPsTloc */
     0,             /* aps1ModPsRloc */
     FOV_MAX,       /* autoshimFov */
     FOV_MAX,       /* assetCalMaxFov */
     3.6,           /* maxB1Rms */
     0,             /* pureCompatible */
     10.0,          /* pureLambda */
     0.0,           /* pureTuningFactorSurface */
     1.0,           /* pureTuningFactorBody */
     1,             /* numChannels */
     -1.0}          /* switchingSpeed */
};

COIL_INFO volRecCoilInfo[MAX_COIL_SETS] = {
    {"GE_BODY",     /* coilName */
     0,             /* txIndexPri */
     TX_INDEX_NONE, /* txIndexSec */
     RX_COIL_BODY,  /* rxCoilType */ 
     0,             /* hubIndex */
     PSD_PROTON,    /* rxNucleus */
     0,             /* aps1Mod */
     1,             /* aps1ModPlane */
     0,             /* coilSepDir */
     10000,         /* assetCalThreshold */
     FOV_MAX,       /* aps1ModFov */
     5,             /* aps1ModSlThick */                      
     0,             /* aps1ModPsTloc */                       
     0,             /* aps1ModPsRloc */                       
     FOV_MAX,       /* autoshimFov */                         
     FOV_MAX,       /* assetCalMaxFov */                      
     3.6,           /* maxB1Rms */
     0,             /* pureCompatible */
     10.0,          /* pureLambda */
     0.0,           /* pureTuningFactorSurface */
     1.0,           /* pureTuningFactorBody */
     1,             /* numChannels */
     -1.0}          /* switchingSpeed */
};

TX_COIL_INFO txCoilInfo[MAX_TX_COIL_SETS] = {
    {0,                     /* coilAtten */
     TX_COIL_BODY,          /* txCoilType */
     TX_POS_BODY,           /* txPosition */
     PSD_PROTON,            /* txNucleus */
     TX_AMP_NB,             /* txAmp */
     25.0,                  /* maxB1Peak */
     8.0,                   /* maxB1Squared */
     1.23,                  /* cableLoss */
     0.954,                 /* coilLoss */
     {0.326, -6.05E-3, 4.05E-5, -1.11E-7, 1.08E-10, 0.0, 1.0, 2.0, 3.0, 4.0}, /* reflCoeffSquared */
     0.0,                   /* reflCoeffMassOffset */
     0.0,                   /* reflCoeffCurveType */
     {1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}, /* exposedMass */
     {1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0}, /* lowSARexposedMass */
     {0.0026, 0.0, 0.0, 0.0, 0.0, 0.0, 1.48, 0.0, 0.0, 0.0, 0.0, 0.0}, /* jstd */
     {0.00124, 0.0, 0.0, 0.0, 0.0, 0.0, 1.48, 0.0, 0.0, 0.0, 0.0, 0.0}, /*  mean jstd */
     1.96}                   /* number of standard deviations */
};

/***************************************************************
 * Narrowband and broadband local transmit select switch setting.
 * CIM calculates setting, PSD sets in entry point table, and 
 * SCP applies the setting in the hardware.  The valid values
 * are defined in lx/include/coilIdDefs.h
 ***************************************************************/ 
int cfNbTransmitSelect = TRANSMIT_SELECT_NONE; 
int cfBbTransmitSelect = TRANSMIT_SELECT_NONE;
int cfMnsConverterSelect = MNS_CONVERTER_SELECT_NONE;

/* Multi-b-value: b-values and NEX for each T2 image */
float bvalstab[MAX_NUM_BVALS] = {
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000,
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000};

float synbvalstab[MAX_NUM_SYNBVALS] = {
    1000,1000,1000,1000,1000,1000,1000,1000,1000,1000};

float difnextab[MAX_NUM_BVALS] = {
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};

float difnextab_opt[MAXOPTSET][MAX_NUM_BVALS] = {
   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
   {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}
};

/* MAVRIC-SL Arrays*/
float rhrcmavric_b0_offset[MAVRIC_MAX_BINS] = {
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000,
    1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000};
/* End MAVRIC-SL*/


/* 3dASL arrays */
short aslnextab[MAX_ASL_PHASES] = {-1, -1, -1};  /* NEX table */
short aslimgtab[MAX_ASL_PHASES] = {-1, -1, -1}; /* Image type debale: 1 = PW, 2 = PD, 3 = T1 */

/* Parallel Imaging UI */
int   piaccelscrn = 0;                 /* For controlling acceleration tab */
float piaccel_total_stride = 1.0;      /* Total Acceleration - If needed */     

float cfaccel_ph_maxstride = 1.0;      /* Coil specified limit in phase direction.*/
float cfaccel_sl_maxstride = 1.0;      /* Coil specified limit in slice direction.*/
float cfaccel_cs_maxstride = 1.0;      /* Application specified limit for CS factor.*/

float accel_ph_stride = 1.0;           /* Actual ph outer acceleration factor (PSD)*/
float accel_sl_stride = 1.0;           /* Actual sl outer acceleration factor (PSD)*/
float accel_ph_defstride = 2.0;        /* Default (initial) phase acceleration.*/
float accel_sl_defstride = 1.0;        /* Default (initial) slice acceleration.*/

float piaccel_ph_stride = 1.0;         /* Displayed slice acceleration. */
int   piaccel_phnub = 0;               /* Bitmask for phase acceleration menu.*/
int   piaccel_phedit = 1;              /* Ph UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
float piaccel_phval2 = 1.0;            /* Phase acceleration menu item 2 */
float piaccel_phval3 = 1.0;            /* Phase acceleration menu item 3 */
float piaccel_phval4 = 1.0;            /* Phase acceleration menu item 4 */
float piaccel_phval5 = 1.0;            /* Phase acceleration menu item 5 */
float piaccel_phval6 = 1.0;            /* Phase acceleration menu item 6 */

float piaccel_sl_stride = 1.0;         /* Displayed slice acceleration */
int   piaccel_slnub = 0;               /* Bitmask for slice acceleration menu.*/
int   piaccel_sledit = 1;              /* Slice UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
float piaccel_slval2 = 1.0;            /* Slice acceleration menu item 2 */
float piaccel_slval3 = 1.0;            /* Slice acceleration menu item 3 */
float piaccel_slval4 = 1.0;            /* Slice acceleration menu item 4 */
float piaccel_slval5 = 1.0;            /* Slice acceleration menu item 5 */
float piaccel_slval6 = 1.0;            /* Slice acceleration menu item 6 */

float piaccel_t_stride = 1.0;          /* Displayed temporal acceleration */
int   piaccel_tnub = 0;                /* Bitmask for temporal acceleration menu.*/
int   piaccel_tedit = 1;               /* Temporal UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
float piaccel_tval2 = 1.0;             /* Temporal acceleration menu item 2 */
float piaccel_tval3 = 1.0;             /* Temporal acceleration menu item 3 */
float piaccel_tval4 = 1.0;             /* Temporal acceleration menu item 4 */
float piaccel_tval5 = 1.0;             /* Temporal acceleration menu item 5 */
float piaccel_tval6 = 1.0;             /* Temporal acceleration menu item 6 */

float avminaccel_ph_stride = 1.0;      /* Advisory min phase acceleration.*/
float avminaccel_sl_stride = 1.0;      /* Advisory min slice acceleration.*/
float avminaccel_t_stride = 1.0;       /* Advisory min temporal acceleration.*/
float avmaxaccel_ph_stride = 1.0;      /* Advisory max phase acceleration.*/
float avmaxaccel_sl_stride = 1.0;      /* Advisory max slice acceleration.*/
float avmaxaccel_t_stride = 1.0;       /* Advisory max temporal acceleration.*/

float avminaccel_mb_stride = 1.0;       /* Advisory min multiband acceleration.*/
float avmaxaccel_mb_stride = 1.0;      /* Advisory max multiband acceleration.*/

float avminaccel_cs_stride = 1.0;       /* Advisory min CS acceleration.*/
float avmaxaccel_cs_stride = 1.0;      /* Advisory max CS acceleration.*/

float avminaccel_kt_stride = 1.0;      /* Advisory min slice acceleration.*/     
float avmaxaccel_kt_stride = 9.0;      /* Advisory max temporal acceleration.*/

float piaccel_ph_step = 0.0;          /* Phase Acceleration Step Size */
float piaccel_sl_step = 0.0;          /* Slice Acceleration Step Size */
float piaccel_t_step = 0.0;           /* Temporal Acceleration Step Size */
int   piaccel_mb_step = 0;            /* Multiband Acceleration Step Size */
float piaccel_cs_step = 0.0;          /* Compressed Sensing Acceleration Step Size */
int   piaccel_kt_step = 1;            /* Temporal Acceleration Step Size */ 

int   pimb = 0;
int   piaccel_mb_stride = 1;          /* Displayed multiband acceleration */
int   piaccel_mbnub = 0;              /* Bitmask for multiband acceleration menu.*/
int   piaccel_mbedit = 1;             /* Multiband UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
int   piaccel_mbval2 = 1;             /* Multiband acceleration menu item 2 */
int   piaccel_mbval3 = 1;             /* Multiband acceleration menu item 3 */
int   piaccel_mbval4 = 1;             /* Multiband acceleration menu item 4 */
int   piaccel_mbval5 = 1;             /* Multiband acceleration menu item 5 */
int   piaccel_mbval6 = 1;             /* Multiband acceleration menu item 6 */

int   pics = 0;
float piaccel_cs_stride = 1.0;          /* Displayed Compressed Sensing acceleration */
int   piaccel_csnub = 0;                /* Displayed Compressed Sensing acceleration */
int   piaccel_csedit = 1;               /* Compressed Sensing UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
float piaccel_csval2 = 1.0;             /* Compressed Sensing acceleration menu item 2 */
float piaccel_csval3 = 1.0;             /* Compressed Sensing acceleration menu item 3 */
float piaccel_csval4 = 1.0;             /* Compressed Sensing acceleration menu item 4 */
float piaccel_csval5 = 1.0;             /* Compressed Sensing acceleration menu item 5 */
float piaccel_csval6 = 1.0;             /* Compressed Sensing acceleration menu item 6 */

int   pikt = 0; 
int   piaccel_kt_stride = 1;            /* Displayed temporal acceleration */
int   piaccel_ktnub = 0;                /* Bitmask for temporal acceleration menu.*/
int   piaccel_ktedit = 1;               /* Temporal UI Edit mode 0: Only UI pulldown 1:User can Rx Ph Accel */
int   piaccel_ktval2 = 6;               /* Temporal acceleration menu item 2 */
int   piaccel_ktval3 = 7;               /* Temporal acceleration menu item 3 */
int   piaccel_ktval4 = 8;               /* Temporal acceleration menu item 4 */
int   piaccel_ktval5 = 9;               /* Temporal acceleration menu item 5 */
int   piaccel_ktval6 = 10;               /* Temporal acceleration menu item 6 */

/* Host control of ARC image option for different coils: 
 * 0: ARC image option is disabled for all coils that is not
 *      compatible for ARC based on definition of CoilDB.
 * 1: ARC image option is disabled only for single channel coil
 * 2: ARC image option is not disabled for any coil*/
int piarccoilrestrict = 0; 

/* SDLC Checksum Parameters */
n32 chksum_rhdacqctrl = 0;
n32 chksum_scaninfo;
int chksum_rampdir = 1447292810;

/* When value is non-zero, scn will display the ERMES message number in
 * picontrastwarning when the contrast button is pressed. Introduced
 * for 3DASL. This can be extended to any other applications as needed */

int picontrastwarning = 0;

int piexcitemodenub = 1; /* Bit Mask for Excitation Mode UI: 0-Hide UI, 1-Selective, 2-Non-Selective, 4-Focus */
int pidefexcitemode = 0; /* Default value of Excitation Mode: 0-Selective, 1-Non-Selective, 2-Focus */
int cframpdir = 1;      /* Magnet  Ramp direction : 1 - Forward , -1 - Reverse  */                   
	  
int pihoeccvis = 0;  /* Flag for HOEC correction visibility: 1 = visible, 0 = invisible */
int pihoeccnub = 0;  /* Flag to enable/gray out the HOEC correction checkbox */

/* Reference B1 definition for prescan TG normalization */
float cfmaxb1ref = 14.63199; /* uTesla */
float xmtaddRef = 0.0;

int piinvertfnub = 0;
int piinvertfvis = 0;

/* Additional-scan (e.g. head scout) activation button */
int piaddscannub = 0;
int piaddscantype = 0;
int cfscoutscanact = 0;

/* TR used by the PSD platform when estimating SAR */
float body_sar_table[PREDICTED_SAR_TABLE_ENTRIES];
float head_sar_table[PREDICTED_SAR_TABLE_ENTRIES];
float extremity_sar_table[PREDICTED_SAR_TABLE_ENTRIES];

/*
 * Top of Head structure is generic S/I location finding.
 * This instance is for location of the top of the head.
 */
POSITION_DETECTION_DONE_TYPE topofhead = EMPTY_POSITION_DETECTION_DONE_TYPE;
float piscan_distance_toh = POSITION_DETECTION_POSITION_FARAWAY;
int pipdhs_active = 0;

/* config CVs for Channel Compression and Optimal Recon from MRconfig.cfg */
int cfOptimalSnrRecon = 0;
int cfVirtualChannelRecon = 0;

/* pi variables for acoustic prediction */
float piavgSPL = -1; /* Average Sound Pressure Level */
float pipeakSPL = -1;/* Peak Sound Pressure Level */


/*
 * Copyright 2017 General Electric Company.  All rights reserved.
 */
 
/*
 * @cv
 * CVs common to a set of PSDs.
 * CVs defined in this section cannot be used for required communication
 * between host processes and PSDs but they can still be accessed by
 * name. Communication IDs are not created for these CVs so order
 * is not important. Names are only important insomuch as there are
 * likely to be extensive references to these CVs across many PSDs.
 *
 * This file is included in epic.h
 *
 */


_cvint  _prevent_scan_under_emul = { &prevent_scan_under_emul,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for preventing scan under emulation", 
    0, ""
};


_cvint  _acqs = { &acqs,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of acquisitions", 
    0, ""
};

_cvint  _avround = { &avround,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "if 1 advis routines round", 
    0, ""
};

_cvint  _baseline = { &baseline,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "number of baseline pairs.", 
    0, ""
};


_cvint  _nex = { &nex,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "number of excitations.", 
    0, ""
};

_cvfloat  _trunex = { &trunex,  
    1.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "true number of excitations.", 
    0, ""
};

_cvint  _isOddNexGreaterThanOne = { &isOddNexGreaterThanOne,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for odd nex except 1.0 Nex.", 
    0, ""
};

_cvint  _isNonIntNexGreaterThanOne = { &isNonIntNexGreaterThanOne,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag for NON integer nex except less than 1.0 nex such as 1.5, 2.5, ....", 
    0, ""
};






_cvfloat  _fn = { &fn,  
    0.5, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fractional Nex Indicator", 
    0, ""
};

_cvint  _enablfracdec = { &enablfracdec,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 = Fractional decimation is disabled, 1 = Fractional decimation is enabled.", 
    0, ""
};

_cvint  _npw_flag = { &npw_flag,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "No Phase Wrap support flag. 0 = Not support, 1 = Limited support that only 1.0 and 2.0, 2 = Support flexible NPW", 
    0, ""
};

_cvfloat  _nop = { &nop,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "more than 1.0 if no phase wrap processing used", 
    0, ""
};

_cvint  _acq_type = { &acq_type,  
    -MAXINT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Spin or grad recall", 
    0, ""
};

_cvint  _seq_type = { &seq_type,  
    -MAXINT, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "NCAT, CAT, MPMP...", 
    0, ""
};

_cvint  _num_images = { &num_images,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Total number of images acquired", 
    0, ""
};


_cvint  _recon_mag_image = { &recon_mag_image,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Magnitude Image if 1", 
    0, ""
};

_cvint  _recon_pha_image = { &recon_pha_image,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Phase Image if 1 ", 
    0, ""
};

_cvint  _recon_imag_image = { &recon_imag_image,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Real image if 1 ", 
    0, ""
};

_cvint  _recon_qmag_image = { &recon_qmag_image,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Imag image if 1 ", 
    0, ""
};


_cvint  _slquant1 = { &slquant1,  
    0, 
    SLTAB_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of locs in first pass", 
    0, ""
};

_cvint  _psd_grd_wait = { &psd_grd_wait,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "data acquisition/gradient subsystem delay", 
    0, ""
};

_cvint  _psd_rf_wait = { &psd_rf_wait,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "delay between rf and gradient subsystems", 
    0, ""
};




_cvint  _pos_moment_start = { &pos_moment_start,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Testing CV for moments.", 
    0, ""
};






_cvint  _mps1rf1_inst = { &mps1rf1_inst,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Instr. number for mps1 rf1 pulse", 
    0, ""
};

_cvint  _scanrf1_inst = { &scanrf1_inst,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Instr. number for scan rf1 pulse", 
    0, ""
};


_cvint  _cfcarddelay = { &cfcarddelay,  
    0, 
    MAXINT, 
    10,  0, 0, 0, 1, 1, 
    INVIS, 
    "Delay of the cardiac hardware (ms)", 
    0, ""
};


_cvint  _psd_card_hdwr_delay = { &psd_card_hdwr_delay,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Cardiac hardware trigger delay.", 
    0, ""
};


_cvfloat  _GAM = { &GAM,  
    0, 
    MAXFLOAT, 
    GAMMA_PROTON,  0, 0, 0, 1, 1, 
    INVIS, 
    "Gamma for current nucleus.", 
    0, ""
 };

_cvint  _off90 = { &off90,  
    0, 
    MAXINT, 
    80,  0, 0, 0, 1, 1, 
    INVIS, 
    "Offset to where real 90 occurs", 
    0, ""
};

_cvint  _TR_SLOP = { &TR_SLOP,  
    0, 
    MAXINT, 
    2000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Slack in TR for line gating", 
    0, ""
};

_cvint  _TR_PASS = { &TR_PASS,  
    0, 
    MAXINT, 
    50000,  0, 0, 0, 1, 1, 
    INVIS, 
    "Repetition time for pass entry pt", 
    0, ""
};

_cvint  _TR_PASS3D = { &TR_PASS3D,  
    0, 
    MAXINT, 
    550000,  0, 0, 0, 1, 1, 
    INVIS, 
    "TR for pass entry pt in 3d scans", 
    0, ""
};

_cvint  _csweight = { &csweight,  
    0, 
    180, 
    100,  0, 0, 0, 1, 1, 
    INVIS, 
    "Patient weight threshold for CS pulse width switch", 
    0, ""
};



_cvint  _exnex = { &exnex,  
    0, 
    300, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "used for BAM considerations", 
    0, ""
};

_cvfloat  _truenex = { &truenex,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Actual nex for odd nex npw scans", 
    0, ""
};

_cvint  _eg_phaseres = { &eg_phaseres,  
    0, 
    MAXINT, 
    128,  0, 0, 0, 1, 1, 
    INVIS, 
    "Phase encode res after asym fov calcs", 
    0, ""
};

_cvint  _sp_satcard_loc = { &sp_satcard_loc,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Flag sat placement with cardiac", 
    0, ""
};

_cvint  _min_rfdycc = { &min_rfdycc, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _min_rfavgpow = { &min_rfavgpow, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _min_rfrmsb1 = { &min_rfrmsb1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _coll_prefls = { &coll_prefls,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "if 1, then adjust RBA to collect half the number of taps", 
    0, ""
};


_cvint  _maxGradRes = { &maxGradRes,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Maximize ramp resolution (0=no,1=yes)?", 
    0, ""
};

_cvfloat  _dfg = { &dfg,  
    1.0, 
    4.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Digital Filter Gain", 
    0, ""
};

_cvfloat  _pg_beta = { &pg_beta,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Ramp transition time factor for pulsegen", 
    0, ""
};

_cvint  _split_dab = { &split_dab,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Split dab packets: 0=no, 1=yes", 
    0, ""
};

_cvfloat  _freq_scale = { &freq_scale,  
    0.0, 
    10.0, 
    0, 0, 0, 0, 1, 1, 
    VIS, 
    "FOV scale factor in frequency y direction", 
    0, ""
};

_cvint  _numrecv = { &numrecv,  
    1, 
    MAXINT, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "number of receivers", 
    0, ""
};


_cvint  _pe_on = { &pe_on,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Phase encoding on/off (0=off, 1=on).", 
    0, ""
};

_cvfloat  _psd_targetscale = { &psd_targetscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _psd_zero = { &psd_zero,  
    0.0, 
    0.0, 
    0.0,  0, 0, 0, 1, 1, 
    INVIS,  
    "Dummy address of start/end amplitude for bridged pulse.", 
    0, ""
};


_cvint  _lx_pwmtime = { &lx_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ly_pwmtime = { &ly_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _lz_pwmtime = { &lz_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _px_pwmtime = { &px_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _py_pwmtime = { &py_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pz_pwmtime = { &pz_pwmtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _min_seqgrad = { &min_seqgrad, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _min_seqrfamp = { &min_seqrfamp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _xa2s = { &xa2s, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ya2s = { &ya2s, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _za2s = { &za2s, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _minseqcoil_t = { &minseqcoil_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcoilx_t = { &minseqcoilx_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcoily_t = { &minseqcoily_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcoilz_t = { &minseqcoilz_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcoilburst_t = { &minseqcoilburst_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcoilvrms_t = { &minseqcoilvrms_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgram_t = { &minseqgram_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqchoke_t = { &minseqchoke_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcable_t = { &minseqcable_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcable_maxpow_t = { &minseqcable_maxpow_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcableburst_t = { &minseqcableburst_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqbusbar_t = { &minseqbusbar_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqps_t = { &minseqps_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqpdu_t = { &minseqpdu_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqpdubreaker_t = { &minseqpdubreaker_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqcoilcool_t = { &minseqcoilcool_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqsyscool_t = { &minseqsyscool_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqccucool_t = { &minseqccucool_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqxfmr_t = { &minseqxfmr_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqresist_t = { &minseqresist_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _minseqgrddrv_t = { &minseqgrddrv_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrv_case_t = { &minseqgrddrv_case_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrvx_t = { &minseqgrddrvx_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrvy_t = { &minseqgrddrvy_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgrddrvz_t = { &minseqgrddrvz_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _powerx = { &powerx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _powery = { &powery, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _powerz = { &powerz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pospowerx = { &pospowerx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pospowery = { &pospowery, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _pospowerz = { &pospowerz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _negpowerx = { &negpowerx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _negpowery = { &negpowery, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _negpowerz = { &negpowerz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_lx = { &amptrans_lx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_ly = { &amptrans_ly, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_lz = { &amptrans_lz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_px = { &amptrans_px, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_py = { &amptrans_py, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _amptrans_pz = { &amptrans_pz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_lx = { &abspower_lx, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_ly = { &abspower_ly, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_lz = { &abspower_lz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_px = { &abspower_px, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_py = { &abspower_py, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _abspower_pz = { &abspower_pz, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _minseqpwm_x = { &minseqpwm_x, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqpwm_y = { &minseqpwm_y, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqpwm_z = { &minseqpwm_z, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgpm_t = { &minseqgpm_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _minseqgpm_maxpow_t = { &minseqgpm_maxpow_t, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _vol_ratio_est_req = { &vol_ratio_est_req, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _skip_waveform_rotmat_check = { &skip_waveform_rotmat_check, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _set_realtime_rotmat = { &set_realtime_rotmat, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _skip_rotmat_search = { &skip_rotmat_search, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _enforce_minseqseg = { &enforce_minseqseg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _enforce_dbdtopt = { &enforce_dbdtopt, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _skip_minseqseg = { &skip_minseqseg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _skip_initialize_dbdtopt = { &skip_initialize_dbdtopt, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _time_pgen = { &time_pgen, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _cont_debug = { &cont_debug,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "debug mode: 0=off, 1=plane, 2=sat, 3=slthk", 
    0, ""
};


_cvint  _maxpc_cor = { &maxpc_cor,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Maxwell correction enabled.", 
    0, ""
};

_cvint  _maxpc_debug = { &maxpc_debug,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "1: Print out Maxwell coefficients.", 
    0, ""
};

_cvint  _maxpc_points = { &maxpc_points,  
    100, 
    10000, 
    500,  0, 0, 0, 1, 1, 
    VIS,  
    "Number of points to use for Maxwell correction", 
    0, ""
};


_cvint  _pass_thru_mode = { &pass_thru_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Turn on or off pass thru filter mode for MGD", 
    0, ""
};


_cvint  _tmin = { &tmin,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Min time determined by waveforms", 
    0, ""
};

_cvint  _tmin_total = { &tmin_total,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Min time based on all constrants", 
    0, ""
};

_cvint  _psd_tol_value = { &psd_tol_value,  
     0, 
      MAXINT, 
     0,  0, 0, 0, 1, 1, 
     INVIS, 
     "Tolerance value from PSD", 
     0, ""
};


_cvint  _bd_index = { &bd_index,  
    PSD_XCVR1, 
    PSD_XCVR2, 
    PSD_XCVR2,  0, 0, 0, 1, 1, 
    VIS, 
    "Exciter board index", 
    0, ""
};


_cvint  _use_ermes = { &use_ermes,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VISONLY, 
    "Use error message database", 
    0, ""
};


_cvfloat  _fieldstrength = { &fieldstrength, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _asymmatrix = { &asymmatrix,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "if 1,Asymmetric Matrix is on", 
    0, ""
};

_cvint  _psddebugcode = { &psddebugcode,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "for support function debugging", 
    0, ""
};

_cvint  _psddebugcode2 = { &psddebugcode2,  
    0, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "for support function debugging", 
    0, ""
};

_cvint  _serviceMode = { &serviceMode,   
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    VIS,  
    "Service Mode flag for PSD internal use.",  
    0, ""
};


_cvint  _upmxdisable = { &upmxdisable,  
    0,  
    16,  
    16,  0, 0, 0, 1, 1,  
    INVIS, 
    "disable:1=body, 2=T/R, 4=spectro, 8=CW coil origin cross terms",  
    0, ""
};






_cvint  _tsamp = { &tsamp,  
    1, 
    256, 
    4,  0, 0, 0, 1, 1, 
    VIS, 
    "Sampling rate for waveform digitization (usec).", 
    0, ""
};

_cvint  _seg_debug = { &seg_debug,  
    0, 
    10, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Waveform segmentation debug level (0-10).", 
    0, ""
};

_cvint  _CompositeRMS_method = { &CompositeRMS_method,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Algorithm for coil power calculation (0=Traditional, 1=New).", 
    0, ""
};

_cvint  _gradDriverMethod = { &gradDriverMethod,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Model for gradient driver heating calculation (0=Traditional, 1=New).", 
    0, ""
};



_cvint  _gradDCsafeMethod = { &gradDCsafeMethod,  
    PSD_OFF, 
    PSD_ON, 
    PSD_ON,  0, 0, 0, 1, 1, 
    VIS, 
    "Gradient coil heating method (0=DC model, 1=Safe DC Model).", 
    0, ""
};


_cvint  _stopwatchFlag = { &stopwatchFlag,  
    0, 
    100, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Start stopwatch for precise timing measurement.", 
    0, ""
};

_cvint  _seqEntryIndex = { &seqEntryIndex,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Sequence Entry Index used for Heating Limits calculations.", 
    0, ""
};


_cvint  _dbdt_debug = { &dbdt_debug,  
    0, 
    32767,  
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "debug bitmask for dbdtOpt feature", 
    0, ""
};

_cvint  _reilly_mode = { &reilly_mode,   
    0,  
    1,  
    1,  0, 0, 0, 1, 1,  
    VIS,  
    "Reilly Fraction estimation model - 0: Rectangular 1: convolution integral", 
    0, ""
};



_cvint  _dbdt_disable = { &dbdt_disable,   
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    VIS,  
    "Switch to disable SlewRate optimization based on actual dB/dt",  
    0, ""
};




_cvint  _use_dbdt_opt = { &use_dbdt_opt,   
    0,  
    1,  
    1,  0, 0, 0, 1, 1,  
    INVIS,  
    "PSD Internal Flag for dB/dt optimization ",  
    0, ""
};

_cvfloat  _srderate = { &srderate,   
    1.0,  
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Final Slew-rate derating factor ", 
    0, ""
};

_cvint  _config_update_mode = { &config_update_mode,  
    -1, 
    11, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Mode for deciding configuration updates: -1=skip, 0=default (ACGD+), 1=CRM TENSOR", 
    0, ""
};

_cvint  _phys_record_flag = { &phys_record_flag,  
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    VIS,  
    "Flag for recording Resp/Cardiac WF (0=off, 1=on)", 
    0, ""
};

_cvint  _phys_rec_resolution = { &phys_rec_resolution,  
    1,  
    100,  
    25,  0, 0, 0, 1, 1,  
    VIS,  
    "Resolution for Resp/Cardiac WF (ms, in steps of 1ms)", 
    0, ""
};













_cvint  _phys_record_channelsel = { &phys_record_channelsel,   
    0,  
    255,  
    15,  0, 0, 0, 1, 1,  
    VIS,  
    "Physiological Channel Selection(LSB-MSB): Trig and Data for Resp, PG, ECG3, ECG2", 
    0, ""
};


_cvint  _rotateflag = { &rotateflag,  
    0, 
    2,  
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "flag for allowing arbitrary scan plane rotation, 1:on, 2:special (fse only)", 
    0, ""
};


_cvint  _rhpcspacial_dynamic = { &rhpcspacial_dynamic,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Dyn PC space specificity: 0=use all, >=1 for one slice", 
    0, ""
};

_cvint  _rhpc_rationalscale = { &rhpc_rationalscale,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Scale Rational Scale Factor 0 = Off, 1 = ON", 
    0, ""
};

_cvint  _rhpcmag = { &rhpcmag,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "EPI Even/Odd Magnitude Correction", 
    0, ""
};

_cvint  _mild_note_support = { &mild_note_support,  
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    VIS,  
    "Mild Note supported flag on option UIF", 
    0, ""
};

_cvint  _save_grad_spec_flag = { &save_grad_spec_flag,  
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    INVIS,  
    "Gradient config CVs saved flag for Gradient Spec Control", 
    0, ""
};

_cvint  _grad_spec_change_flag = { &grad_spec_change_flag,  
    0,  
    1,  
    0,  0, 0, 0, 1, 1,  
    INVIS,  
    "Gradient config CVs modified flag for Gradient Spec Control", 
    0, ""
};

_cvint  _value_system_flag = { &value_system_flag,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Value 1.5T system flag", 
    0, ""
};

_cvint  _rectfov_npw_support = { &rectfov_npw_support,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Rect FOV and NPW support flag", 
    0, ""
};

_cvint  _pigeosrot = { &pigeosrot,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "psd sets up own rot matrices", 
    0, ""
};


_cvint  _minseqrf_cal = { &minseqrf_cal,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Def 0: Leagy Cal 1: New f(t) Cal", 
    0, ""
};

_cvint  _min_rfampcpblty = { &min_rfampcpblty,  
    -MAXINT, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "RF Amplifier Capability factor ", 
    0, ""
};

_cvint  _b1derate_flag = { &b1derate_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Def 0: Use default B1 derating  1: Use System B1 limit only (+10 safety margin)", 
    0, ""
};

_cvint  _oblmethod_dbdt_flag = { &oblmethod_dbdt_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Def 0 : Do not scale the axes 1: Scale the axes", 
    0, "Non-pgen dBdt optimization by setting obl_method to zero"
};


_cvint  _minseqcoil_esp = { &minseqcoil_esp,  
    -MAXINT, 
    MAXINT, 
    1000,  0, 0, 0, 1, 1, 
    VIS, 
    "", 
    0, ""
};

_cvint  _aspir_flag = { &aspir_flag,    
     0,       
     1,       
     0,  0, 0, 0, 1, 1,       
     VIS,     
     "Flag indicating ASPIR Fat Sat selection.",  
     0, ""
};

_cvint  _rhrawsizeview = { &rhrawsizeview,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "rhrawsize is 0 bytes/channel", 
    0, ""
};

_cvint  _chksum_scaninfo_view = { &chksum_scaninfo_view,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "chksum_scaninfo is 0", 
    0, ""
};

_cvint  _chksum_rhdacqctrl_view = { &chksum_rhdacqctrl_view,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "chksum_rhdacqctrl is 0", 
    0, ""
};

_cvfloat  _fnecho_lim = { &fnecho_lim,  
    0.5, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "Fraction of read window.", 
    0, ""
};

_cvint  _psdcrucial_debug = { &psdcrucial_debug,  
    0, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "debug flag for psdcrucial library functions", 
    0, ""
};

_cvfloat  _b1max_scale = { &b1max_scale,  
    0.0, 
    10.0, 
    1.0,  0, 0, 0, 1, 1, 
    VIS, 
    "RF b1max scaling factor for adaptive B1max", 
    0, ""
};

_cvint  _disable_exciter_unblank = { &disable_exciter_unblank,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Disable adding exciter unblank in RF support routines", 
    0, ""
};

_cvint  _TGlimit = { &TGlimit, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _sat_TGlimit = { &sat_TGlimit, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _autoparams_debug = { &autoparams_debug,  
    0, 
    32767, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "debug bit mask flag for auto params, 1:In-range Auto TR, 2:Auto RBW, 4:APx", 
    0, ""
};

_cvint  _num_autotr_cveval_iter = { &num_autotr_cveval_iter,  
    1, 
    30, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of iterations of cveval in in-range auto TR processing", 
    0, ""
};

_cvint  _apx_cveval_counter = { &apx_cveval_counter,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "cveval counter for APx", 
    0, ""
};

_cvint  _enforce_inrangetr = { &enforce_inrangetr,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "flag to enforce In-range Auto TR calculation", 
    0, ""
};

_cvint  _passtime = { &passtime,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "total time for pass packets", 
    0, ""
};

_cvint  _retropc_extra = { &retropc_extra,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "retroPC - number of extra non-PE reference views (refsets*etl)", 
0, "" };

_cvint  _esp = { &esp,  
    0, 
    1000000, 
    10000,  0, 0, 0, 1, 1, 
    VIS, 
    "Echo Spacing", 
    0, ""
};

_cvint  _echoint = { &echoint,  
    1, 
    NECHO_MAX, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of interleaved echos in train", 
    0, ""
};

_cvint  _arc_flag = { &arc_flag,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "ARC flag", 
    0, ""
};

_cvint  _arc_ph_calwidth = { &arc_ph_calwidth,  
    0, 
    MAXINT, 
    24,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of fully sampled phase encoding lines for ARC", 
    0, ""
};

_cvint  _arc_sl_calwidth = { &arc_sl_calwidth,  
    0, 
    MAXINT, 
    24,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of fully sampled slice encoding lines for ARC", 
    0, ""
};

_cvint  _vrgfsamp = { &vrgfsamp,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0=std sampling,1=VRGF sampling.", 
    0, ""
};

_cvfloat  _srate_x = { &srate_x,  
    0.5, 
    120.0, 
    15.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "slewrate for X axis", 
    0, ""
};

_cvfloat  _glimit_x = { &glimit_x,  
    0.5, 
    50.0, 
    3.3,  0, 0, 0, 1, 1, 
    INVIS, 
    "g-max for X axis", 
    0, ""
};

_cvfloat  _srate_y = { &srate_y,  
    0.5, 
    120.0, 
    15.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "slewrate for Y axis", 
    0, ""
};

_cvfloat  _glimit_y = { &glimit_y,  
    0.5, 
    50.0, 
    3.3,  0, 0, 0, 1, 1, 
    INVIS, 
    "g-max for Y axis", 
    0, ""
};

_cvfloat  _srate_z = { &srate_z,  
    0.5, 
    120.0, 
    15.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "slewrate for Z axis", 
    0, ""
};

_cvfloat  _glimit_z = { &glimit_z,  
    0.5, 
    50.0, 
    3.3,  0, 0, 0, 1, 1, 
    INVIS, 
    "g-max for Z axis", 
    0, ""
};

_cvfloat  _act_srate_x = { &act_srate_x,  
    0.5, 
    120.0, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Actual SR on X axis", 
    0, ""
};

_cvfloat  _act_srate_y = { &act_srate_y,  
    0.5, 
    120.0, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Actual SR on Y axis", 
    0, ""
};

_cvfloat  _act_srate_z = { &act_srate_z,  
    0.5, 
    120.0, 
    10.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Actual SR on Z axis", 
    0, ""
};

_cvint  _mkgspec_x_sr_flag = { &mkgspec_x_sr_flag,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bit mask flag for special handling of X SR, bit0: special handling, bit1: Off dB/dt limit", 
    0, ""
};
_cvint  _mkgspec_x_gmax_flag = { &mkgspec_x_gmax_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for special handling of X G-max 0:off 1:on", 
    0, ""
};

_cvint  _mkgspec_y_sr_flag = { &mkgspec_y_sr_flag,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bit mask flag for special handling of Y SR, bit0: special handling, bit1: Off dB/dt limit", 
    0, ""
};

_cvint  _mkgspec_y_gmax_flag = { &mkgspec_y_gmax_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for special handling of Y G-max 0:off 1:on", 
    0, ""
};

_cvint  _mkgspec_z_sr_flag = { &mkgspec_z_sr_flag,  
    0, 
    3, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Bit mask flag for special handling of Z SR, bit0: special handling, bit1: Off dB/dt limit", 
    0, ""
};

_cvint  _mkgspec_z_gmax_flag = { &mkgspec_z_gmax_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for special handling of Z G-max 0:off 1:on", 
    0, ""
};

_cvint  _mkgspec_flag = { &mkgspec_flag,  
    0, 
    4, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for marketing gradient spec 0:off 1:Gmax 2:SR 3:Gmax and SR 4:Gmax and SR on 3 axes", 
    0, ""
};

_cvint  _mkgspec_epi2_flag = { &mkgspec_epi2_flag,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for marketing gradient spec DWEPI PSD, 0:off 1:on", 
    0, ""
};

_cvint  _pfkz_total = { &pfkz_total,  
    0, 
    MAXINT, 
    32,  0, 0, 0, 1, 1, 
    VIS, 
    "Total number of slice encodes after acceleration and pfkz", 
    0, ""
};


_cvfloat  _fov_freq_scale = { &fov_freq_scale,  
    0.0,     
    2.0, 
    1.0,  0, 0, 0, 1, 1,     
    INVIS,   
    "Scaling along frequency directon", 
    0, ""    
};

_cvfloat  _fov_phase_scale = { &fov_phase_scale,  
    0.0,     
    2.0, 
    1.0,  0, 0, 0, 1, 1,     
    INVIS,   
    "Scaling along phase directon", 
    0, ""    
};

_cvfloat  _slthick_scale = { &slthick_scale,  
    0.0,     
    2.0, 
    1.0,  0, 0, 0, 1, 1,     
    INVIS, 
    "Scaling of slice thickness", 
    0, ""
};

_cvint  _silent_mode = { &silent_mode,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Silent mode for PSD sequences", 
    0, ""
};

_cvfloat  _silent_slew_rate = { &silent_slew_rate,  
    1.0,  
    200.0,  
    3.0,  0, 0, 0, 1, 1,  
    VIS,  
    "Slew rate for silent PSD gradients", 
    0, ""
};

_cvint  _rhpropellerCtrl = { &rhpropellerCtrl,  
    0,  
    1024,  
    0,  0, 0, 0, 1, 1,  
    VIS,  
    "propeller reconstruction control", 
    0, ""
};

_cvfloat  _prop_act_npwfactor = { &prop_act_npwfactor,  
    1.0,  
    2.0,  
    1.0,  0, 0, 0, 1, 1,  
    INVIS, 
    "Actual propeller npw factor", 
    0, ""
};

_cvfloat  _prop_act_oversamplingfactor = { &prop_act_oversamplingfactor,  
    1.0, 
    MAX_PROP_SYMMETRIC_OSF, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Actual over sampling factor", 
    0, ""
};

_cvint  _navtrig_wait_before_imaging = { &navtrig_wait_before_imaging,  
    0, 
    1000000, 
    200000,  0, 0, 0, 1, 1, 
    VIS, 
    "wait time before imaging in navigator triggering", 
    0, ""
};

_cvint  _xtg_volRecCoil = { &xtg_volRecCoil,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS,  
    "XTG coil 0=Rx'ed Coil; 1=vol. rec. coil", 
    0, ""
};

_cvint  _minseqseg_max_full = { &minseqseg_max_full,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag for minseqseg to fully process the waveform with the MAXIMUM_POWER mode: 0 - OFF(legacy logic), 1 - ON", 
    0, ""
};

_cvint  _sphericalGradient = { &sphericalGradient,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to restrict composite gradient amplitude to a sphere: 1- restricted, 0 - not restricted", 
    0, ""
};

_cvint  _minseqcoil_option = { &minseqcoil_option,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Which set of results to set minseqcoil timing: 0 - AVERAGE_POWER mode, 1 - MAXIMUM_POWER mode", 
    0, ""
};

_cvint  _minseqgrad_option = { &minseqgrad_option,  
    0, 
    0, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Which set of results to set minseqgrad timing: 0 - AVERAGE_POWER mode, 1 - MAXIMUM_POWER mode", 
    0, ""
};

_cvint  _rtp_bodyCoilCombine = { &rtp_bodyCoilCombine,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Body coil RTP data channel combination: 1=Yes, 0=No ", 
    0, ""
};

_cvint  _ntxchannels = { &ntxchannels,  
    1, 
    32, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of transmit channels", 
    0, ""
};

_cvint  _napptxchannels = { &napptxchannels,  
    1, 
    32, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Number of application transmit channels", 
    0, ""
};

_cvint  _seqcfgdebug = { &seqcfgdebug,  
    0, 
    MAXINT, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Debug flag fo sequencer config", 
    0, ""
};

_cvint  _enable_acoustic_model = { &enable_acoustic_model,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "Flag to enable/disable acoustic model", 
    0, ""
};
_cvint  _acoustic_seq_repeat_time = { &acoustic_seq_repeat_time,  
    4, 
    MAXINT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Seq Repeat Rate for Acoustic Calculation in us", 
    0, ""
};
_cvfloat  _avgSPL_non_weighted = { &avgSPL_non_weighted,  
    -MAXFLOAT, 
    MAXFLOAT, 
    0, 0, 0, 0, 1, 1, 
    INVIS, 
    "Average non weighted sound pressure level (SPL) in dB", 
    0, ""
};
_cvint  _noisecal_in_scan_flag = { &noisecal_in_scan_flag,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    VIS, 
    "Flag to enable/disable noisecal in scan", 
    0, ""
};































_cvint  _autolock = { &autolock,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1 will write to raw Pfiles, 2 will write all recs to raw Pfiles", 
0, "" };

_cvint  _blank = { &blank,  
    0, 
    20, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "# of pixels to remove from cson edge.", 
0, "" };

_cvint  _nograd = { &nograd,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "1 if no gradwarp desired.", 
0, "" };

_cvint  _nofermi = { &nofermi,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "1 if no fermi filter desired.", 
0, "" };

_cvint  _rawdata = { &rawdata,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "0 for NOREC, 1 for NOPROC.", 
0, "" };

_cvint  _saveinter = { &saveinter,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "1 to store all intermed images.", 
0, "" };

_cvint  _zchop = { &zchop,  
    0, 
    1, 
    1,  0, 0, 0, 1, 1, 
    INVIS, 
    "1 if data chopped on z, 0 if chopped on y.", 
0, "" };

_cvint  _eepf = { &eepf,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Even Echo Phase Flip", 
0, "" };

_cvint  _oepf = { &oepf,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Odd Echo Phase Flip", 
0, "" };

_cvint  _eeff = { &eeff,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Even Echo Freq Flip", 
0, "" };

_cvint  _oeff = { &oeff,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Odd Echo Freq flip", 
0, "" };

_cvint  _cine_choplet = { &cine_choplet,  
    0, 
    1, 
    0,  0, 0, 0, 1, 1, 
    INVIS, 
    "on 1, let pcm do chopping", 
0, "" };


_cvfloat  _fermi_rc = { &fermi_rc,  
    0.0, 
    MAXFLOAT, 
    0.5,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi radius coefficient", 
0, "" };

_cvfloat  _fermi_wc = { &fermi_wc,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi window coefficient", 
0, "" };

_cvint  _apodize_level_flag = { &apodize_level_flag,  
    0, 
    2, 
    0,  0, 0, 0, 1, 1, 
    VIS, 
    "Apodization Level: 0=Weak, 1=Medium, 2=Strong", 
0, "" };

_cvfloat  _fermi_r_factor = { &fermi_r_factor,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi radius factor", 
0, "" };

_cvfloat  _fermi_w_factor = { &fermi_w_factor,  
    0.0, 
    MAXFLOAT, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "Fermi window factor", 
0, "" };

_cvfloat  _pure_mix_tx_scale = { &pure_mix_tx_scale,  
    0.0, 
    1.0, 
    1.0,  0, 0, 0, 1, 1, 
    INVIS, 
    "PURE Mix transmit scale", 
    0, ""
};

_cvint  _channel_compression = { &channel_compression,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Channel Compression", 
    0, ""
};

_cvint  _optimal_channel_combine = { &optimal_channel_combine,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Optimal SNR Recon", 
    0, ""
};

_cvint  _enforce_cal_for_channel_combine = { &enforce_cal_for_channel_combine,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Optimal SNR Recon", 
    0, ""
};

_cvint  _override_opcalrequired = { &override_opcalrequired,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    INVIS, 
    "opcalrequired is overridden (=1) or not (=0)", 
    0, ""
};

_cvint  _dump_channel_comp_optimal_recon = { &dump_channel_comp_optimal_recon,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Dump flags for channel compression and optimal recon", 
    0, ""
};

_cvint  _dump_scenic_parameters = { &dump_scenic_parameters,  
    PSD_OFF, 
    PSD_ON, 
    PSD_OFF,  0, 0, 0, 1, 1, 
    VIS, 
    "Dump itkn4 and scic parameters", 
    0, ""
};


_cvint  _cv_rfupa = { &cv_rfupa,  -1000, 1000, 0, 0, 0, 0, 1, 1, INVIS, "Corresponds to rfupa", 0, "" };
_cvint  _system_type = { &system_type, 0, 2, 0,  0, 0, 0, 1, 1, INVIS, "System Type 0:Standard Signa 1:VMX", 0, "" };
_cvint  _cvlock = { &cvlock,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "Lock flag for Modify CVs  0:Off 1:On", 0, "" };
_cvint  _psd_taps = { &psd_taps,  -1, MAXINT, 255,  0, 0, 0, 1, 1, VIS, 
  "for setfilter call -1:for optimized taps   255:for fixed CERD filter taps", 0, "" };
_cvint  _fix_fermi = { &fix_fermi,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, 
     "use original Fermi filter if 1", 0, "" };
_cvint  _grad_spec_ctrl = { &grad_spec_ctrl, 
 -1, 3, 0,  0, 0, 0, 1, 1, INVIS, "Grad Spec. control bits 1:gmax 2:srate", 0, "" };
_cvfloat  _srate = { &srate,  0.5, 23.0, 1.71,  0, 0, 0, 1, 1, INVIS,  "slewrate", 0, "" };
_cvfloat  _glimit = { &glimit,  0.5, 10.0, 1.0,  0, 0, 0, 1, 1, INVIS,  "g-max", 0, "" };
_cvfloat  _save_gmax = { &save_gmax, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_srate = { &save_srate, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_cfxfull = { &save_cfxfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_cfyfull = { &save_cfyfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_cfzfull = { &save_cfzfull, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_cfxipeak = { &save_cfxipeak, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_cfyipeak = { &save_cfyipeak, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _save_cfzipeak = { &save_cfzipeak, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _save_ramptime = { &save_ramptime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _debug_grad_spec = { &debug_grad_spec,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "1 to turn on gradient spec debug", 0, "" };
_cvfloat  _act_srate = { &act_srate, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _val15_lock = { &val15_lock, 
 0, 1, 0,  0, 0, 0, 1, 1, INVIS, "Lock out HDMR2/DVMR features for Value 1.5T 0:off 1:on", 0, "" };

_cvint  _avecrushpepowscale_for_SBM_XFD = { &avecrushpepowscale_for_SBM_XFD, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };















_cvfloat  _PSsr_derate_factor = { &PSsr_derate_factor,  1.0,  50.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "PSC SR derating factor", 0, "" };
_cvfloat  _PSamp_derate_factor = { &PSamp_derate_factor,  1.0,  10.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "PSC AMP derating factor", 0, "" };
_cvfloat  _PSassr_derate_factor = { &PSassr_derate_factor,  1.0,  50.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "AutoShim SR derating factor", 0, "" };
_cvfloat  _PSasamp_derate_factor = { &PSasamp_derate_factor,  1.0,  10.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "AutoShim AMP derating factor", 0, "" };
_cvint  _PSTR_PASS = { &PSTR_PASS, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _mpsfov = { &mpsfov,  FOV_MIN, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS,  "mpsfov", 0, "" };

_cvint  _fastprescan = { &fastprescan,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Fast prescan on/off", 0, "" };
_cvint  _pre_slice = { &pre_slice,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS,  "prescan slice number", 0, "" };
_cvint  _PSslice_num = { &PSslice_num, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _xmtaddAPS1 = { &xmtaddAPS1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtaddCFL = { &xmtaddCFL, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtaddCFH = { &xmtaddCFH, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtaddFTG = { &xmtaddFTG, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtadd = { &xmtadd, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtaddRCVN = { &xmtaddRCVN, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ps1scale = { &ps1scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_cflscale = { &cflscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_cfhscale = { &cfhscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_ftgscale = { &ftgscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _extraScale = { &extraScale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _PSdebugstate = { &PSdebugstate,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Debug flag for Prescan", 0, "" };
_cvint  _PSfield_strength = { &PSfield_strength,  0, MAXINT, 0, 0, 0, 0, 1, 1,  VIS,  "Prescan Field Strength", 0, "" };
_cvint  _PScs_sat = { &PScs_sat,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Prescan Chem-SAT flag", 0, "" };
_cvint  _PSir = { &PSir,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Prescan IR flag", 0, "" };
_cvint  _PSmt = { &PSmt,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Prescan MT flag", 0, "" };
_cvint  _ps1_rxcoil = { &ps1_rxcoil,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "TG PS1 Coil: 1=Rxed coil, 0=default", 0, "" };
_cvint  _ps_seed = { &ps_seed, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _tg_1_2_pw = { &tg_1_2_pw,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "1:2 pw TG prescan flag", 0, "" };
_cvint  _tg_axial = { &tg_axial,  0, 1, 1,  0, 0, 0, 1, 1, VIS, "0:user plane 2:axial", 0, "" };
_cvfloat  _coeff_pw_tg = { &coeff_pw_tg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _fov_lim_mps = { &fov_lim_mps,  30, 450, 350,  0, 0, 0, 1, 1, VIS, "FOV limt for MPS", 0, "" };


_cvint  _TGspf = { &TGspf,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "TG swap phase/freq. flag",  0, "" };

_cvfloat  _flip_rf2cfh = { &flip_rf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf3cfh = { &flip_rf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf4cfh = { &flip_rf4cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ps1_tr = { &ps1_tr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfl_tr = { &cfl_tr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfh_tr = { &cfh_tr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rcvn_tr = { &rcvn_tr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _cfh_ec_position = { &cfh_ec_position,  0.0,  1.0,  (16.0/256.0),  0, 0, 0, 1, 1,  VIS,  "Position of the echo center", 0, "" };

_cvint  _cfl_dda = { &cfl_dda,  0,  4,  4,  0, 0, 0, 1, 1,  VIS,  "Num. disdaqs in cfl", 0, "" };
_cvint  _cfl_nex = { &cfl_nex,  1,  2,  2,  0, 0, 0, 1, 1,  VIS,  "Num. nex in cfl", 0, "" };
_cvint  _cfh_dda = { &cfh_dda,  0,  4,  4,  0, 0, 0, 1, 1,  VIS,  "Num. disdaqs in cfh", 0, "" };
_cvint  _cfh_nex = { &cfh_nex,  1,  2,  2,  0, 0, 0, 1, 1,  VIS,  "Num. nex in cfh", 0, "" };
_cvint  _rcvn_dda = { &rcvn_dda,  0,  4,  4,  0, 0, 0, 1, 1,  VIS,  "Num. disdaqs in RCVN", 0, "" };
_cvint  _rcvn_nex = { &rcvn_nex,  1,  2,  2,  0, 0, 0, 1, 1,  VIS,  "Num. nex in RCVN", 0, "" };


_cvint  _local_tg = { &local_tg,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "flag for local XTG", 0, "" };
_cvfloat  _fov_scaling = { &fov_scaling,  0.1,  1.0,  0.8,  0, 0, 0, 1, 1,  INVIS,  "FOV scaling for local TG w/o shim vol", 0, "" };
_cvfloat  _flip_rf1xtg = { &flip_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1xtg = { &gscale_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _init_xtg_deadtime = { &init_xtg_deadtime, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1mps1 = { &flip_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1mps1 = { &gscale_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };









_cvint  _presscfh_override = { &presscfh_override,  0,  PRESSCFH_NONE, 0,  0, 0, 0, 1, 1,  VIS,  "PSD Level Control for Overriding the default CFH selected by opimode", 0, "" };
_cvint  _presscfh = { &presscfh,  1, PRESSCFH_NONE, PRESSCFH_NONE,  0, 0, 0, 1, 1,  VIS,  "PSD Level Control for CFH", 0, "" };
_cvint  _presscfh_ctrl = { &presscfh_ctrl,  1, PRESSCFH_NONE , PRESSCFH_NONE,  0, 0, 0, 1, 1,  VIS,  "Geometry Level control for CFH", 0, "" };
_cvint  _presscfh_outrange = { &presscfh_outrange, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_cgate = { &presscfh_cgate, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_debug = { &presscfh_debug,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "IR PRESS CFH debugging information", 0, "" };
_cvint  _presscfh_wait_rf12 = { &presscfh_wait_rf12, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_wait_rf23 = { &presscfh_wait_rf23, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_wait_rf34 = { &presscfh_wait_rf34, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_minte = { &presscfh_minte, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_fov = { &presscfh_fov, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_fov_ratio = { &presscfh_fov_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_pfov_ratio = { &presscfh_pfov_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_slab_ratio = { &presscfh_slab_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_pfov = { &presscfh_pfov, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_slthick = { &presscfh_slthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_slice = { &presscfh_slice, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _presscfh_ir_slthick = { &presscfh_ir_slthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _presscfh_ir_noselect = { &presscfh_ir_noselect, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _presscfh_minfov_ratio = { &presscfh_minfov_ratio, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _cfh_steam_flag = { &cfh_steam_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _steam_pg_gap = { &steam_pg_gap, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _area_gykcfl = { &area_gykcfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gykcfh = { &area_gykcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_xtgzkiller = { &area_xtgzkiller, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_xtgykiller = { &area_xtgykiller, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _PSoff90 = { &PSoff90, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dummy_pw = { &dummy_pw, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _min180te = { &min180te, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _PStloc = { &PStloc, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _PSrloc = { &PSrloc, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _PSphasoff = { &PSphasoff, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _PStrigger = { &PStrigger, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _PStloc_mod = { &PStloc_mod, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _PSrloc_mod = { &PSrloc_mod, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _PSphasoff_mod = { &PSphasoff_mod, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thickPS_mod = { &thickPS_mod, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _asx_killer_area = { &asx_killer_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _asz_killer_area = { &asz_killer_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cfhir_killer_area = { &cfhir_killer_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ps_crusher_area = { &ps_crusher_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cfh_crusher_area = { &cfh_crusher_area, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _target_cfh_crusher = { &target_cfh_crusher, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _target_cfh_crusher2 = { &target_cfh_crusher2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _cfh_newmode = { &cfh_newmode, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cfh_rf1freq = { &cfh_rf1freq,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _cfh_rf2freq = { &cfh_rf2freq,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _cfh_rf3freq = { &cfh_rf3freq,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _cfh_rf4freq = { &cfh_rf4freq,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _cfh_fov = { &cfh_fov,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvint  _cfh_ti = { &cfh_ti, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _eff_cfh_te = { &eff_cfh_te, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _PScfh_shimvol_debug = { &PScfh_shimvol_debug,  0,  7,  0,  0, 0, 0, 1, 1,  VIS,  "Shift shim volume along axis in shimvol domain, 1: slice, 2: freq, 4: phase", 0, "" };
_cvint  _debug_shimvol_slice = { &debug_shimvol_slice, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _wg_cfh_rf3 = { &wg_cfh_rf3, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_cfh_rf4 = { &wg_cfh_rf4, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvfloat  _FTGslthk = { &FTGslthk,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };

_cvfloat  _FTGopslthickz1 = { &FTGopslthickz1,  MINTHICK, 80, 80,  0, 0, 0, 1, 1, VISONLY, "Slice thickness in mm.", 0, "" };
_cvfloat  _FTGopslthickz2 = { &FTGopslthickz2,  MINTHICK, 80, 80,  0, 0, 0, 1, 1, VISONLY, "Slice thickness in mm.", 0, "" };
_cvfloat  _FTGopslthickz3 = { &FTGopslthickz3,  MINTHICK, 80, 20,  0, 0, 0, 1, 1, VISONLY, "Slice thickness in mm.", 0, "" };
_cvint  _ftgtr = { &ftgtr,  TR_MIN, TR_MAX, 2000000,  0, 0, 0, 1, 1, VISONLY, "Fast TG time of repetition", 0, "" };
_cvfloat  _FTGfov = { &FTGfov,  FOV_MIN, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISONLY, "FastTG fov", 0, "" };
_cvfloat  _FTGau = { &FTGau,  -MAXFLOAT, MAXFLOAT, 4,  0, 0, 0, 1, 1, VISONLY, "Tau scale factor", 0, "" };
_cvfloat  _FTGtecho = { &FTGtecho,  -MAXFLOAT, MAXFLOAT, 4,  0, 0, 0, 1, 1, VISONLY, "", 0, "" };
_cvint  _FTGtau1 = { &FTGtau1,  0, 64000, 8192  ,  0, 0, 0, 1, 1, VISONLY, "Theta1 to Theta2 time (center to center)", 0, "" };
_cvint  _FTGtau2 = { &FTGtau2,  0, 64000, 32768  ,  0, 0, 0, 1, 1, VISONLY,  "Theta1 to Theta3 time (center to center)", 0, "" };
_cvint  _FTGacq1 = { &FTGacq1,  0, 1, 0,  0, 0, 0, 1, 1, VISONLY,  "1=window one active, 0=disabled", 0, "" };
_cvint  _FTGacq2 = { &FTGacq2,  0, 1, 1,  0, 0, 0, 1, 1, VISONLY,  "1=window two active, 0=disabled", 0, "" };
_cvint  _epi_ir_on = { &epi_ir_on,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "1=IR EPI", 0, "" };
_cvint  _ssfse_ir_on = { &ssfse_ir_on,  0, 1, 1,  0, 0, 0, 1, 1, VIS,  "1=IR EPI", 0, "" };
_cvint  _ftg_dda = { &ftg_dda,  0, 16, 0,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in fast TG", 0, "" };

_cvfloat  _FTGecho1bw = { &FTGecho1bw,  2, 32, 4,  0, 0, 0, 1, 1, VISONLY,  "Fast TG Echo1 filter bw. in KHz", 0, "" };
_cvint  _FTGtestpulse = { &FTGtestpulse,  0, 1, 0,  0, 0, 0, 1, 1, VISONLY, "Test pulse for gradient moment tests.", 0, "" };
_cvint  _FTGxres = { &FTGxres,  16, 512, 256,  0, 0, 0, 1, 1, VISONLY,  "X(frequency) resolution", 0, "" };
_cvfloat  _FTGxmtadd = { &FTGxmtadd, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2ftgleft = { &pw_gxw2ftgleft, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _xtgtr = { &xtgtr,  TR_MIN, TR_MAX, 200000,  0, 0, 0, 1, 1, VISONLY, "eXpress TG time of repetition", 0, "" };
_cvint  _XTGtau1 = { &XTGtau1,  0, 64000, 8192  ,  0, 0, 0, 1, 1, VISONLY, "Theta1 to Theta2 time (center to center)", 0, "" };
_cvfloat  _XTGfov = { &XTGfov,  FOV_MIN, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISONLY, "eXpress TG fov", 0, "" };
_cvint  _pw_bsrf = { &pw_bsrf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _xtg_offres_freq = { &xtg_offres_freq, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _XTGecho1bw = { &XTGecho1bw,  2, 32, 15.625,  0, 0, 0, 1, 1, VISONLY,  "eXpress TG Echo1 filter bw. in KHz", 0, "" };
_cvint  _XTGxres = { &XTGxres,  16, 512, 256,  0, 0, 0, 1, 1, VISONLY,  "X(frequency) resolution", 0, "" };
_cvfloat  _xmtaddXTG = { &xmtaddXTG, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xtgscale = { &xtgscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _xtg_dda = { &xtg_dda,  0, 16, 0,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in express TG", 0, "" };
_cvint  _XTGacq1 = { &XTGacq1,  0, 1, 0,  0, 0, 0, 1, 1, VISONLY,  "1=window one active, 0=disabled", 0, "" };
_cvfloat  _TGopslthick = { &TGopslthick,  0.0, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _TGopslthickx = { &TGopslthickx,  0.0, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvfloat  _TGopslthicky = { &TGopslthicky,  0.0, MAXFLOAT, 0, 0, 0, 0, 1, 1, VIS, "", 0, "" };
_cvint  _XTG_minimizeYKillerGap = { &XTG_minimizeYKillerGap,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "Option to minimize time between XTG Y Killers to reduce 1st order gradient moment: 0=Off, 1=On", 0, "" };


_cvint  _dynTG_etl = { &dynTG_etl,  1, 8, 2,  0, 0, 0, 1, 1, INVIS,  "Num. echoes for dynamic TG", 0, "" };
_cvint  _dtg_iso_delay = { &dtg_iso_delay,   0,  MAXINT,  0, 0, 0, 0, 1, 1,  INVIS,  "min phase pulse iso-delay",  0, "" };
_cvint  _dtg_off90 = { &dtg_off90, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dtg_dda = { &dtg_dda,  0, 16, 2,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in dynamic TG", 0, "" };
_cvint  _rf1dtg_type = { &rf1dtg_type,  0, 1, 1,  0, 0, 0, 1, 1, INVIS,  "b1rf1_type 0=sinc 1=tbw6", 0, "" };
_cvfloat  _echo1bwdtg = { &echo1bwdtg,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 DynTG filter bw. in KHz", 0, "" };
_cvint  _dtgt_exa = { &dtgt_exa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_dtgt_exb = { &dtgt_exb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tleaddtg = { &tleaddtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_td0dtg = { &td0dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dtgphorder = { &dtgphorder, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _dtgspgr_flag = { &dtgspgr_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "flag for spgr mode", 0, "" };
_cvint  _pw_rf1dtg = { &pw_rf1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1dtg = { &a_rf1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _min_dtgte = { &min_dtgte, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_dtg_esp = { &dtg_esp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tr_dtg = { &tr_dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _time_ssidtg = { &time_ssidtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _rsaxial_flag = { &rsaxial_flag,  0, 1, 1,  0, 0, 0, 1, 1, INVIS,  "RFShim Plane: 1=Axial Plane; 0=Rxed Plane", 0, "" };
_cvint  _rsspgr_flag = { &rsspgr_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "flag for spgr mode", 0, "" };
_cvint  _multi_channel = { &multi_channel,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "flag for single or multi-channel", 0, "" };
_cvint  _minph_iso_delay = { &minph_iso_delay,   0,  MAXINT,  0, 0, 0, 0, 1, 1,  INVIS,  "min phase pulse iso-delay",  0, "" };
_cvint  _rs_off90 = { &rs_off90, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rs_iso_delay = { &rs_iso_delay,   0,  MAXINT,  0, 0, 0, 0, 1, 1,  INVIS,  "min phase pulse iso-delay",  0, "" };
_cvfloat  _echo1bwrs = { &echo1bwrs,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 RFShim filter bw. in KHz", 0, "" };
_cvint  _rsphorder = { &rsphorder, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _rs_dda = { &rs_dda,  0, 16, 0,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in RFShim", 0, "" };
_cvint  _rst_exa = { &rst_exa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_rst_exb = { &rst_exb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tleadrs = { &tleadrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_td0rs = { &td0rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1rs = { &pw_rf1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1rs = { &ia_rf1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1rs = { &a_rf1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rf1rs_type = { &rf1rs_type,  0, 1, 1,  0, 0, 0, 1, 1, INVIS,  "b1rf1_type 0=sinc 1=tbw6", 0, "" };

_cvfloat  _gscale_rf1rs = { &gscale_rf1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1rs = { &flip_rf1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_flip_rfbrs = { &flip_rfbrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_cyc_rf1rs = { &cyc_rf1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1dtg = { &flip_rf1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_flip_rfbdtg = { &flip_rfbdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_cyc_rf1dtg = { &cyc_rf1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_gscale_rf1dtg = { &gscale_rf1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1dtg = { &ia_rf1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _rf1rs_scale = { &rf1rs_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_rf1dtg_scale = { &rf1dtg_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _xmtaddrs = { &xmtaddrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtadddtg = { &xmtadddtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_acqrs1 = { &pw_acqrs1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_pw_acqdtg1 = { &pw_acqdtg1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _min_rste = { &min_rste, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_rs_esp = { &rs_esp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tr_rs = { &tr_rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_tr_prep_rs = { &tr_prep_rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rd_ext_rs = { &rd_ext_rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_rd_ext_dtg = { &rd_ext_dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _fast_xtr = { &fast_xtr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _attenlen = { &attenlen, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tns_len = { &tns_len, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _e2_delay_rs = { &e2_delay_rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _e2_delay_dtg = { &e2_delay_dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _time_ssirs = { &time_ssirs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _rfshim_etl = { &rfshim_etl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _B1Cal_mode = { &B1Cal_mode,   0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "RFShim Calibration mode", 0, "" };
_cvint  _DD_delay = { &DD_delay,  1000, 20000, 2000,  0, 0, 0, 1, 1, VIS,  "Delay time for dual drive I/Q switch", 0, "" };
_cvint  _DD_channels = { &DD_channels,  2, 8, 2,  0, 0, 0, 1, 1, INVIS,  "Dual Drive Channels", 0, "" };
_cvint  _DD_nCh = { &DD_nCh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _DD_debug = { &DD_debug,  0, 2, 0,  0, 0, 0, 1, 1, INVIS,  "I/Q channel debug. OFF:0, I:1, Q:2", 0, "" };

_cvint  _endview_iamprs = { &endview_iamprs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_endview_iampdtg = { &endview_iampdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _endview_scalers = { &endview_scalers, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_endview_scaledtg = { &endview_scaledtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };



_cvfloat  _echo1bwcal = { &echo1bwcal,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 Ext Cal filter bw. in KHz", 0, "" };
_cvint  _cal_dda = { &cal_dda,  0, MAXINT, 128,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in Cal Scan", 0, "" };
_cvint  _cal_delay = { &cal_delay,  0, MAXINT, 4000000,  0, 0, 0, 1, 1, INVIS,  "delay for cal in Prescan", 0, "" };
_cvint  _cal_delay_dda = { &cal_delay_dda, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _calspgr_flag = { &calspgr_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "flag for spgr mode", 0, "" };
_cvint  _cal_tr_interleave = { &cal_tr_interleave, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cal_nex_interleave = { &cal_nex_interleave, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_xfov = { &cal_xfov, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_yfov = { &cal_yfov, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_vthick = { &cal_vthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cal_btw_rf_rba_ssp = { &cal_btw_rf_rba_ssp, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cal_grd_rf_delays = { &cal_grd_rf_delays, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tleadcal = { &tleadcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _td0cal = { &td0cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _calt_exa = { &calt_exa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _calt_exb = { &calt_exb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tacq_cal = { &tacq_cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _te_cal = { &te_cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tr_cal = { &tr_cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1cal = { &flip_rf1cal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cal_iso_delay = { &cal_iso_delay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _endview_iampcal = { &endview_iampcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _endviewz_iampcal = { &endviewz_iampcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _endview_scalecal = { &endview_scalecal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _endviewz_scalecal = { &endviewz_scalecal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_combcal = { &a_combcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_endcal = { &a_endcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_combcal2 = { &a_combcal2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_endcal2 = { &a_endcal2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _time_ssical = { &time_ssical, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _xmtaddcal = { &xmtaddcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_amplimit = { &cal_amplimit, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_slewrate = { &cal_slewrate, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_freq_scale = { &cal_freq_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_phase_scale = { &cal_phase_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gzkcal = { &area_gzkcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_ampscale = { &cal_ampscale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cal_pfkr_flag = { &cal_pfkr_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cal_pfkr_fraction = { &cal_pfkr_fraction, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cal_sampledPts = { &cal_sampledPts, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _echo1bwcoil = { &echo1bwcoil,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 Ext Cal filter bw. in KHz", 0, "" };
_cvint  _coil_dda = { &coil_dda,  0, MAXINT, 4,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in Cal Scan", 0, "" };
_cvint  _coilspgr_flag = { &coilspgr_flag,  0, 1, 0,  0, 0, 0, 1, 1, INVIS,  "flag for spgr mode", 0, "" };
_cvint  _coil_nex_interleave = { &coil_nex_interleave, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_xfov = { &coil_xfov, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_yfov = { &coil_yfov, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_vthick = { &coil_vthick, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tleadcoil = { &tleadcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _td0coil = { &td0coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _coilt_exa = { &coilt_exa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _coilt_exb = { &coilt_exb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tacq_coil = { &tacq_coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _te_coil = { &te_coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tr_coil = { &tr_coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1coil = { &flip_rf1coil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _coil_iso_delay = { &coil_iso_delay, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _endview_iampcoil = { &endview_iampcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _endviewz_iampcoil = { &endviewz_iampcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _endview_scalecoil = { &endview_scalecoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _endviewz_scalecoil = { &endviewz_scalecoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_combcoil = { &a_combcoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_endcoil = { &a_endcoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_combcoil2 = { &a_combcoil2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_endcoil2 = { &a_endcoil2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _time_ssicoil = { &time_ssicoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _xmtaddcoil = { &xmtaddcoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_amplimit = { &coil_amplimit, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_slewrate = { &coil_slewrate, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_freq_scale = { &coil_freq_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_phase_scale = { &coil_phase_scale, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _coil_pfkr_flag = { &coil_pfkr_flag, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _coil_pfkr_fraction = { &coil_pfkr_fraction, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _coil_sampledPts = { &coil_sampledPts, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _CFLxres = { &CFLxres,  16, 4096, 256,  0, 0, 0, 1, 1, VISONLY,  "CFL X(frequency) resolution", 0, "" };
_cvint  _CFHxres = { &CFHxres,  16, 4096, 256,  0, 0, 0, 1, 1, VISONLY,  "CFL X(frequency) resolution", 0, "" };

_cvfloat  _echo1bwcfl = { &echo1bwcfl,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 CFL filter bw. in KHz", 0, "" };
_cvfloat  _echo1bwcfh = { &echo1bwcfh,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 CFH filter bw. in KHz", 0, "" };

_cvfloat  _echo1bwrcvn = { &echo1bwrcvn,  -MAXFLOAT, MAXFLOAT,  15.625,  0, 0, 0, 1, 1,  INVIS,  "Echo1 RCVN filter BW in KHz", 0, "" };
_cvint  _rcvn_xres = { &rcvn_xres,  128,  4096,  4096,  0, 0, 0, 1, 1,  VIS,  "X(frequency) resolution for RCVN filter", 0, "" };
_cvint  _rcvn_loops = { &rcvn_loops, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_grdtrig = { &pw_grdtrig,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "grad diag trig", 0, "" };

_cvint  _wait_time_before_cfh = { &wait_time_before_cfh,  1000,  10000000,  1000000,  0, 0, 0, 1, 1,  VIS,  "wait time before CFH", 0, "" };



_cvfloat  _echo1bwas = { &echo1bwas,  -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, INVIS,  "Echo1 auto-shim filter bw. in KHz", 0, "" };

_cvint  _off90as = { &off90as,  -MAXINT, MAXINT, 80,  0, 0, 0, 1, 1, INVIS,  "Comp factor for real 90", 0, "" };
_cvint  _td0as = { &td0as,  0, MAXINT, 1,  0, 0, 0, 1, 1, INVIS,  "Init deadtime", 0, "" };
_cvint  _t_exaas = { &t_exaas,  0, MAXINT, 0,  0, 0, 0, 1, 1, INVIS, "time from start of 90 to mid 90", 0, "" };
_cvint  _time_ssias = { &time_ssias,  0, MAXINT, 400  ,  0, 0, 0, 1, 1, INVIS,  "time from eos to ssi in intern trig", 0, "" };
_cvint  _tleadas = { &tleadas,  0, MAXINT, 25  ,  0, 0, 0, 1, 1, INVIS,  "Init deadtime", 0, "" };

_cvint  _te_as = { &te_as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _tr_as = { &tr_as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _as_dda = { &as_dda,  0, 4, 4,  0, 0, 0, 1, 1, INVIS,  "Num. disdaqs in autoshim", 0, "" };

_cvint  _pw_isislice = { &pw_isislice,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "isi update delay", 0, "" };
_cvint  _pw_rotslice = { &pw_rotslice,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "rot. matrix update", 0, "" };
_cvint  _isi_sliceextra = { &isi_sliceextra,  -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VIS,  "Extra time to move gradient killer", 0, "" };




_cvint  _rgfeature_enable = { &rgfeature_enable,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  INVIS,  "Enable RG Reduction Feature (0:No, 1:Yes)", 0, "" };


_cvint  _enableMapTg = { &enableMapTg,  PSD_OFF,  PSD_ON,  PSD_OFF,  0, 0, 0, 1, 1,  VIS,  "Enable B1 Map TG method (0:No, 1:Yes)", 0, "" };



_cvfloat  _aslenap = { &aslenap,  0,  MAXFLOAT,  200,  0, 0, 0, 1, 1,  VIS,  "AP length of shim voxel (mm)",  0, "" };
_cvfloat  _aslenrl = { &aslenrl,  0,  MAXFLOAT,  200,  0, 0, 0, 1, 1,  VIS,  "RL length of shim voxel (mm)",  0, "" };
_cvfloat  _aslensi = { &aslensi,  0,  MAXFLOAT,  200,  0, 0, 0, 1, 1,  VIS,  "SI length of shim voxel (mm)",  0, "" };

_cvfloat  _aslocap = { &aslocap,   -MAXFLOAT,  MAXFLOAT,  0,  0, 0, 0, 1, 1,  VIS,  "AP location of shim voxel (mm)",  0, "" };
_cvfloat  _aslocrl = { &aslocrl,   -MAXFLOAT,  MAXFLOAT,  0,  0, 0, 0, 1, 1,  VIS,  "RL location of shim voxel (mm)",  0, "" };
_cvfloat  _aslocsi = { &aslocsi,   -MAXFLOAT,  MAXFLOAT,  0,  0, 0, 0, 1, 1,  VIS,  "SI location of shim voxel (mm)",  0, "" };



_cvfloat  _area_gxwas = { &area_gxwas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gz1as = { &area_gz1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_readrampas = { &area_readrampas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avail_pwgx1as = { &avail_pwgx1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _avail_pwgz1as = { &avail_pwgz1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _bw_rf1as = { &bw_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _flip_pctas = { &flip_pctas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _dix_timeas = { &dix_timeas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _xmtaddas = { &xmtaddas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_xmtlogas = { &xmtlogas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ps1obl_debug = { &ps1obl_debug,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, 
                        "On(=1) to print messages for obloptimize", 0, "" };
_cvint  _asobl_debug = { &asobl_debug,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, 
                        "On(=1) to print messages for obloptimize", 0, "" };
_cvint  _ps1_newgeo = { &ps1_newgeo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvint  _as_newgeo = { &as_newgeo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1as_tot = { &pw_gy1as_tot, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _endview_iampas = { &endview_iampas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _endview_scaleas = { &endview_scaleas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _cfh_newgeo = { &cfh_newgeo, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _cfhobl_debug = { &cfhobl_debug,  0, 1, 0,  0, 0, 0, 1, 1, INVIS, 
                        "On(=1) to print messages for obloptimize", 0, "" };

_cvfloat  _deltf = { &deltf,  -MAXFLOAT, MAXFLOAT, 1.0,  0, 0, 0, 1, 1, VIS, "Frequency shift", 0, "" };

_cvint  _IRinCFH = { &IRinCFH,  0,  0,  0,  0, 0, 0, 1, 1,  INVIS,  "YMS IR in CFH flag",  0, "" };
_cvint  _cfh_each = { &cfh_each,  0,  0,  0,  0, 0, 0, 1, 1,  INVIS,  "YMS CFH per slice flag",  0, "" };
_cvint  _cfh_slquant = { &cfh_slquant,  0,  0,  0,  0, 0, 0, 1, 1,  INVIS,  "YMS CFH slice quantity",  0, "" };

_cvint  _noswitch_slab_psc = { &noswitch_slab_psc,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "No slab switch for psc(sotf)", 0, "" };
_cvint  _noswitch_coil_psc = { &noswitch_coil_psc,  0, 1, 0,  0, 0, 0, 1, 1, VIS, "No coil switch for psc(sotf)", 0, "" };
_cvint  _PStest_slab = { &PStest_slab,  1, 2, 1,  0, 0, 0, 1, 1, INVIS, "Testing slab for psc(sotf)", 0, "" };

_cvint  _pimrsapsflg = { &pimrsapsflg,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "flag for MRS AutoPrescan",  0, "" };
_cvint  _pimrsaps1 = { &pimrsaps1,   0,  116,  1,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 1: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR,"
                                 "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                 "15=Cal, 16=AUTOCOIL,101=AWS,"
                                 "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps2 = { &pimrsaps2,   0,  116,  1,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 2: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR,"
                                 "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                 "15=Cal, 16=AUTOCOIL,101=AWS,"
                                 "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps3 = { &pimrsaps3,    0,  116,  3,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 3: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                 "15=Cal, 16=AUTOCOIL,101=AWS,"
                                 "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps4 = { &pimrsaps4,    0,  116,  4,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 4: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                 "15=Cal, 16=AUTOCOIL,101=AWS,"
                                 "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps5 = { &pimrsaps5,   0,  116,  1,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 5: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                  "15=Cal, 16=AUTOCOIL,101=AWS,"
                                  "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps6 = { &pimrsaps6,  0,  116,  3,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 6: "
                                "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                "15=Cal, 16=AUTOCOIL,101=AWS,"
                                "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps7 = { &pimrsaps7,   0,  116,  3,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 7: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                 "15=Cal, 16=AUTOCOIL,101=AWS,"
                                 "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps8 = { &pimrsaps8,   0,  116,  101,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 8: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                 "15=Cal, 16=AUTOCOIL,101=AWS,"
                                 "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps9 = { &pimrsaps9,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 9: "
                                 "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                 "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                 "15=Cal, 16=AUTOCOIL,101=AWS,"
                                 "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps10 = { &pimrsaps10,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 10: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                  "15=Cal, 16=AUTOCOIL,101=AWS,"
                                  "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps11 = { &pimrsaps11,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 11: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                  "15=Cal, 16=AUTOCOIL,101=AWS,"
                                  "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps12 = { &pimrsaps12,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 12: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                  "15=Cal, 16=AUTOCOIL,101=AWS,"
                                  "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps13 = { &pimrsaps13,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 13: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                  "15=Cal, 16=AUTOCOIL,101=AWS,"
                                  "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps14 = { &pimrsaps14,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 14: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                  "15=Cal, 16=AUTOCOIL,101=AWS,"
                                  "103=SHIM, 104=FTG, 116=XTG",  0, "" };
_cvint  _pimrsaps15 = { &pimrsaps15,   0,  116,  0,  0, 0, 0, 1, 1,  VIS,  "MRS AutoPrescan step 15: "
                                  "0=Stop, 1=CFL, 2=APS1, 3=CFH, 4=TR, "
                                  "9=PC, 12=RCVN, 13=RFSHIM, 14=DYNTG,"
                                  "15=Cal, 16=AUTOCOIL,101=AWS,"
                                  "103=SHIM, 104=FTG, 116=XTG",  0, "" };





_cvint  _pw_contrfhubsel = { &pw_contrfhubsel,  0,  MAXINT,  4,  0, 0, 0, 1, 1,  INVIS,  "Width of the change hub index packet", 0, "" };
_cvint  _delay_rfhubsel = { &delay_rfhubsel, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_contrfsel = { &pw_contrfsel,  0,  MAXINT,  4,  0, 0, 0, 1, 1,  INVIS,  "Width of the modify receiver port packet", 0, "" };
_cvint  _csw_tr = { &csw_tr,  0,  MAXINT, 0,  0, 0, 0, 1, 1,  VIS, "seq length for receiver coil switch core", 0, "" };
_cvint  _csw_wait_sethubindeximm = { &csw_wait_sethubindeximm, 
    0,  MAXINT,  250000,  0, 0, 0, 1, 1,  VIS,  "Additional time for coil switch when calling sethubindeximm", 0, "" };
_cvint  _csw_wait_setrcvportimm = { &csw_wait_setrcvportimm, 
    0,  MAXINT,  100000,  0, 0, 0, 1, 1,  VIS,  "Additional time for coil switch when calling setrcvportimm ", 0, "" };
_cvint  _csw_wait_before = { &csw_wait_before,  0,  MAXINT,  10000,  0, 0, 0, 1, 1, INVIS, "Delay for coil switching startup", 0, "" };
_cvint  _csw_time_ssi = { &csw_time_ssi, 
    0,  MAXINT,  50000,  0, 0, 0, 1, 1,  VIS,  "time from eos to ssi in intern trig for coil switch", 0, "" };


_cvfloat  _area_gxkrcvn = { &area_gxkrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gykrcvn = { &area_gykrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _area_gzkrcvn = { &area_gzkrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pre_rcvn_tr = { &pre_rcvn_tr,  0,  MAXINT,  0,  0, 0, 0, 1, 1,  VIS,  "Pre sequence before RCVN", 0, "" };
_cvint  _rcvn_flag = { &rcvn_flag,  0,  3,  1,  0, 0, 0, 1, 1,  VIS,  "0: OFF; 1: crusher; 2: delay b4 RCVN; 3: grad prognostic ", 0, "" };


_cvint  _psd_startta_override = { &psd_startta_override,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "tg starting ta: 1 allow override", 0, "" };
_cvint  _psd_psctg = { &psd_psctg,  PSD_CONTROL_PSC_SKIP,  PSD_CONTROL_PSC_RUN,  APS_CONTROL_PSC,  0, 0, 0, 1, 1,  VIS, 
                                     "Prescan TG control: -1 Skip; 0 Auto; 1 Run", 0, "" };
_cvint  _psd_pscshim = { &psd_pscshim,  PSD_CONTROL_PSC_SKIP,  PSD_CONTROL_PSC_SPECIAL,  APS_CONTROL_PSC,  0, 0, 0, 1, 1,  VIS, 
                                       "Prescan AS control: -1 Skip; 0 Auto; 1 Run; 2 Special", 0, "" };
_cvint  _psd_pscall = { &psd_pscall,  PSD_CONTROL_PSC_SKIP,  PSD_CONTROL_PSC_RUN,  APS_CONTROL_PSC,  0, 0, 0, 1, 1,  VIS, 
                                       "Prescan APS control: -1 Skip all; 0 Auto; 1 Run all", 0, "" };


_cvint  _bw_rf1cal = { &bw_rf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" },_bw_rf1coil = { &bw_rf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };




_cvint  _obl_debug = { &obl_debug,  0,  1,  0,  0, 0, 0, 1, 1,  INVIS,  "On(=1) to print messages for obloptimize", 0, "" };
_cvint  _obl_method = { &obl_method,  PSD_OBL_RESTRICT,  PSD_OBL_OPTIMAL,  PSD_OBL_OPTIMAL,  0, 0, 0, 1, 1,  INVIS,  "On(=1) to optimize the targets based on actual rotation matrices", 0, "" };

_cvint  _filter_echo1 = { &filter_echo1,  -MAXINT,  MAXINT,  0, 0, 0, 0, 1, 1,  INVIS,  "Scan filter slot number needed for prescan", 0, "" };

_cvint  _pw_passpacket = { &pw_passpacket,  10000,  1000000,  50000,  0, 0, 0, 1, 1,  VIS,  "Duration of the passpacket sequence", 0, "" };

_cvint  _ks_rfconf = { &ks_rfconf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ks_simscan = { &ks_simscan,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Simulate slice locations if 1 (and in simulation)", 0, "" };
_cvfloat  _ks_srfact = { &ks_srfact,  0.01,  3.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "Slewrate factor (low value = slower gradients)", 0, "" };
_cvfloat  _ks_qfact = { &ks_qfact,  0.1,  40.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "Quietness factor", 0, "" };
_cvfloat  _ks_gheatfact = { &ks_gheatfact,  0.0,  1.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "Degree of honoring gradient heating calculations (0:ignore, 1:fully obey)", 0, "" };
_cvint  _ks_plot_filefmt = { &ks_plot_filefmt,  KS_PLOT_OFF, KS_PLOT_MAKEPNG, KS_PLOT_MAKEPNG,  0, 0, 0, 1, 1,  VIS,  "Plot format 0:off 1:PDF 2:SVG 3:PNG", 0, "" };
_cvint  _ks_plot_kstmp = { &ks_plot_kstmp,  FALSE, TRUE, FALSE,  0, 0, 0, 1, 1,  VIS,  "0: off 1:Copy plots to mrraw/kstmp", 0, "" };









_cvint  _ksspsat_flag = { &ksspsat_flag,  KSSPSAT_OFF,  KSSPSAT_EXPLICIT,  KSSPSAT_OFF,  0, 0, 0, 1, 1,  VIS,  "flag for ksspsat (0:Off 1:Implicit 2:Explicit)", 0, "" };
_cvfloat  _ksspsat_flip = { &ksspsat_flip,  0,  360,  KSSPSAT_DEFAULT_FLIP,  0, 0, 0, 1, 1,  VIS,  "RF flip angle [deg]", 0, "" };
_cvint  _ksspsat_rftype = { &ksspsat_rftype,  KSSPSAT_RF_STD,  KSSPSAT_RF_COMPLEX,  KSSPSAT_RF_COMPLEX,  0, 0, 0, 1, 1,  VIS,  "0: SLR Sat 1: Complex Sat", 0, "" };
_cvfloat  _ksspsat_spoilerscale = { &ksspsat_spoilerscale,  0.0,  20.0,  KSSPSAT_DEFAULT_SPOILERSCALE,  0, 0, 0, 1, 1,  VIS,  "scaling of spoiler gradient area", 0, "" };
_cvint  _ksspsat_spoilallaxes = { &ksspsat_spoilallaxes,  0.0,  1.0,  KSSPSAT_DEFAULT_SPOILALLAXES,  0, 0, 0, 1, 1,  VIS,  "apply spoiler on all axes", 0, "" };
_cvint  _ksspsat_ssi_time = { &ksspsat_ssi_time,  10,  20000,  KSSPSAT_DEFAULT_SSITIME,  0, 0, 0, 1, 1,  VIS,  "Time from eos to ssi in intern trig", 0, "" };
_cvint  _ksspsat_debug = { &ksspsat_debug,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "KSSpSat debug flag", 0, "" };
_cvint  _ksspsat_oblmethod = { &ksspsat_oblmethod,  PSD_OBL_RESTRICT,  PSD_OBL_OPTIMAL,  PSD_OBL_RESTRICT,  0, 0, 0, 1, 1,  VIS,  "obl. grad optimization for sat", 0, "" };









_cvint  _kschemsat_flag = { &kschemsat_flag,  KSCHEMSAT_OFF,  KSCHEMSAT_WATER,  KSCHEMSAT_OFF,  0, 0, 0, 1, 1,  VIS,  "flag for kschemsat (0:Off 1:FatSat 2:WaterSat)", 0, "" };
_cvfloat  _kschemsat_flip = { &kschemsat_flip,  0,  360,  KSCHEMSAT_DEFAULT_FLIP,  0, 0, 0, 1, 1,  VIS,  "RF flip angle [deg]", 0, "" };
_cvint  _kschemsat_rftype = { &kschemsat_rftype,  KSCHEMSAT_RF_STD,  KSCHEMSAT_RF_SINC,  KSCHEMSAT_RF_STD,  0, 0, 0, 1, 1,  VIS,  "RF type (0:Std 1:Sinc)", 0, "" };
_cvint  _kschemsat_sinc_bw = { &kschemsat_sinc_bw,  2,  100000,  300,  0, 0, 0, 1, 1,  VIS,  "Sinc RF BW", 0, "" };
_cvint  _kschemsat_sinc_tbp = { &kschemsat_sinc_tbp,  2,  20,  2,  0, 0, 0, 1, 1,  VIS,  "Sinc RF Time-Bandwidth-Product", 0, "" };
_cvint  _kschemsat_rfoffset = { &kschemsat_rfoffset,  -1000,  1000,  0,  0, 0, 0, 1, 1,  VIS,  "RF excitation freq offset [Hz]", 0, "" };
_cvfloat  _kschemsat_spoilerarea = { &kschemsat_spoilerarea,  0,  10000,  KSCHEMSAT_DEFAULT_SPOILERAREA,  0, 0, 0, 1, 1,  VIS,  "Spoiler area", 0, "" };
_cvint  _kschemsat_ssi_time = { &kschemsat_ssi_time,  10,  20000,  KSCHEMSAT_DEFAULT_SSITIME,  0, 0, 0, 1, 1,  VIS,  "Time from eos to ssi in intern trig", 0, "" };









_cvint  _ksinv_ssi_time = { &ksinv_ssi_time,  10,  20000,  KSINV_DEFAULT_SSITIME,  0, 0, 0, 1, 1,  VIS,  "Time from eos to ssi in intern trig", 0, "" };
_cvint  _ksinv_filltr_ssi_time = { &ksinv_filltr_ssi_time,  10,  20000,  KSINV_FILLTR_SSITIME,  0, 0, 0, 1, 1,  VIS,  "Time from eos to ssi in intern trig", 0, "" };
_cvint  _ksinv_mintr_t2flair = { &ksinv_mintr_t2flair,  0,  30000000,  KSINV_MINTR_T2FLAIR,  0, 0, 0, 1, 1,  VIS,  "Min TR for T2-FLAIR", 0, "" };
_cvint  _ksinv_mintr_t1flair = { &ksinv_mintr_t1flair,  0,  30000000,  KSINV_MINTR_T1FLAIR,  0, 0, 0, 1, 1,  VIS,  "Min TR for T1-FLAIR", 0, "" };
_cvint  _ksinv_maxtr_t1flair = { &ksinv_maxtr_t1flair,  0,  30000000,  KSINV_MAXTR_T1FLAIR,  0, 0, 0, 1, 1,  VIS,  "Max TR for T1-FLAIR", 0, "" };
_cvint  _ksinv_slicecheck = { &ksinv_slicecheck,  0.0,  1.0,  0.0,  0, 0, 0, 1, 1,  VIS,  "move slice sel to x axis for slice thickness test", 0, "" };
_cvint  _ksinv_approxti = { &ksinv_approxti,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "allow approx. TI for sliceahead IR mode", 0, "" };


_cvfloat  _ksinv_flip = { &ksinv_flip,  0,  360,  KSINV_DEFAULT_FLIP,  0, 0, 0, 1, 1,  VIS,  "RF flip angle [deg]", 0, "" };
_cvfloat  _ksinv_slthickfact = { &ksinv_slthickfact,  0,  KSINV_MAXTHICKFACT,  1.0,  0, 0, 0, 1, 1,  VIS,  "Inversion sl.thick / opslthick factor", 0, "" };
_cvint  _ksinv_rfoffset = { &ksinv_rfoffset,   -10000,  10000,  0,  0, 0, 0, 1, 1,  VIS,  "RF excitation freq offset [Hz]", 0, "" };
_cvint  _ksinv_rftype = { &ksinv_rftype,  KSINV_RF_STD,  KSINV_RF_ADIABATIC,  KSINV_RF_ADIABATIC,  0, 0, 0, 1, 1,  VIS,  "RF type (0:Std 1:Adiabatic)", 0, "" };
_cvfloat  _ksinv_spoilerarea = { &ksinv_spoilerarea,  0,  100000,  KSINV_DEFAULT_SPOILERAREA,  0, 0, 0, 1, 1,  VIS,  "Spoiler area", 0, "" };
_cvint  _ksinv_startpos = { &ksinv_startpos,  16,  10000,  KSINV_DEFAULT_STARTPOS,  0, 0, 0, 1, 1,  VIS,  "Start time of the first grad/RF inversion pulse in sequence module", 0, "" };


_cvint  _ksinv_t2prep = { &ksinv_t2prep,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Use T2 preperation instead of conventional Inversion", 0, "" };
_cvint  _ksinv_t2prep_exc_flip = { &ksinv_t2prep_exc_flip,  0,  180,  90,  0, 0, 0, 1, 1,  VIS,  "Flip angle of the excitation pulse and the flip down/up pulse for T2 prep", 0, "" };
_cvint  _ksinv_t2prep_N_Refoc = { &ksinv_t2prep_N_Refoc,  1,  16,  1,  0, 0, 0, 1, 1,  VIS,  "Number of refocusing pulses in the T2 inversion preperation", 0, "" };
_cvint  _ksinv_t2prep_TE = { &ksinv_t2prep_TE,  30000,  300000,  100000,  0, 0, 0, 1, 1,  VIS,  "TE for T2 inv preperation", 0, "" };
_cvint  _ksinv_t2prep_rftype_refoc = { &ksinv_t2prep_rftype_refoc,  KSINV_RF_STD,  KSINV_RF_ADIABATIC,  KSINV_RF_STD,  0, 0, 0, 1, 1,  VIS,  "RF type (0:Std 1:Adiabatic)", 0, "" };
_cvfloat  _ksinv_slthickfact_exc = { &ksinv_slthickfact_exc,  0,  KSINV_MAXTHICKFACT,  1.0,  0, 0, 0, 1, 1,  VIS,  "Inversion sl.thick / opslthick factor", 0, "" };







_cvint  _ksepi_diffusion_ramptime = { &ksepi_diffusion_ramptime,  300,  30000,  1500,  0, 0, 0, 1, 1,  VIS,  "Ramp times for diffusion gradients",  0, "" };
_cvfloat  _ksepi_diffusion_maxamp = { &ksepi_diffusion_maxamp,  0.0,  7.0,  3.0,  0, 0, 0, 1, 1,  VIS,  "Cap for diffusion gradient amplitude",  0, "" };
_cvfloat  _ksepi_diffusion_amp = { &ksepi_diffusion_amp,  0.0,  7.0,  0.0,  0, 0, 0, 1, 1,  VIS,  "View-only: Current diffusion gradient amplitude",  0, "" };
_cvint  _ksepi_diffusion_echotime = { &ksepi_diffusion_echotime,  0,  MAXINT,  0,  0, 0, 0, 1, 1,  VIS,  "View-only: Echo time necessary to meet the desired b-value",  0, "" };
_cvfloat  _ksepi_diffusion_2ndcrushfact = { &ksepi_diffusion_2ndcrushfact,  0.1,  10.0,  2.0,  0, 0, 0, 1, 1,  VIS,  "Scale factor for 2nd crusher for opdualspinecho", 0, "" };
_cvint  _ksepi_diffusion_returnmode = { &ksepi_diffusion_returnmode,  OFFLINE_DIFFRETURN_ALL,  128,  OFFLINE_DIFFRETURN_ALL,  0, 0, 0, 1, 1,  VIS,  "Diff maps All:0 Acq:1 b0:2 DWI:4 ADC:8 Exp:16 FA:32 cFA:64", 0, "" };












_cvfloat  _ksepi_excthickness = { &ksepi_excthickness, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _ksepi_gscalerfexc = { &ksepi_gscalerfexc,  0.1,  3.0,  0.9,  0, 0, 0, 1, 1,  VIS,  "Excitation slice thk scaling (< 1.0 thicker slice)", 0, "" };
_cvint  _ksepi_slicecheck = { &ksepi_slicecheck,  0.0,  1.0,  0.0,  0, 0, 0, 1, 1,  VIS,  "move readout to z axis for slice thickness test", 0, "" };
_cvfloat  _ksepi_spoilerarea = { &ksepi_spoilerarea,  0.0,  10000.0,  3000.0,  0, 0, 0, 1, 1,  VIS,  "ksepi ksepi.spoiler gradient area", 0, "" };
_cvint  _ksepi_rfspoiling = { &ksepi_rfspoiling,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Enable RF spoiling 1:on 0:off", 0, "" };
_cvint  _ksepi_fse90 = { &ksepi_fse90,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Use FSE90 instead of SPSP for non-fatsat", 0, "" };
_cvint  _ksepi_rf3Dopt = { &ksepi_rf3Dopt,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Choose optimized SPSP pulse for 3D [0:OFF]", 0, "" };
_cvfloat  _ksepi_kissoff_factor = { &ksepi_kissoff_factor,  0,  1,  0.04,  0, 0, 0, 1, 1,  VIS,  "Slice oversampling fraction on each side (3D)", 0, "" };



_cvfloat  _ksepi_crusherscale = { &ksepi_crusherscale,   -20.0,  20.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "scaling of crusher gradient area", 0, "" };
_cvfloat  _ksepi_gscalerfref = { &ksepi_gscalerfref,  0.1,  3.0,  0.9,  0, 0, 0, 1, 1,  VIS,  "Refocusing slice thk scaling (< 1.0 thicker slice)", 0, "" };




_cvint  _ksepi_rampsampling = { &ksepi_rampsampling,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Rampsampling [0:OFF 1:ON]", 0, "" };
_cvint  _ksepi_readlobegap = { &ksepi_readlobegap,  0,  10000,  0,  0, 0, 0, 1, 1,  VIS,  "extra gap between readout lobes [us]", 0, "" };
_cvint  _ksepi_echogap = { &ksepi_echogap,  0,  100000,  0,  0, 0, 0, 1, 1,  VIS,  "extra gap between EPI echoes [us]", 0, "" };
_cvint  _ksepi_readsign = { &ksepi_readsign,   -1.0,  1.0,  1.0,  0, 0, 0, 1, 1,  VIS,  "Readout polarity: +1/-1", 0, "" };
_cvfloat  _ksepi_readampmax = { &ksepi_readampmax,  0.0,  5.0,  3.0,  0, 0, 0, 1, 1,  VIS,  "Max grad amp for EPI readout lobes", 0, "" };
_cvfloat  _ksepi_sr = { &ksepi_sr,  0.0,  MAXFLOAT,  0.01,  0, 0, 0, 1, 1,  VIS,  "EPI SR: amp/ramp [(G/cm) / us]", 0, "" };
_cvint  _ksepi_esp = { &ksepi_esp,  0,  1000000,  0,  0, 0, 0, 1, 1,  VIS,  "View-only: Echo spacing in [us]", 0, "" };




_cvint  _ksepi_blipsign = { &ksepi_blipsign,  KS_EPI_NEGBLIPS,  KS_EPI_POSBLIPS,  KS_EPI_POSBLIPS,  0, 0, 0, 1, 1,  VIS,  "Blip polarity: +1/-1", 0, "" };
_cvint  _ksepi_echotime_shifting = { &ksepi_echotime_shifting,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Enable echo time shifting for multi shot", 0, "" };
_cvint  _ksepi_kynover = { &ksepi_kynover,  KSEPI_MINHNOVER,  512,  24,  0, 0, 0, 1, 1,  VIS,  "#extralines for MinTE", 0, "" };
_cvint  _ksepi_kznover = { &ksepi_kznover,  0,  512,  0,  0, 0, 0, 1, 1,  VIS,  "#extralines in kz", 0, "" };
_cvint  _ksepi_ky_R = { &ksepi_ky_R,  1,  512,  1,  0, 0, 0, 1, 1,  VIS,  "Acceleration in ky", 0, "" };
_cvint  _ksepi_kz_R = { &ksepi_kz_R,  1,  512,  1,  0, 0, 0, 1, 1,  VIS,  "Acceleration in kz", 0, "" };
_cvint  _ksepi_kz_nacslines = { &ksepi_kz_nacslines,  0,  512,  16,  0, 0, 0, 1, 1,  VIS,  "Number of acs lines in kz", 0, "" };
_cvint  _ksepi_caipi = { &ksepi_caipi,  0,  512,  0,  0, 0, 0, 1, 1,  VIS,  "CAIPIRINHA shift (affects 3D epi only. Set 0 for no CAIPI)", 0, "" };




_cvint  _ksepi_fcy = { &ksepi_fcy,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Flowcomp Y when opfcomp", 0, "" };
_cvint  _ksepi_fcz = { &ksepi_fcz,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Flowcomp Z when opfcomp", 0, "" };




_cvint  _ksepi_fleet = { &ksepi_fleet,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "FLEET calibration volume [0:OFF 1:ON]", 0, "" };
_cvfloat  _ksepi_fleet_flip = { &ksepi_fleet_flip,  0.1,  90.0,  15.0,  0, 0, 0, 1, 1,  VIS,  "FLEET flip angle [deg]", 0, "" };
_cvint  _ksepi_fleet_dda = { &ksepi_fleet_dda,  0,  200,  0,  0, 0, 0, 1, 1,  VIS,  "Dummies for FLEET module", 0, "" };
_cvint  _ksepi_fleet_num_ky = { &ksepi_fleet_num_ky,  1,  512,  36,  0, 0, 0, 1, 1,  VIS,  "Number of ky encodes for FLEET module", 0, "" };
_cvint  _ksepi_fleet_num_kz = { &ksepi_fleet_num_kz,  1,  512,  24,  0, 0, 0, 1, 1,  VIS,  "Number of kz encodes for FLEET module (3D only)", 0, "" };




_cvint  _ksepi_reflines = { &ksepi_reflines,  0,  96,  0,  0, 0, 0, 1, 1,  VIS,  "Number of phase reference lines per shot", 0, "" };




_cvint  _ksepi_swi_returnmode = { &ksepi_swi_returnmode,  0,  7,  0,  0, 0, 0, 1, 1,  VIS,  "SWI recon 0:Off 1:Acq 2:SWI 4:SWIphase", 0, "" };




_cvint  _ksepi_pos_start = { &ksepi_pos_start,  0,  MAXINT,  KS_RFSSP_PRETIME,  0, 0, 0, 1, 1,  INVIS,  "us from start until the first waveform begins", 0, "" };
_cvint  _ksepi_ssi_time = { &ksepi_ssi_time,  32,  MAXINT,  KSEPI_DEFAULT_SSI_TIME,  0, 0, 0, 1, 1,  VIS,  "time from eos to ssi in intern trig", 0, "" };
_cvint  _ksepi_dda = { &ksepi_dda,  0,  200,  1,  0, 0, 0, 1, 1,  VIS,  "Number of dummy scans for steady state", 0, "" };
_cvint  _ksepi_debug = { &ksepi_debug,  0.0,  100,  1.0,  0, 0, 0, 1, 1,  VIS,  "Write out e.g. plot files (unless scan on HW)", 0, "" };
_cvint  _ksepi_imsize = { &ksepi_imsize,  KS_IMSIZE_NATIVE,  KS_IMSIZE_MIN256,  KS_IMSIZE_POW2,  0, 0, 0, 1, 1,  VIS,  "img. upsamp. [0:native 1:pow2 2:min256]", 0, "" };
_cvint  _ksepi_abort_on_kserror = { &ksepi_abort_on_kserror,  0,  1,  0,  0, 0, 0, 1, 1,  VIS,  "Hard program abort on ks_error [0:OFF 1:ON]", 0, "" };
_cvint  _ksepi_onlinerecon = { &ksepi_onlinerecon,  0,  MAXVAL_KSEPI_ONLINERECON,  0,  0, 0, 0, 1, 1,  VIS,  "Online recon [0:OFF 1:ON]", 0, "" };
_cvint  _ksepi_ghostcorr = { &ksepi_ghostcorr,  0,  1,  1,  0, 0, 0, 1, 1,  VIS,  "Ghost correction [0:OFF 1:ON]", 0, "" };
_cvint  _ksepi_ref_nsegments = { &ksepi_ref_nsegments,  1,  512,  1,  0, 0, 0, 1, 1,  VIS,  "Number of kz segments in reference volume", 0, "" };
_cvint  _ksepi_multishot_control = { &ksepi_multishot_control,  KSEPI_MULTISHOT_OFF,  KSEPI_MULTISHOT_B0VOLS,  KSEPI_MULTISHOT_B0VOLS,  0, 0, 0, 1, 1,  VIS,  "0:PI 1:All MulShot 2:1stMulShot 3:b0MulShot", 0, "" };
_cvint  _ksepi_multivolpfile = { &ksepi_multivolpfile,  FALSE,  TRUE,  TRUE,  0, 0, 0, 1, 1,  VIS,  "Store all data in a single Pfile (pre DV26)", 0, "" };













_cvfloat  _a_rf1mps1 = { &a_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1mps1 = { &ia_rf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1mps1 = { &pw_rf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1mps1 = { &res_rf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1mps1 = { &cyc_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1mps1 = { &off_rf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1mps1 = { &alpha_rf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1mps1 = { &wg_rf1mps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf1mps1 = { &a_gyrf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf1mps1 = { &ia_gyrf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1mps1a = { &pw_gyrf1mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1mps1d = { &pw_gyrf1mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1mps1 = { &pw_gyrf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf1mps1 = { &wg_gyrf1mps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1mps1 = { &a_gy1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1mps1 = { &ia_gy1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1mps1a = { &pw_gy1mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1mps1d = { &pw_gy1mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1mps1 = { &pw_gy1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1mps1 = { &wg_gy1mps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1mps1 = { &a_gzrf1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1mps1 = { &ia_gzrf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1mps1a = { &pw_gzrf1mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1mps1d = { &pw_gzrf1mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1mps1 = { &pw_gzrf1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf1mps1 = { &wg_gzrf1mps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1mps1 = { &a_gz1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1mps1 = { &ia_gz1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1mps1a = { &pw_gz1mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1mps1d = { &pw_gz1mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1mps1 = { &pw_gz1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1mps1 = { &wg_gz1mps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1mps1 = { &a_gx1mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1mps1 = { &ia_gx1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1mps1a = { &pw_gx1mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1mps1d = { &pw_gx1mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1mps1 = { &pw_gx1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1mps1 = { &wg_gx1mps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2mps1 = { &a_gzrf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2mps1 = { &ia_gzrf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2mps1a = { &pw_gzrf2mps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2mps1d = { &pw_gzrf2mps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2mps1 = { &pw_gzrf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf2mps1 = { &a_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2mps1 = { &ia_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2mps1 = { &pw_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2mps1 = { &res_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf2mps1 = { &temp_res_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2mps1 = { &cyc_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2mps1 = { &off_rf2mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2mps1 = { &alpha_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf2mps1 = { &thk_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf2mps1 = { &gscale_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf2mps1 = { &flip_rf2mps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2mps1 = { &wg_rf2mps1,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2lmps1 = { &a_gzrf2lmps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2lmps1 = { &ia_gzrf2lmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lmps1a = { &pw_gzrf2lmps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lmps1d = { &pw_gzrf2lmps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lmps1 = { &pw_gzrf2lmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2lmps1 = { &wg_gzrf2lmps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2rmps1 = { &a_gzrf2rmps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2rmps1 = { &ia_gzrf2rmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rmps1a = { &pw_gzrf2rmps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rmps1d = { &pw_gzrf2rmps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rmps1 = { &pw_gzrf2rmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2rmps1 = { &wg_gzrf2rmps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwmps1 = { &a_gxwmps1, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwmps1 = { &ia_gxwmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwmps1a = { &pw_gxwmps1a, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwmps1d = { &pw_gxwmps1d, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwmps1 = { &pw_gxwmps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwmps1 = { &wg_gxwmps1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1mps1 = { &filter_echo1mps1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gzrf1cfl = { &a_gzrf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1cfl = { &ia_gzrf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfla = { &pw_gzrf1cfla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfld = { &pw_gzrf1cfld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfl = { &pw_gzrf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1cfl = { &a_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1cfl = { &ia_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1cfl = { &pw_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1cfl = { &res_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1cfl = { &temp_res_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1cfl = { &cyc_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1cfl = { &off_rf1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1cfl = { &alpha_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1cfl = { &thk_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1cfl = { &gscale_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1cfl = { &flip_rf1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1cfl = { &wg_rf1cfl,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1cfl = { &a_gz1cfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1cfl = { &ia_gz1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1cfla = { &pw_gz1cfla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1cfld = { &pw_gz1cfld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1cfl = { &pw_gz1cfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1cfl = { &wg_gz1cfl,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_cfl_fid = { &filter_cfl_fid, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gykcfl = { &a_gykcfl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykcfl = { &ia_gykcfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfla = { &pw_gykcfla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfld = { &pw_gykcfld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfl = { &pw_gykcfl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykcfl = { &wg_gykcfl,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkrcvn = { &a_gxkrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkrcvn = { &ia_gxkrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrcvna = { &pw_gxkrcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrcvnd = { &pw_gxkrcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrcvn = { &pw_gxkrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkrcvn = { &wg_gxkrcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykrcvn = { &a_gykrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykrcvn = { &ia_gykrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykrcvna = { &pw_gykrcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykrcvnd = { &pw_gykrcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykrcvn = { &pw_gykrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykrcvn = { &wg_gykrcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkrcvn = { &a_gzkrcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkrcvn = { &ia_gzkrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrcvna = { &pw_gzkrcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrcvnd = { &pw_gzkrcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrcvn = { &pw_gzkrcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkrcvn = { &wg_gzkrcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_grd_trig = { &pw_grd_trig, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_grd_trig = { &wg_grd_trig,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxk2rcvn = { &a_gxk2rcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxk2rcvn = { &ia_gxk2rcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxk2rcvna = { &pw_gxk2rcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxk2rcvnd = { &pw_gxk2rcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxk2rcvn = { &pw_gxk2rcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxk2rcvn = { &wg_gxk2rcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyk2rcvn = { &a_gyk2rcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyk2rcvn = { &ia_gyk2rcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyk2rcvna = { &pw_gyk2rcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyk2rcvnd = { &pw_gyk2rcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyk2rcvn = { &pw_gyk2rcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyk2rcvn = { &wg_gyk2rcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzk2rcvn = { &a_gzk2rcvn, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzk2rcvn = { &ia_gzk2rcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzk2rcvna = { &pw_gzk2rcvna, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzk2rcvnd = { &pw_gzk2rcvnd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzk2rcvn = { &pw_gzk2rcvn, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzk2rcvn = { &wg_gzk2rcvn,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rcvn_wait = { &pw_rcvn_wait, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rcvn_wait = { &wg_rcvn_wait,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _ia_rcvrbl = { &ia_rcvrbl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _filter_rcvn_fid = { &filter_rcvn_fid, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _ia_rcvrbl2 = { &ia_rcvrbl2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gzrf0cfh = { &a_gzrf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf0cfh = { &ia_gzrf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0cfha = { &pw_gzrf0cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0cfhd = { &pw_gzrf0cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf0cfh = { &pw_gzrf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzrf0cfh = { &res_gzrf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf0cfh = { &a_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf0cfh = { &ia_rf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf0cfh = { &pw_rf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf0cfh = { &res_rf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf0cfh = { &cyc_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf0cfh = { &off_rf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf0cfh = { &alpha_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf0cfh = { &thk_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf0cfh = { &gscale_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf0cfh = { &flip_rf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf0cfh = { &wg_rf0cfh,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_omegarf0cfh = { &a_omegarf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_omegarf0cfh = { &ia_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_omegarf0cfh = { &pw_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_omegarf0cfh = { &res_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_omegarf0cfh = { &off_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_omegarf0cfh = { &rfslot_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_omegarf0cfh = { &gscale_omegarf0cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_omegarf0cfh = { &n_omegarf0cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_omegarf0cfh = { &wg_omegarf0cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf0kcfh = { &a_gyrf0kcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf0kcfh = { &ia_gyrf0kcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf0kcfha = { &pw_gyrf0kcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf0kcfhd = { &pw_gyrf0kcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf0kcfh = { &pw_gyrf0kcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf0kcfh = { &wg_gyrf0kcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_zticfh = { &pw_zticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_zticfh = { &wg_zticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rticfh = { &pw_rticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rticfh = { &wg_rticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_xticfh = { &pw_xticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_xticfh = { &wg_xticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_yticfh = { &pw_yticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_yticfh = { &wg_yticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_sticfh = { &pw_sticfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_sticfh = { &wg_sticfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1cfh = { &a_gzrf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1cfh = { &ia_gzrf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfha = { &pw_gzrf1cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfhd = { &pw_gzrf1cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cfh = { &pw_gzrf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1cfh = { &a_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1cfh = { &ia_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1cfh = { &pw_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1cfh = { &res_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1cfh = { &temp_res_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1cfh = { &cyc_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1cfh = { &off_rf1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1cfh = { &alpha_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1cfh = { &thk_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1cfh = { &gscale_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1cfh = { &flip_rf1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1cfh = { &wg_rf1cfh,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rf2cfh = { &a_rf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2cfh = { &ia_rf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2cfh = { &pw_rf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2cfh = { &res_rf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2cfh = { &cyc_rf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2cfh = { &off_rf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2cfh = { &alpha_rf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2cfh = { &wg_rf2cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rf3cfh = { &a_rf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf3cfh = { &ia_rf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf3cfh = { &pw_rf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf3cfh = { &res_rf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf3cfh = { &cyc_rf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf3cfh = { &off_rf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf3cfh = { &alpha_rf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf3cfh = { &wg_rf3cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rf4cfh = { &a_rf4cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf4cfh = { &ia_rf4cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf4cfh = { &pw_rf4cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf4cfh = { &res_rf4cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf4cfh = { &cyc_rf4cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf4cfh = { &off_rf4cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf4cfh = { &alpha_rf4cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf4cfh = { &wg_rf4cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxrf2cfh = { &a_gxrf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxrf2cfh = { &ia_gxrf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrf2cfha = { &pw_gxrf2cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrf2cfhd = { &pw_gxrf2cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxrf2cfh = { &pw_gxrf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxrf2cfh = { &wg_gxrf2cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf2cfh = { &a_gyrf2cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf2cfh = { &ia_gyrf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2cfha = { &pw_gyrf2cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2cfhd = { &pw_gyrf2cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf2cfh = { &pw_gyrf2cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf2cfh = { &wg_gyrf2cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2lcfh = { &a_gzrf2lcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2lcfh = { &ia_gzrf2lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lcfha = { &pw_gzrf2lcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lcfhd = { &pw_gzrf2lcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2lcfh = { &pw_gzrf2lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2lcfh = { &wg_gzrf2lcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2rcfh = { &a_gzrf2rcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2rcfh = { &ia_gzrf2rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rcfha = { &pw_gzrf2rcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rcfhd = { &pw_gzrf2rcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2rcfh = { &pw_gzrf2rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf2rcfh = { &wg_gzrf2rcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf3cfh = { &a_gyrf3cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf3cfh = { &ia_gyrf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf3cfha = { &pw_gyrf3cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf3cfhd = { &pw_gyrf3cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf3cfh = { &pw_gyrf3cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf3cfh = { &wg_gyrf3cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf3lcfh = { &a_gzrf3lcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf3lcfh = { &ia_gzrf3lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3lcfha = { &pw_gzrf3lcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3lcfhd = { &pw_gzrf3lcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3lcfh = { &pw_gzrf3lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf3lcfh = { &wg_gzrf3lcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf3rcfh = { &a_gzrf3rcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf3rcfh = { &ia_gzrf3rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3rcfha = { &pw_gzrf3rcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3rcfhd = { &pw_gzrf3rcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3rcfh = { &pw_gzrf3rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf3rcfh = { &wg_gzrf3rcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1cfh = { &a_gy1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1cfh = { &ia_gy1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cfha = { &pw_gy1cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cfhd = { &pw_gy1cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cfh = { &pw_gy1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1cfh = { &wg_gy1cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1cfh = { &a_gx1cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1cfh = { &ia_gx1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cfha = { &pw_gx1cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cfhd = { &pw_gx1cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cfh = { &pw_gx1cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1cfh = { &wg_gx1cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf4cfh = { &a_gzrf4cfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf4cfh = { &ia_gzrf4cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4cfha = { &pw_gzrf4cfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4cfhd = { &pw_gzrf4cfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4cfh = { &pw_gzrf4cfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf4cfh = { &wg_gzrf4cfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_slice1 = { &pw_isi_slice1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_slice1 = { &wg_isi_slice1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_slice1 = { &pw_rot_slice1, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_slice1 = { &wg_rot_slice1,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_isi_slice2 = { &pw_isi_slice2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_isi_slice2 = { &wg_isi_slice2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _pw_rot_slice2 = { &pw_rot_slice2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rot_slice2 = { &wg_rot_slice2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf4lcfh = { &a_gzrf4lcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf4lcfh = { &ia_gzrf4lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4lcfha = { &pw_gzrf4lcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4lcfhd = { &pw_gzrf4lcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4lcfh = { &pw_gzrf4lcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf4lcfh = { &wg_gzrf4lcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf4rcfh = { &a_gzrf4rcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf4rcfh = { &ia_gzrf4rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4rcfha = { &pw_gzrf4rcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4rcfhd = { &pw_gzrf4rcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf4rcfh = { &pw_gzrf4rcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf4rcfh = { &wg_gzrf4rcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_cfh_fid = { &filter_cfh_fid, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gykcfh = { &a_gykcfh, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykcfh = { &ia_gykcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfha = { &pw_gykcfha, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfhd = { &pw_gykcfhd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykcfh = { &pw_gykcfh, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykcfh = { &wg_gykcfh,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _ia_contrfhubsel = { &ia_contrfhubsel, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _ia_contrfsel = { &ia_contrfsel, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _pw_csw_wait = { &pw_csw_wait, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_csw_wait = { &wg_csw_wait,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1ftg = { &a_gzrf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1ftg = { &ia_gzrf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1ftga = { &pw_gzrf1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1ftgd = { &pw_gzrf1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1ftg = { &pw_gzrf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1ftg = { &a_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1ftg = { &ia_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1ftg = { &pw_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1ftg = { &res_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1ftg = { &temp_res_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1ftg = { &cyc_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1ftg = { &off_rf1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1ftg = { &alpha_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1ftg = { &thk_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1ftg = { &gscale_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1ftg = { &flip_rf1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1ftg = { &wg_rf1ftg,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1ftg = { &a_gz1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1ftg = { &ia_gz1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1ftga = { &pw_gz1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1ftgd = { &pw_gz1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1ftg = { &pw_gz1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1ftg = { &wg_gz1ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2ftg = { &a_gzrf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2ftg = { &ia_gzrf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2ftga = { &pw_gzrf2ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2ftgd = { &pw_gzrf2ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2ftg = { &pw_gzrf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf2ftg = { &a_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2ftg = { &ia_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2ftg = { &pw_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2ftg = { &res_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf2ftg = { &temp_res_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2ftg = { &cyc_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2ftg = { &off_rf2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2ftg = { &alpha_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf2ftg = { &thk_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf2ftg = { &gscale_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf2ftg = { &flip_rf2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2ftg = { &wg_rf2ftg,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz2ftg = { &a_gz2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz2ftg = { &ia_gz2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2ftga = { &pw_gz2ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2ftgd = { &pw_gz2ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2ftg = { &pw_gz2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz2ftg = { &wg_gz2ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf3ftg = { &a_gzrf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf3ftg = { &ia_gzrf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3ftga = { &pw_gzrf3ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3ftgd = { &pw_gzrf3ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf3ftg = { &pw_gzrf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf3ftg = { &a_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf3ftg = { &ia_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf3ftg = { &pw_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf3ftg = { &res_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf3ftg = { &temp_res_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf3ftg = { &cyc_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf3ftg = { &off_rf3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf3ftg = { &alpha_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf3ftg = { &thk_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf3ftg = { &gscale_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf3ftg = { &flip_rf3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf3ftg = { &wg_rf3ftg,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz3ftg = { &a_gz3ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz3ftg = { &ia_gz3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz3ftga = { &pw_gz3ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz3ftgd = { &pw_gz3ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz3ftg = { &pw_gz3ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz3ftg = { &wg_gz3ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1ftg = { &a_gx1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1ftg = { &ia_gx1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1ftga = { &pw_gx1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1ftgd = { &pw_gx1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1ftg = { &pw_gx1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1ftg = { &wg_gx1ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1bftg = { &a_gx1bftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1bftg = { &ia_gx1bftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bftga = { &pw_gx1bftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bftgd = { &pw_gx1bftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bftg = { &pw_gx1bftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1bftg = { &wg_gx1bftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxw1ftg = { &a_gxw1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw1ftg = { &ia_gxw1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1ftga = { &pw_gxw1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1ftgd = { &pw_gxw1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1ftg = { &pw_gxw1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxw1ftg = { &wg_gxw1ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_postgxw1ftg = { &a_postgxw1ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_postgxw1ftg = { &ia_postgxw1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_postgxw1ftga = { &pw_postgxw1ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_postgxw1ftgd = { &pw_postgxw1ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_postgxw1ftg = { &pw_postgxw1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_postgxw1ftg = { &wg_postgxw1ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1ftg = { &filter_echo1ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gz2bftg = { &a_gz2bftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz2bftg = { &ia_gz2bftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2bftga = { &pw_gz2bftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2bftgd = { &pw_gz2bftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2bftg = { &pw_gz2bftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz2bftg = { &wg_gz2bftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx2ftg = { &a_gx2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx2ftg = { &ia_gx2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2ftga = { &pw_gx2ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2ftgd = { &pw_gx2ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2ftg = { &pw_gx2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx2ftg = { &wg_gx2ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxw2ftg = { &a_gxw2ftg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw2ftg = { &ia_gxw2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2ftga = { &pw_gxw2ftga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2ftgd = { &pw_gxw2ftgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2ftg = { &pw_gxw2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxw2ftg = { &wg_gxw2ftg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx2test = { &a_gx2test, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx2test = { &ia_gx2test, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2testa = { &pw_gx2testa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2testd = { &pw_gx2testd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2test = { &pw_gx2test, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx2test = { &wg_gx2test,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo2ftg = { &filter_echo2ftg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_rf1xtg = { &a_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1xtg = { &ia_rf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1xtg = { &pw_rf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1xtg = { &res_rf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1xtg = { &cyc_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1xtg = { &off_rf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1xtg = { &alpha_rf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1xtg = { &wg_rf1xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gyrf1xtg = { &a_gyrf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gyrf1xtg = { &ia_gyrf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1xtga = { &pw_gyrf1xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1xtgd = { &pw_gyrf1xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gyrf1xtg = { &pw_gyrf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gyrf1xtg = { &wg_gyrf1xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1xtg = { &a_gzrf1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1xtg = { &ia_gzrf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1xtga = { &pw_gzrf1xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1xtgd = { &pw_gzrf1xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1xtg = { &pw_gzrf1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf1xtg = { &wg_gzrf1xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykxtgl = { &a_gykxtgl, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykxtgl = { &ia_gykxtgl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgla = { &pw_gykxtgla, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgld = { &pw_gykxtgld, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgl = { &pw_gykxtgl, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykxtgl = { &wg_gykxtgl,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };



_cvfloat  _a_rf3xtg = { &a_rf3xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf3xtg = { &ia_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf3xtg = { &pw_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf3xtg = { &res_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf3xtg = { &off_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf3xtg = { &alpha_rf3xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf3xtg = { &gscale_rf3xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf3xtg = { &flip_rf3xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_phs_rf3xtg = { &ia_phs_rf3xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf3xtg = { &wg_rf3xtg,  0,  WF_MAX_PROCESSORS*2-1,  
                                            TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1xtg = { &a_gz1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1xtg = { &ia_gz1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1xtga = { &pw_gz1xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1xtgd = { &pw_gz1xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1xtg = { &pw_gz1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1xtg = { &wg_gz1xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf2xtg = { &a_gzrf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf2xtg = { &ia_gzrf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2xtga = { &pw_gzrf2xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2xtgd = { &pw_gzrf2xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf2xtg = { &pw_gzrf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf2xtg = { &a_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf2xtg = { &ia_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf2xtg = { &pw_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf2xtg = { &res_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf2xtg = { &temp_res_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf2xtg = { &cyc_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf2xtg = { &off_rf2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf2xtg = { &alpha_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf2xtg = { &thk_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf2xtg = { &gscale_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf2xtg = { &flip_rf2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf2xtg = { &wg_rf2xtg,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz2xtg = { &a_gz2xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz2xtg = { &ia_gz2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2xtga = { &pw_gz2xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2xtgd = { &pw_gz2xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz2xtg = { &pw_gz2xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz2xtg = { &wg_gz2xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };



_cvfloat  _a_rf4xtg = { &a_rf4xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf4xtg = { &ia_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf4xtg = { &pw_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf4xtg = { &res_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf4xtg = { &off_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf4xtg = { &alpha_rf4xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf4xtg = { &gscale_rf4xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf4xtg = { &flip_rf4xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_phs_rf4xtg = { &ia_phs_rf4xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf4xtg = { &wg_rf4xtg,  0,  WF_MAX_PROCESSORS*2-1,  
                                            TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gykxtgr = { &a_gykxtgr, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gykxtgr = { &ia_gykxtgr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgra = { &pw_gykxtgra, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgrd = { &pw_gykxtgrd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gykxtgr = { &pw_gykxtgr, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gykxtgr = { &wg_gykxtgr,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1bxtg = { &a_gx1bxtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1bxtg = { &ia_gx1bxtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bxtga = { &pw_gx1bxtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bxtgd = { &pw_gx1bxtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1bxtg = { &pw_gx1bxtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1bxtg = { &wg_gx1bxtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxw1xtg = { &a_gxw1xtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw1xtg = { &ia_gxw1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1xtga = { &pw_gxw1xtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1xtgd = { &pw_gxw1xtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw1xtg = { &pw_gxw1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxw1xtg = { &wg_gxw1xtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1xtg = { &filter_echo1xtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gzrf1as = { &a_gzrf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1as = { &ia_gzrf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1asa = { &pw_gzrf1asa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1asd = { &pw_gzrf1asd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1as = { &pw_gzrf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_rf1as = { &a_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1as = { &ia_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1as = { &pw_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1as = { &res_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _temp_res_rf1as = { &temp_res_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _cyc_rf1as = { &cyc_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1as = { &off_rf1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _alpha_rf1as = { &alpha_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _thk_rf1as = { &thk_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _gscale_rf1as = { &gscale_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _flip_rf1as = { &flip_rf1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1as = { &wg_rf1as,  0,  WF_MAX_PROCESSORS*2-1, 
                                           TYPRHO1,  0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1as = { &a_gz1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1as = { &ia_gz1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1asa = { &pw_gz1asa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1asd = { &pw_gz1asd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1as = { &pw_gz1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1as = { &wg_gz1as,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwas = { &a_gxwas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwas = { &ia_gxwas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwasa = { &pw_gxwasa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwasd = { &pw_gxwasd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwas = { &pw_gxwas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwas = { &wg_gxwas,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1as = { &filter_echo1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gx1as = { &a_gx1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1as = { &ia_gx1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1asa = { &pw_gx1asa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1asd = { &pw_gx1asd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1as = { &pw_gx1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1as = { &wg_gx1as,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1as = { &a_gy1as, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1asa = { &a_gy1asa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1asb = { &a_gy1asb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1as = { &ia_gy1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1aswa = { &ia_gy1aswa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1aswb = { &ia_gy1aswb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1asa = { &pw_gy1asa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1asd = { &pw_gy1asd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1as = { &pw_gy1as, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1as = { &wg_gy1as,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1ras = { &a_gy1ras, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rasa = { &a_gy1rasa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rasb = { &a_gy1rasb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1ras = { &ia_gy1ras, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1raswa = { &ia_gy1raswa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1raswb = { &ia_gy1raswb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rasa = { &pw_gy1rasa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rasd = { &pw_gy1rasd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1ras = { &pw_gy1ras, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1ras = { &wg_gy1ras,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkas = { &a_gxkas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkas = { &ia_gxkas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkasa = { &pw_gxkasa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkasd = { &pw_gxkasd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkas = { &pw_gxkas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkas = { &wg_gxkas,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkas = { &a_gzkas, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkas = { &ia_gzkas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkasa = { &pw_gzkasa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkasd = { &pw_gzkasd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkas = { &pw_gzkas, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkas = { &wg_gzkas,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_xdixon = { &a_xdixon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_xdixon = { &ia_xdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_xdixon = { &pw_xdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_xdixon = { &wg_xdixon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_ydixon = { &a_ydixon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_ydixon = { &ia_ydixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_ydixon = { &pw_ydixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_ydixon = { &wg_ydixon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_zdixon = { &a_zdixon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_zdixon = { &ia_zdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_zdixon = { &pw_zdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_zdixon = { &wg_zdixon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_sdixon = { &a_sdixon, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_sdixon = { &ia_sdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_sdixon = { &pw_sdixon, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_sdixon = { &wg_sdixon,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_sdixon2 = { &a_sdixon2, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_sdixon2 = { &ia_sdixon2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_sdixon2 = { &pw_sdixon2, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_sdixon2 = { &wg_sdixon2,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _ia_dDDIQ = { &ia_dDDIQ, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvint  _res_rf1rs = { &res_rf1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1rs = { &wg_rf1rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1rs = { &a_gzrf1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1rs = { &ia_gzrf1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1rsa = { &pw_gzrf1rsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1rsd = { &pw_gzrf1rsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1rs = { &pw_gzrf1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf1rs = { &wg_gzrf1rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkbsrs = { &a_gxkbsrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkbsrs = { &ia_gxkbsrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkbsrsa = { &pw_gxkbsrsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkbsrsd = { &pw_gxkbsrsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkbsrs = { &pw_gxkbsrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkbsrs = { &wg_gxkbsrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1rs = { &a_gz1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1rs = { &ia_gz1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1rsa = { &pw_gz1rsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1rsd = { &pw_gz1rsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1rs = { &pw_gz1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1rs = { &wg_gz1rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rfbrs = { &a_rfbrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfbrs = { &ia_rfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfbrs = { &pw_rfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfbrs = { &res_rfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfbrs = { &off_rfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_rfbrs = { &rfslot_rfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_rfbrs = { &gscale_rfbrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_rfbrs = { &n_rfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfbrs = { &wg_rfbrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_thetarfbrs = { &a_thetarfbrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_thetarfbrs = { &ia_thetarfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thetarfbrs = { &pw_thetarfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_thetarfbrs = { &res_thetarfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_thetarfbrs = { &off_thetarfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_thetarfbrs = { &rfslot_thetarfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_thetarfbrs = { &gscale_thetarfbrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_thetarfbrs = { &n_thetarfbrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_thetarfbrs = { &wg_thetarfbrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkbsrs = { &a_gzkbsrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkbsrs = { &ia_gzkbsrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkbsrsa = { &pw_gzkbsrsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkbsrsd = { &pw_gzkbsrsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkbsrs = { &pw_gzkbsrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkbsrs = { &wg_gzkbsrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwrs = { &a_gxwrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwrs = { &ia_gxwrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwrsa = { &pw_gxwrsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwrsd = { &pw_gxwrsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwrs = { &pw_gxwrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwrs = { &wg_gxwrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1rs = { &filter_echo1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gx2rs = { &a_gx2rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx2rs = { &ia_gx2rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2rsa = { &pw_gx2rsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2rsd = { &pw_gx2rsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2rs = { &pw_gx2rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx2rs = { &wg_gx2rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy2rs = { &a_gy2rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy2rsa = { &a_gy2rsa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy2rsb = { &a_gy2rsb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy2rs = { &ia_gy2rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy2rswa = { &ia_gy2rswa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy2rswb = { &ia_gy2rswb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy2rsa = { &pw_gy2rsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy2rsd = { &pw_gy2rsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy2rs = { &pw_gy2rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy2rs = { &wg_gy2rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxw2rs = { &a_gxw2rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw2rs = { &ia_gxw2rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2rsa = { &pw_gxw2rsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2rsd = { &pw_gxw2rsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2rs = { &pw_gxw2rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxw2rs = { &wg_gxw2rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1rs = { &a_gx1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1rs = { &ia_gx1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1rsa = { &pw_gx1rsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1rsd = { &pw_gx1rsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1rs = { &pw_gx1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1rs = { &wg_gx1rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1rrs = { &a_gy1rrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rrsa = { &a_gy1rrsa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rrsb = { &a_gy1rrsb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rrs = { &ia_gy1rrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rrswa = { &ia_gy1rrswa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rrswb = { &ia_gy1rrswb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rrsa = { &pw_gy1rrsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rrsd = { &pw_gy1rrsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rrs = { &pw_gy1rrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1rrs = { &wg_gy1rrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1rs = { &a_gy1rs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rsa = { &a_gy1rsa, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rsb = { &a_gy1rsb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rs = { &ia_gy1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rswa = { &ia_gy1rswa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rswb = { &ia_gy1rswb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rsa = { &pw_gy1rsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rsd = { &pw_gy1rsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rs = { &pw_gy1rs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1rs = { &wg_gy1rs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkrs = { &a_gzkrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkrs = { &ia_gzkrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrsa = { &pw_gzkrsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrsd = { &pw_gzkrsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkrs = { &pw_gzkrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkrs = { &wg_gzkrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkrs = { &a_gxkrs, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkrs = { &ia_gxkrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrsa = { &pw_gxkrsa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrsd = { &pw_gxkrsd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkrs = { &pw_gxkrs, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkrs = { &wg_gxkrs,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _res_rf1dtg = { &res_rf1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1dtg = { &wg_rf1dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1dtg = { &a_gzrf1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1dtg = { &ia_gzrf1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1dtga = { &pw_gzrf1dtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1dtgd = { &pw_gzrf1dtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1dtg = { &pw_gzrf1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf1dtg = { &wg_gzrf1dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkbsdtg = { &a_gxkbsdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkbsdtg = { &ia_gxkbsdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkbsdtga = { &pw_gxkbsdtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkbsdtgd = { &pw_gxkbsdtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkbsdtg = { &pw_gxkbsdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkbsdtg = { &wg_gxkbsdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gz1dtg = { &a_gz1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gz1dtg = { &ia_gz1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1dtga = { &pw_gz1dtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1dtgd = { &pw_gz1dtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gz1dtg = { &pw_gz1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gz1dtg = { &wg_gz1dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rfbdtg = { &a_rfbdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rfbdtg = { &ia_rfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rfbdtg = { &pw_rfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rfbdtg = { &res_rfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rfbdtg = { &off_rfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_rfbdtg = { &rfslot_rfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_rfbdtg = { &gscale_rfbdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_rfbdtg = { &n_rfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rfbdtg = { &wg_rfbdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_thetarfbdtg = { &a_thetarfbdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_thetarfbdtg = { &ia_thetarfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_thetarfbdtg = { &pw_thetarfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_thetarfbdtg = { &res_thetarfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_thetarfbdtg = { &off_thetarfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_thetarfbdtg = { &rfslot_thetarfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_thetarfbdtg = { &gscale_thetarfbdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_thetarfbdtg = { &n_thetarfbdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_thetarfbdtg = { &wg_thetarfbdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkbsdtg = { &a_gzkbsdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkbsdtg = { &ia_gzkbsdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkbsdtga = { &pw_gzkbsdtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkbsdtgd = { &pw_gzkbsdtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkbsdtg = { &pw_gzkbsdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkbsdtg = { &wg_gzkbsdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwdtg = { &a_gxwdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwdtg = { &ia_gxwdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwdtga = { &pw_gxwdtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwdtgd = { &pw_gxwdtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwdtg = { &pw_gxwdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwdtg = { &wg_gxwdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1dtg = { &filter_echo1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gx2dtg = { &a_gx2dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx2dtg = { &ia_gx2dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2dtga = { &pw_gx2dtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2dtgd = { &pw_gx2dtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx2dtg = { &pw_gx2dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx2dtg = { &wg_gx2dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy2dtg = { &a_gy2dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy2dtga = { &a_gy2dtga, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy2dtgb = { &a_gy2dtgb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy2dtg = { &ia_gy2dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy2dtgwa = { &ia_gy2dtgwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy2dtgwb = { &ia_gy2dtgwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy2dtga = { &pw_gy2dtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy2dtgd = { &pw_gy2dtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy2dtg = { &pw_gy2dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy2dtg = { &wg_gy2dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxw2dtg = { &a_gxw2dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxw2dtg = { &ia_gxw2dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2dtga = { &pw_gxw2dtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2dtgd = { &pw_gxw2dtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxw2dtg = { &pw_gxw2dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxw2dtg = { &wg_gxw2dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gx1dtg = { &a_gx1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1dtg = { &ia_gx1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1dtga = { &pw_gx1dtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1dtgd = { &pw_gx1dtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1dtg = { &pw_gx1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1dtg = { &wg_gx1dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1rdtg = { &a_gy1rdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rdtga = { &a_gy1rdtga, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rdtgb = { &a_gy1rdtgb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rdtg = { &ia_gy1rdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rdtgwa = { &ia_gy1rdtgwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rdtgwb = { &ia_gy1rdtgwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rdtga = { &pw_gy1rdtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rdtgd = { &pw_gy1rdtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rdtg = { &pw_gy1rdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1rdtg = { &wg_gy1rdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1dtg = { &a_gy1dtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1dtga = { &a_gy1dtga, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1dtgb = { &a_gy1dtgb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1dtg = { &ia_gy1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1dtgwa = { &ia_gy1dtgwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1dtgwb = { &ia_gy1dtgwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1dtga = { &pw_gy1dtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1dtgd = { &pw_gy1dtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1dtg = { &pw_gy1dtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1dtg = { &wg_gy1dtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzkdtg = { &a_gzkdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzkdtg = { &ia_gzkdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkdtga = { &pw_gzkdtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkdtgd = { &pw_gzkdtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzkdtg = { &pw_gzkdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzkdtg = { &wg_gzkdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxkdtg = { &a_gxkdtg, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxkdtg = { &ia_gxkdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkdtga = { &pw_gxkdtga, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkdtgd = { &pw_gxkdtgd, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxkdtg = { &pw_gxkdtg, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxkdtg = { &wg_gxkdtg,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rf1cal = { &a_rf1cal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1cal = { &ia_rf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1cal = { &pw_rf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1cal = { &res_rf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1cal = { &off_rf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_rf1cal = { &rfslot_rf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_rf1cal = { &gscale_rf1cal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_rf1cal = { &n_rf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1cal = { &wg_rf1cal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1cal = { &a_gzrf1cal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1cal = { &ia_gzrf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cala = { &pw_gzrf1cala, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cald = { &pw_gzrf1cald, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1cal = { &pw_gzrf1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf1cal = { &wg_gzrf1cal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzcombcal = { &a_gzcombcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzcombcala = { &a_gzcombcala, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzcombcalb = { &a_gzcombcalb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzcombcal = { &ia_gzcombcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzcombcalwa = { &ia_gzcombcalwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzcombcalwb = { &ia_gzcombcalwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcala = { &pw_gzcombcala, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcald = { &pw_gzcombcald, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcalf = { &pw_gzcombcalf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcal = { &pw_gzcombcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzcombcal = { &res_gzcombcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gzcombcal = { &per_gzcombcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzcombcal = { &wg_gzcombcal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzprcal = { &a_gzprcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzprcala = { &a_gzprcala, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzprcalb = { &a_gzprcalb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzprcal = { &ia_gzprcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzprcalwa = { &ia_gzprcalwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzprcalwb = { &ia_gzprcalwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcala = { &pw_gzprcala, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcald = { &pw_gzprcald, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcalf = { &pw_gzprcalf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcal = { &pw_gzprcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzprcal = { &res_gzprcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gzprcal = { &per_gzprcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzprcal = { &wg_gzprcal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwcal = { &a_gxwcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwcal = { &ia_gxwcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwcala = { &pw_gxwcala, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwcald = { &pw_gxwcald, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwcal = { &pw_gxwcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwcal = { &wg_gxwcal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1cal = { &filter_echo1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gx1cal = { &a_gx1cal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gx1cala = { &a_gx1cala, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gx1calb = { &a_gx1calb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1cal = { &ia_gx1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1calwa = { &ia_gx1calwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1calwb = { &ia_gx1calwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cala = { &pw_gx1cala, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cald = { &pw_gx1cald, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1calf = { &pw_gx1calf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1cal = { &pw_gx1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gx1cal = { &res_gx1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gx1cal = { &per_gx1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1cal = { &wg_gx1cal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1cal = { &a_gy1cal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1cala = { &a_gy1cala, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1calb = { &a_gy1calb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1cal = { &ia_gy1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1calwa = { &ia_gy1calwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1calwb = { &ia_gy1calwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cala = { &pw_gy1cala, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cald = { &pw_gy1cald, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1calf = { &pw_gy1calf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1cal = { &pw_gy1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gy1cal = { &res_gy1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gy1cal = { &per_gy1cal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1cal = { &wg_gy1cal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1rcal = { &a_gy1rcal, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rcala = { &a_gy1rcala, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rcalb = { &a_gy1rcalb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rcal = { &ia_gy1rcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rcalwa = { &ia_gy1rcalwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rcalwb = { &ia_gy1rcalwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcala = { &pw_gy1rcala, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcald = { &pw_gy1rcald, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcalf = { &pw_gy1rcalf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcal = { &pw_gy1rcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gy1rcal = { &res_gy1rcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gy1rcal = { &per_gy1rcal, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1rcal = { &wg_gy1rcal,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_rf1coil = { &a_rf1coil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_rf1coil = { &ia_rf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_rf1coil = { &pw_rf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_rf1coil = { &res_rf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _off_rf1coil = { &off_rf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _rfslot_rf1coil = { &rfslot_rf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };

_cvfloat  _gscale_rf1coil = { &gscale_rf1coil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _n_rf1coil = { &n_rf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_rf1coil = { &wg_rf1coil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzrf1coil = { &a_gzrf1coil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzrf1coil = { &ia_gzrf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1coila = { &pw_gzrf1coila, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1coild = { &pw_gzrf1coild, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzrf1coil = { &pw_gzrf1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzrf1coil = { &wg_gzrf1coil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzcombcoil = { &a_gzcombcoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzcombcoila = { &a_gzcombcoila, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzcombcoilb = { &a_gzcombcoilb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzcombcoil = { &ia_gzcombcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzcombcoilwa = { &ia_gzcombcoilwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzcombcoilwb = { &ia_gzcombcoilwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcoila = { &pw_gzcombcoila, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcoild = { &pw_gzcombcoild, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcoilf = { &pw_gzcombcoilf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzcombcoil = { &pw_gzcombcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzcombcoil = { &res_gzcombcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gzcombcoil = { &per_gzcombcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzcombcoil = { &wg_gzcombcoil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gzprcoil = { &a_gzprcoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzprcoila = { &a_gzprcoila, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gzprcoilb = { &a_gzprcoilb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzprcoil = { &ia_gzprcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzprcoilwa = { &ia_gzprcoilwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gzprcoilwb = { &ia_gzprcoilwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcoila = { &pw_gzprcoila, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcoild = { &pw_gzprcoild, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcoilf = { &pw_gzprcoilf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gzprcoil = { &pw_gzprcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gzprcoil = { &res_gzprcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gzprcoil = { &per_gzprcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gzprcoil = { &wg_gzprcoil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gxwcoil = { &a_gxwcoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gxwcoil = { &ia_gxwcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwcoila = { &pw_gxwcoila, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwcoild = { &pw_gxwcoild, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gxwcoil = { &pw_gxwcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gxwcoil = { &wg_gxwcoil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvint  _filter_echo1coil = { &filter_echo1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };


_cvfloat  _a_gx1coil = { &a_gx1coil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gx1coila = { &a_gx1coila, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gx1coilb = { &a_gx1coilb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1coil = { &ia_gx1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1coilwa = { &ia_gx1coilwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gx1coilwb = { &ia_gx1coilwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1coila = { &pw_gx1coila, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1coild = { &pw_gx1coild, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1coilf = { &pw_gx1coilf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gx1coil = { &pw_gx1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gx1coil = { &res_gx1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gx1coil = { &per_gx1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gx1coil = { &wg_gx1coil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1coil = { &a_gy1coil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1coila = { &a_gy1coila, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1coilb = { &a_gy1coilb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1coil = { &ia_gy1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1coilwa = { &ia_gy1coilwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1coilwb = { &ia_gy1coilwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1coila = { &pw_gy1coila, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1coild = { &pw_gy1coild, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1coilf = { &pw_gy1coilf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1coil = { &pw_gy1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gy1coil = { &res_gy1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gy1coil = { &per_gy1coil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1coil = { &wg_gy1coil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };


_cvfloat  _a_gy1rcoil = { &a_gy1rcoil, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rcoila = { &a_gy1rcoila, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvfloat  _a_gy1rcoilb = { &a_gy1rcoilb, -MAXFLOAT, MAXFLOAT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rcoil = { &ia_gy1rcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rcoilwa = { &ia_gy1rcoilwa, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _ia_gy1rcoilwb = { &ia_gy1rcoilwb, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcoila = { &pw_gy1rcoila, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcoild = { &pw_gy1rcoild, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcoilf = { &pw_gy1rcoilf, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _pw_gy1rcoil = { &pw_gy1rcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _res_gy1rcoil = { &res_gy1rcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _per_gy1rcoil = { &per_gy1rcoil, -MAXINT, MAXINT, 0, 0, 0, 0, 1, 1, VISIBLE, "", 0, "" };
_cvint  _wg_gy1rcoil = { &wg_gy1rcoil,  0,  WF_MAX_PROCESSORS*2-1,  0, 0, 0, 0, 1, 1,  VIS,  "",  0, "" };

int _temp0_ps1_newgeo;
int _temp1_pw_rf1cfh;
float _temp2_a_rf1cfh;
float _temp3_flip_rf1cfh;
int _temp4_res_rf1cfh;
int _temp5_wg_rf1cfh;
int _temp6_pw_rf2cfh;
float _temp7_a_rf2cfh;
float _temp8_flip_rf2cfh;
int _temp9_res_rf2cfh;
int _temp10_wg_rf2cfh;
int _temp11_pw_rf3cfh;
float _temp12_a_rf3cfh;
float _temp13_flip_rf3cfh;
int _temp14_res_rf3cfh;
int _temp15_wg_rf3cfh;
int _temp16_pw_rf4cfh;
float _temp17_a_rf4cfh;
float _temp18_flip_rf4cfh;
int _temp19_res_rf4cfh;
int _temp20_wg_rf4cfh;
int _temp21_pw_rf1cfh;
float _temp22_a_rf1cfh;
float _temp23_flip_rf1cfh;
int _temp24_res_rf1cfh;
int _temp25_wg_rf1cfh;
int _temp26_pw_rf2cfh;
float _temp27_a_rf2cfh;
float _temp28_flip_rf2cfh;
int _temp29_res_rf2cfh;
int _temp30_wg_rf2cfh;
int _temp31_pw_rf3cfh;
float _temp32_a_rf3cfh;
float _temp33_flip_rf3cfh;
int _temp34_res_rf3cfh;
int _temp35_wg_rf3cfh;
int _temp36_pw_rf4cfh;
float _temp37_a_rf4cfh;
float _temp38_flip_rf4cfh;
int _temp39_res_rf4cfh;
int _temp40_wg_rf4cfh;
int _temp41_pimrsaps1;
int _temp42_pimrsaps2;
int _temp43_pimrsaps3;
int _temp44_pimrsaps4;
int _temp45_pimrsaps5;
int _temp46_pimrsaps6;
int _temp47_pimrsaps7;
int _temp48_pimrsaps8;
int _temp49_pimrsaps9;
int _temp50_pimrsaps10;
int _temp51_pimrsaps11;
int _temp52_pimrsaps12;
int _temp53_pimrsaps13;
int _temp54_pimrsaps14;
int _temp55_pimrsaps15;
int _temp56_as_newgeo;
float _temp57_a_gxkas;
int _temp58_pw_gxkasa;
int _temp59_pw_gxkas;
int _temp60_pw_gxkasd;
float _temp61_a_gzkas;
int _temp62_pw_gzkasa;
int _temp63_pw_gzkas;
int _temp64_pw_gzkasd;
float _temp65_flip_rfbrs;
int _temp66_ps1_newgeo;
float _temp67_flip_rfbdtg;
int _temp68_ps1_newgeo;
int _temp69_ps1_newgeo;
float _temp70_a_gyrf1mps1;
int _temp71_pw_gyrf1mps1a;
float _temp72_a_gy1mps1;
int _temp73_pw_gy1mps1;
int _temp74_pw_gy1mps1a;
int _temp75_pw_gy1mps1d;
float _temp76_a_gzrf1mps1;
int _temp77_pw_gzrf1mps1a;
float _temp78_a_gz1mps1;
int _temp79_pw_gz1mps1;
int _temp80_pw_gz1mps1a;
int _temp81_pw_gz1mps1d;
float _temp82_a_gzrf2lmps1;
int _temp83_pw_gzrf2lmps1a;
int _temp84_pw_gzrf2lmps1;
int _temp85_pw_gzrf2lmps1d;
float _temp86_a_gzrf2mps1;
float _temp87_a_gxwmps1;
int _temp88_pw_gxwmps1a;
float _temp89_a_gx1mps1;
int _temp90_pw_gx1mps1;
int _temp91_pw_gx1mps1a;
int _temp92_pw_gx1mps1d;
float _temp93_a_gzrf1cfl;
int _temp94_pw_gzrf1cfla;
float _temp95_a_gz1cfl;
int _temp96_pw_gz1cfl;
int _temp97_pw_gz1cfla;
int _temp98_pw_gz1cfld;
float _temp99_a_gykcfl;
int _temp100_pw_gykcfla;
int _temp101_pw_gykcfl;
int _temp102_pw_gykcfld;
float _temp103_a_gxkrcvn;
int _temp104_pw_gxkrcvna;
int _temp105_pw_gxkrcvn;
int _temp106_pw_gxkrcvnd;
float _temp107_a_gykrcvn;
int _temp108_pw_gykrcvna;
int _temp109_pw_gykrcvn;
int _temp110_pw_gykrcvnd;
float _temp111_a_gzkrcvn;
int _temp112_pw_gzkrcvna;
int _temp113_pw_gzkrcvn;
int _temp114_pw_gzkrcvnd;
float _temp115_a_gzrf1as;
int _temp116_pw_gzrf1asa;
float _temp117_a_gz1as;
int _temp118_pw_gz1as;
int _temp119_pw_gz1asa;
int _temp120_pw_gz1asd;
float _temp121_a_gxwas;
int _temp122_pw_gxwasa;
float _temp123_a_gx1as;
int _temp124_pw_gx1as;
int _temp125_pw_gx1asa;
int _temp126_pw_gx1asd;
int _temp127_endview_iampas;
float _temp128_a_gy1asa;
float _temp129_a_gy1asb;
int _temp130_pw_gy1as;
int _temp131_pw_gy1asa;
int _temp132_pw_gy1asd;
int _temp133_pw_gzrf2lcfha;
int _temp134_pw_gzrf2lcfhd;
int _temp135_pw_gzrf2lcfh;
float _temp136_a_gzrf2lcfh;
int _temp137_pw_gzrf2rcfha;
int _temp138_pw_gzrf2rcfhd;
int _temp139_pw_gzrf2rcfh;
float _temp140_a_gzrf2rcfh;
int _temp141_pw_gzrf3rcfha;
int _temp142_pw_gzrf3rcfhd;
int _temp143_pw_gzrf3rcfh;
float _temp144_a_gzrf3rcfh;
int _temp145_pw_rf1cfh;
float _temp146_a_rf1cfh;
float _temp147_flip_rf1cfh;
int _temp148_res_rf1cfh;
int _temp149_wg_rf1cfh;
int _temp150_pw_rf2cfh;
float _temp151_a_rf2cfh;
float _temp152_flip_rf2cfh;
int _temp153_res_rf2cfh;
int _temp154_wg_rf2cfh;
int _temp155_pw_rf3cfh;
float _temp156_a_rf3cfh;
float _temp157_flip_rf3cfh;
int _temp158_res_rf3cfh;
int _temp159_wg_rf3cfh;
int _temp160_pw_rf4cfh;
float _temp161_a_rf4cfh;
float _temp162_flip_rf4cfh;
int _temp163_res_rf4cfh;
int _temp164_wg_rf4cfh;
int _temp165_pw_rf1cfh;
float _temp166_a_rf1cfh;
float _temp167_flip_rf1cfh;
int _temp168_res_rf1cfh;
int _temp169_wg_rf1cfh;
int _temp170_pw_rf2cfh;
float _temp171_a_rf2cfh;
float _temp172_flip_rf2cfh;
int _temp173_res_rf2cfh;
int _temp174_wg_rf2cfh;
int _temp175_pw_rf3cfh;
float _temp176_a_rf3cfh;
float _temp177_flip_rf3cfh;
int _temp178_res_rf3cfh;
int _temp179_wg_rf3cfh;
int _temp180_pw_rf4cfh;
float _temp181_a_rf4cfh;
float _temp182_flip_rf4cfh;
int _temp183_res_rf4cfh;
int _temp184_wg_rf4cfh;
float _temp185_a_gyrf0kcfh;
int _temp186_pw_gyrf0kcfha;
int _temp187_pw_gyrf0kcfh;
int _temp188_pw_gyrf0kcfhd;
float _temp189_a_gzrf0cfh;
int _temp190_pw_gzrf0cfha;
float _temp191_a_gzrf1cfh;
int _temp192_pw_gzrf1cfha;
int _temp193_pw_gxrf2cfha;
int _temp194_pw_gyrf3cfha;
int _temp195_pw_gzrf4cfha;
float _temp196_a_gzrf2rcfh;
int _temp197_pw_gzrf2rcfha;
int _temp198_pw_gzrf2rcfh;
int _temp199_pw_gzrf2rcfhd;
float _temp200_a_gzrf3rcfh;
int _temp201_pw_gzrf3rcfha;
int _temp202_pw_gzrf3rcfh;
int _temp203_pw_gzrf3rcfhd;
float _temp204_a_gzrf3rcfh;
int _temp205_pw_gzrf3rcfha;
int _temp206_pw_gzrf3rcfh;
int _temp207_pw_gzrf3rcfhd;
float _temp208_a_gzrf3lcfh;
int _temp209_pw_gzrf3lcfha;
int _temp210_pw_gzrf3lcfh;
int _temp211_pw_gzrf3lcfhd;
float _temp212_a_gzrf4rcfh;
int _temp213_pw_gzrf4rcfha;
int _temp214_pw_gzrf4rcfh;
int _temp215_pw_gzrf4rcfhd;
float _temp216_a_gzrf4lcfh;
int _temp217_pw_gzrf4lcfha;
int _temp218_pw_gzrf4lcfh;
int _temp219_pw_gzrf4lcfhd;
float _temp220_a_gzrf2rcfh;
int _temp221_pw_gzrf2rcfha;
int _temp222_pw_gzrf2rcfh;
int _temp223_pw_gzrf2rcfhd;
float _temp224_a_gzrf3lcfh;
int _temp225_pw_gzrf3lcfha;
int _temp226_pw_gzrf3lcfh;
int _temp227_pw_gzrf3lcfhd;
int _temp228_pw_gxrf2cfha;
int _temp229_pw_gyrf2cfha;
float _temp230_a_gzrf2rcfh;
int _temp231_pw_gzrf2rcfha;
int _temp232_pw_gzrf2rcfh;
int _temp233_pw_gzrf2rcfhd;
int _temp234_dummy_pw;
float _temp235_a_gx1cfh;
int _temp236_pw_gx1cfha;
int _temp237_pw_gx1cfh;
int _temp238_pw_gx1cfhd;
float _temp239_a_gy1cfh;
int _temp240_pw_gy1cfha;
int _temp241_pw_gy1cfh;
int _temp242_pw_gy1cfhd;
float _temp243_a_gykcfh;
int _temp244_pw_gykcfha;
int _temp245_pw_gykcfh;
int _temp246_pw_gykcfhd;
int _temp247_cfh_newgeo;
float _temp248_a_gzrf1ftg;
float _temp249_a_gzrf2ftg;
float _temp250_a_gzrf3ftg;
int _temp251_pw_gzrf1ftga;
int _temp252_pw_gzrf2ftga;
float _temp253_a_gz1ftg;
int _temp254_pw_gz1ftg;
int _temp255_pw_gz1ftga;
int _temp256_pw_gz1ftgd;
float _temp257_a_gz2ftg;
int _temp258_pw_gz2ftg;
int _temp259_pw_gz2ftga;
int _temp260_pw_gz2ftgd;
int _temp261_pw_gzrf3ftga;
float _temp262_a_gz2bftg;
int _temp263_pw_gz2bftg;
int _temp264_pw_gz2bftga;
int _temp265_pw_gz2bftgd;
float _temp266_a_gz3ftg;
int _temp267_pw_gz3ftg;
int _temp268_pw_gz3ftga;
int _temp269_pw_gz3ftgd;
float _temp270_a_gxw1ftg;
float _temp271_a_gx1ftg;
int _temp272_pw_gx1ftg;
int _temp273_pw_gx1ftga;
int _temp274_pw_gx1ftgd;
float _temp275_a_gx2test;
int _temp276_pw_gx2test;
int _temp277_pw_gx2testa;
int _temp278_pw_gx2testd;
float _temp279_a_gx1bftg;
int _temp280_pw_gx1bftg;
int _temp281_pw_gx1bftga;
int _temp282_pw_gx1bftgd;
int _temp283_pw_gxw1ftga;
float _temp284_a_postgxw1ftg;
int _temp285_pw_postgxw1ftg;
int _temp286_pw_postgxw1ftga;
int _temp287_pw_postgxw1ftgd;
float _temp288_a_gxw2ftg;
int _temp289_pw_gxw2ftga;
float _temp290_a_gx2ftg;
int _temp291_pw_gx2ftga;
int _temp292_pw_gx2ftg;
int _temp293_pw_gx2ftgd;
float _temp294_a_gyrf1xtg;
int _temp295_pw_gyrf1xtga;
float _temp296_a_gzrf1xtg;
int _temp297_pw_gzrf1xtga;
float _temp298_a_gzrf2xtg;
int _temp299_pw_gzrf2xtga;
float _temp300_a_gz2xtg;
int _temp301_pw_gz2xtga;
int _temp302_pw_gz2xtg;
int _temp303_pw_gz2xtgd;
float _temp304_a_gz1xtg;
int _temp305_pw_gz1xtga;
int _temp306_pw_gz1xtg;
int _temp307_pw_gz1xtgd;
float _temp308_a_gxw1xtg;
int _temp309_pw_gxw1xtga;
float _temp310_a_gx1bxtg;
int _temp311_pw_gx1bxtg;
int _temp312_pw_gx1bxtga;
int _temp313_pw_gx1bxtgd;
float _temp314_a_gykxtgl;
int _temp315_pw_gykxtgla;
int _temp316_pw_gykxtgl;
int _temp317_pw_gykxtgld;
float _temp318_a_gykxtgr;
int _temp319_pw_gykxtgra;
int _temp320_pw_gykxtgr;
int _temp321_pw_gykxtgrd;
float _temp322_a_gzrf1rs;
int _temp323_pw_gzrf1rsa;
float _temp324_a_gzkbsrs;
int _temp325_pw_gzkbsrsa;
int _temp326_pw_gzkbsrs;
int _temp327_pw_gzkbsrsd;
float _temp328_a_gz1rs;
int _temp329_pw_gz1rs;
int _temp330_pw_gz1rsa;
int _temp331_pw_gz1rsd;
float _temp332_a_gzkrs;
int _temp333_pw_gzkrsa;
int _temp334_pw_gzkrs;
int _temp335_pw_gzkrsd;
float _temp336_a_gxwrs;
int _temp337_pw_gxwrsa;
float _temp338_a_gxkbsrs;
int _temp339_pw_gxkbsrsa;
int _temp340_pw_gxkbsrs;
int _temp341_pw_gxkbsrsd;
float _temp342_a_gx1rs;
int _temp343_pw_gx1rsa;
int _temp344_pw_gx1rs;
int _temp345_pw_gx1rsd;
float _temp346_a_gxkrs;
int _temp347_pw_gxkrsa;
int _temp348_pw_gxkrs;
int _temp349_pw_gxkrsd;
float _temp350_a_gx2rs;
int _temp351_pw_gx2rsa;
int _temp352_pw_gx2rs;
int _temp353_pw_gx2rsd;
int _temp354_endview_iamprs;
float _temp355_a_gy1rsa;
float _temp356_a_gy1rsb;
int _temp357_pw_gy1rs;
int _temp358_pw_gy1rsa;
int _temp359_pw_gy1rsd;
float _temp360_a_gzrf1dtg;
int _temp361_pw_gzrf1dtga;
float _temp362_a_gzkbsdtg;
int _temp363_pw_gzkbsdtga;
int _temp364_pw_gzkbsdtg;
int _temp365_pw_gzkbsdtgd;
float _temp366_a_gz1dtg;
int _temp367_pw_gz1dtg;
int _temp368_pw_gz1dtga;
int _temp369_pw_gz1dtgd;
float _temp370_a_gzkdtg;
int _temp371_pw_gzkdtga;
int _temp372_pw_gzkdtg;
int _temp373_pw_gzkdtgd;
float _temp374_a_gxwdtg;
int _temp375_pw_gxwdtga;
float _temp376_a_gxkbsdtg;
int _temp377_pw_gxkbsdtga;
int _temp378_pw_gxkbsdtg;
int _temp379_pw_gxkbsdtgd;
float _temp380_a_gx1dtg;
int _temp381_pw_gx1dtga;
int _temp382_pw_gx1dtg;
int _temp383_pw_gx1dtgd;
float _temp384_a_gxkdtg;
int _temp385_pw_gxkdtga;
int _temp386_pw_gxkdtg;
int _temp387_pw_gxkdtgd;
float _temp388_a_gx2dtg;
int _temp389_pw_gx2dtga;
int _temp390_pw_gx2dtg;
int _temp391_pw_gx2dtgd;
int _temp392_endview_iampdtg;
float _temp393_a_gy1dtga;
float _temp394_a_gy1dtgb;
int _temp395_pw_gy1dtg;
int _temp396_pw_gy1dtga;
int _temp397_pw_gy1dtgd;
float _temp398_a_gzrf1cal;
float _temp399_cal_amplimit;
int _temp400_pw_gzrf1cala;
int _temp401_endviewz_iampcal;
float _temp402_cal_amplimit;
float _temp403_a_gzcombcala;
float _temp404_a_gzcombcalb;
int _temp405_pw_gzcombcal;
int _temp406_pw_gzcombcala;
int _temp407_pw_gzcombcald;
float _temp408_a_gzprcala;
float _temp409_a_gzprcalb;
int _temp410_pw_gzprcal;
int _temp411_pw_gzprcala;
int _temp412_pw_gzprcald;
float _temp413_cal_amplimit;
int _temp414_pw_gxwcala;
float _temp415_cal_amplimit;
float _temp416_a_gx1cal;
int _temp417_pw_gx1cal;
int _temp418_pw_gx1cala;
int _temp419_pw_gx1cald;
int _temp420_endview_iampcal;
float _temp421_cal_amplimit;
float _temp422_a_gy1cala;
float _temp423_a_gy1calb;
int _temp424_pw_gy1cal;
int _temp425_pw_gy1cala;
int _temp426_pw_gy1cald;
float _temp427_a_gzrf1coil;
float _temp428_coil_amplimit;
int _temp429_pw_gzrf1coila;
int _temp430_endviewz_iampcoil;
float _temp431_coil_amplimit;
float _temp432_a_gzcombcoila;
float _temp433_a_gzcombcoilb;
int _temp434_pw_gzcombcoil;
int _temp435_pw_gzcombcoila;
int _temp436_pw_gzcombcoild;
float _temp437_a_gzprcoila;
float _temp438_a_gzprcoilb;
int _temp439_pw_gzprcoil;
int _temp440_pw_gzprcoila;
int _temp441_pw_gzprcoild;
float _temp442_coil_amplimit;
int _temp443_pw_gxwcoila;
float _temp444_coil_amplimit;
float _temp445_a_gx1coil;
int _temp446_pw_gx1coil;
int _temp447_pw_gx1coila;
int _temp448_pw_gx1coild;
int _temp449_endview_iampcoil;
float _temp450_coil_amplimit;
float _temp451_a_gy1coila;
float _temp452_a_gy1coilb;
int _temp453_pw_gy1coil;
int _temp454_pw_gy1coila;
int _temp455_pw_gy1coild;
int _temp456_tgcap;
int _temp457_tgwindow;
int _temp458_min_seqgrad;
int _temp459_min_seqgrad;
int _temp460_min_seqgrad;
int _temp461_min_seqgrad;
int _temp462_min_seqgrad;
int _temp463_min_seqgrad;
int _temp464_min_seqgrad;
int _temp465_min_seqgrad;
int _temp466_min_seqgrad;
int _temp467_min_seqgrad;
int _temp468_cal_sampledPts;
int _temp469_min_seqgrad;
int _temp470_coil_sampledPts;
int _temp471_rhdacqctrl;
int _temp472_rhdacqctrl;
float _temp473_pure_mix_tx_scale;
float _temp474_pg_beta;
float _temp475_pg_beta;
float _temp476_pg_beta;
float _temp477_pg_beta;
float _temp478_pg_beta;
float _temp479_pg_beta;
float _temp480_pg_beta;
float _temp481_pg_beta;
float _temp482_pg_beta;
float _temp483_pg_beta;
float _temp484_a_gyrf1mps1;
int _temp485_pw_gyrf1mps1a;
int _temp486_pw_gyrf1mps1;
int _temp487_pw_gyrf1mps1d;
float _temp488_a_gy1mps1;
int _temp489_pw_gy1mps1a;
int _temp490_pw_gy1mps1;
int _temp491_pw_gy1mps1d;
float _temp492_a_gzrf1mps1;
int _temp493_pw_gzrf1mps1a;
int _temp494_pw_gzrf1mps1;
int _temp495_pw_gzrf1mps1d;
float _temp496_a_gz1mps1;
int _temp497_pw_gz1mps1a;
int _temp498_pw_gz1mps1;
int _temp499_pw_gz1mps1d;
float _temp500_a_gx1mps1;
int _temp501_pw_gx1mps1a;
int _temp502_pw_gx1mps1;
int _temp503_pw_gx1mps1d;
float _temp504_a_gzrf2mps1;
int _temp505_pw_gzrf2mps1a;
int _temp506_pw_gzrf2mps1d;
float _temp507_a_gzrf2lmps1;
int _temp508_pw_gzrf2lmps1a;
int _temp509_pw_gzrf2lmps1;
int _temp510_pw_gzrf2lmps1d;
float _temp511_a_gzrf2rmps1;
int _temp512_pw_gzrf2rmps1a;
int _temp513_pw_gzrf2rmps1;
int _temp514_pw_gzrf2rmps1d;
float _temp515_a_gxwmps1;
int _temp516_pw_gxwmps1a;
int _temp517_pw_gxwmps1;
int _temp518_pw_gxwmps1d;
float _temp519_a_gzrf1cfl;
int _temp520_pw_gzrf1cfla;
int _temp521_pw_gzrf1cfld;
float _temp522_a_gz1cfl;
int _temp523_pw_gz1cfla;
int _temp524_pw_gz1cfl;
int _temp525_pw_gz1cfld;
float _temp526_a_gykcfl;
int _temp527_pw_gykcfla;
int _temp528_pw_gykcfl;
int _temp529_pw_gykcfld;
float _temp530_a_gxkrcvn;
int _temp531_pw_gxkrcvna;
int _temp532_pw_gxkrcvn;
int _temp533_pw_gxkrcvnd;
float _temp534_a_gykrcvn;
int _temp535_pw_gykrcvna;
int _temp536_pw_gykrcvn;
int _temp537_pw_gykrcvnd;
float _temp538_a_gzkrcvn;
int _temp539_pw_gzkrcvna;
int _temp540_pw_gzkrcvn;
int _temp541_pw_gzkrcvnd;
float _temp542_a_gxk2rcvn;
int _temp543_pw_gxk2rcvna;
int _temp544_pw_gxk2rcvn;
int _temp545_pw_gxk2rcvnd;
float _temp546_a_gyk2rcvn;
int _temp547_pw_gyk2rcvna;
int _temp548_pw_gyk2rcvn;
int _temp549_pw_gyk2rcvnd;
float _temp550_a_gzk2rcvn;
int _temp551_pw_gzk2rcvna;
int _temp552_pw_gzk2rcvn;
int _temp553_pw_gzk2rcvnd;
float _temp554_a_gzrf0cfh;
int _temp555_pw_gzrf0cfha;
int _temp556_pw_gzrf0cfhd;
float _temp557_a_gyrf0kcfh;
int _temp558_pw_gyrf0kcfha;
int _temp559_pw_gyrf0kcfh;
int _temp560_pw_gyrf0kcfhd;
float _temp561_a_gzrf1cfh;
int _temp562_pw_gzrf1cfha;
int _temp563_pw_gzrf1cfhd;
float _temp564_a_gxrf2cfh;
int _temp565_pw_gxrf2cfha;
int _temp566_pw_gxrf2cfh;
int _temp567_pw_gxrf2cfhd;
float _temp568_a_gyrf2cfh;
int _temp569_pw_gyrf2cfha;
int _temp570_pw_gyrf2cfh;
int _temp571_pw_gyrf2cfhd;
float _temp572_a_gzrf2lcfh;
int _temp573_pw_gzrf2lcfha;
int _temp574_pw_gzrf2lcfh;
int _temp575_pw_gzrf2lcfhd;
float _temp576_a_gzrf2rcfh;
int _temp577_pw_gzrf2rcfha;
int _temp578_pw_gzrf2rcfh;
int _temp579_pw_gzrf2rcfhd;
float _temp580_a_gyrf3cfh;
int _temp581_pw_gyrf3cfha;
int _temp582_pw_gyrf3cfh;
int _temp583_pw_gyrf3cfhd;
float _temp584_a_gzrf3lcfh;
int _temp585_pw_gzrf3lcfha;
int _temp586_pw_gzrf3lcfh;
int _temp587_pw_gzrf3lcfhd;
float _temp588_a_gzrf3rcfh;
int _temp589_pw_gzrf3rcfha;
int _temp590_pw_gzrf3rcfh;
int _temp591_pw_gzrf3rcfhd;
float _temp592_a_gy1cfh;
int _temp593_pw_gy1cfha;
int _temp594_pw_gy1cfh;
int _temp595_pw_gy1cfhd;
float _temp596_a_gx1cfh;
int _temp597_pw_gx1cfha;
int _temp598_pw_gx1cfh;
int _temp599_pw_gx1cfhd;
float _temp600_a_gzrf4cfh;
int _temp601_pw_gzrf4cfha;
int _temp602_pw_gzrf4cfh;
int _temp603_pw_gzrf4cfhd;
float _temp604_a_gzrf4lcfh;
int _temp605_pw_gzrf4lcfha;
int _temp606_pw_gzrf4lcfh;
int _temp607_pw_gzrf4lcfhd;
float _temp608_a_gzrf4rcfh;
int _temp609_pw_gzrf4rcfha;
int _temp610_pw_gzrf4rcfh;
int _temp611_pw_gzrf4rcfhd;
float _temp612_a_gykcfh;
int _temp613_pw_gykcfha;
int _temp614_pw_gykcfh;
int _temp615_pw_gykcfhd;
float _temp616_a_gzrf1ftg;
int _temp617_pw_gzrf1ftga;
int _temp618_pw_gzrf1ftgd;
float _temp619_a_gz1ftg;
int _temp620_pw_gz1ftga;
int _temp621_pw_gz1ftg;
int _temp622_pw_gz1ftgd;
float _temp623_a_gzrf2ftg;
int _temp624_pw_gzrf2ftga;
int _temp625_pw_gzrf2ftgd;
float _temp626_a_gz2ftg;
int _temp627_pw_gz2ftga;
int _temp628_pw_gz2ftg;
int _temp629_pw_gz2ftgd;
float _temp630_a_gzrf3ftg;
int _temp631_pw_gzrf3ftga;
int _temp632_pw_gzrf3ftgd;
float _temp633_a_gz3ftg;
int _temp634_pw_gz3ftga;
int _temp635_pw_gz3ftg;
int _temp636_pw_gz3ftgd;
float _temp637_a_gx1ftg;
int _temp638_pw_gx1ftga;
int _temp639_pw_gx1ftg;
int _temp640_pw_gx1ftgd;
float _temp641_a_gx1bftg;
int _temp642_pw_gx1bftga;
int _temp643_pw_gx1bftg;
int _temp644_pw_gx1bftgd;
float _temp645_a_gxw1ftg;
int _temp646_pw_gxw1ftga;
int _temp647_pw_gxw1ftg;
int _temp648_pw_gxw1ftgd;
float _temp649_a_postgxw1ftg;
int _temp650_pw_postgxw1ftga;
int _temp651_pw_postgxw1ftg;
int _temp652_pw_postgxw1ftgd;
float _temp653_a_gz2bftg;
int _temp654_pw_gz2bftga;
int _temp655_pw_gz2bftg;
int _temp656_pw_gz2bftgd;
float _temp657_a_gx2ftg;
int _temp658_pw_gx2ftga;
int _temp659_pw_gx2ftg;
int _temp660_pw_gx2ftgd;
float _temp661_a_gxw2ftg;
int _temp662_pw_gxw2ftga;
int _temp663_pw_gxw2ftg;
int _temp664_pw_gxw2ftgd;
float _temp665_a_gx2test;
int _temp666_pw_gx2testa;
int _temp667_pw_gx2test;
int _temp668_pw_gx2testd;
float _temp669_a_gyrf1xtg;
int _temp670_pw_gyrf1xtga;
int _temp671_pw_gyrf1xtg;
int _temp672_pw_gyrf1xtgd;
float _temp673_a_gzrf1xtg;
int _temp674_pw_gzrf1xtga;
int _temp675_pw_gzrf1xtg;
int _temp676_pw_gzrf1xtgd;
float _temp677_a_gykxtgl;
int _temp678_pw_gykxtgla;
int _temp679_pw_gykxtgl;
int _temp680_pw_gykxtgld;
float _temp681_a_gz1xtg;
int _temp682_pw_gz1xtga;
int _temp683_pw_gz1xtg;
int _temp684_pw_gz1xtgd;
float _temp685_a_gzrf2xtg;
int _temp686_pw_gzrf2xtga;
int _temp687_pw_gzrf2xtgd;
float _temp688_a_gz2xtg;
int _temp689_pw_gz2xtga;
int _temp690_pw_gz2xtg;
int _temp691_pw_gz2xtgd;
float _temp692_a_gykxtgr;
int _temp693_pw_gykxtgra;
int _temp694_pw_gykxtgr;
int _temp695_pw_gykxtgrd;
float _temp696_a_gx1bxtg;
int _temp697_pw_gx1bxtga;
int _temp698_pw_gx1bxtg;
int _temp699_pw_gx1bxtgd;
float _temp700_a_gxw1xtg;
int _temp701_pw_gxw1xtga;
int _temp702_pw_gxw1xtg;
int _temp703_pw_gxw1xtgd;
float _temp704_a_gzrf1as;
int _temp705_pw_gzrf1asa;
int _temp706_pw_gzrf1asd;
float _temp707_a_gz1as;
int _temp708_pw_gz1asa;
int _temp709_pw_gz1as;
int _temp710_pw_gz1asd;
float _temp711_a_gxwas;
int _temp712_pw_gxwasa;
int _temp713_pw_gxwas;
int _temp714_pw_gxwasd;
float _temp715_a_gx1as;
int _temp716_pw_gx1asa;
int _temp717_pw_gx1as;
int _temp718_pw_gx1asd;
float _temp719_a_gxkas;
int _temp720_pw_gxkasa;
int _temp721_pw_gxkas;
int _temp722_pw_gxkasd;
float _temp723_a_gzkas;
int _temp724_pw_gzkasa;
int _temp725_pw_gzkas;
int _temp726_pw_gzkasd;
float _temp727_a_gzrf1rs;
int _temp728_pw_gzrf1rsa;
int _temp729_pw_gzrf1rs;
int _temp730_pw_gzrf1rsd;
float _temp731_a_gxkbsrs;
int _temp732_pw_gxkbsrsa;
int _temp733_pw_gxkbsrs;
int _temp734_pw_gxkbsrsd;
float _temp735_a_gz1rs;
int _temp736_pw_gz1rsa;
int _temp737_pw_gz1rs;
int _temp738_pw_gz1rsd;
float _temp739_a_gzkbsrs;
int _temp740_pw_gzkbsrsa;
int _temp741_pw_gzkbsrs;
int _temp742_pw_gzkbsrsd;
float _temp743_a_gxwrs;
int _temp744_pw_gxwrsa;
int _temp745_pw_gxwrs;
int _temp746_pw_gxwrsd;
float _temp747_a_gx2rs;
int _temp748_pw_gx2rsa;
int _temp749_pw_gx2rs;
int _temp750_pw_gx2rsd;
float _temp751_a_gxw2rs;
int _temp752_pw_gxw2rsa;
int _temp753_pw_gxw2rs;
int _temp754_pw_gxw2rsd;
float _temp755_a_gx1rs;
int _temp756_pw_gx1rsa;
int _temp757_pw_gx1rs;
int _temp758_pw_gx1rsd;
float _temp759_a_gzkrs;
int _temp760_pw_gzkrsa;
int _temp761_pw_gzkrs;
int _temp762_pw_gzkrsd;
float _temp763_a_gxkrs;
int _temp764_pw_gxkrsa;
int _temp765_pw_gxkrs;
int _temp766_pw_gxkrsd;
float _temp767_a_gzrf1dtg;
int _temp768_pw_gzrf1dtga;
int _temp769_pw_gzrf1dtg;
int _temp770_pw_gzrf1dtgd;
float _temp771_a_gxkbsdtg;
int _temp772_pw_gxkbsdtga;
int _temp773_pw_gxkbsdtg;
int _temp774_pw_gxkbsdtgd;
float _temp775_a_gz1dtg;
int _temp776_pw_gz1dtga;
int _temp777_pw_gz1dtg;
int _temp778_pw_gz1dtgd;
float _temp779_a_gzkbsdtg;
int _temp780_pw_gzkbsdtga;
int _temp781_pw_gzkbsdtg;
int _temp782_pw_gzkbsdtgd;
float _temp783_a_gxwdtg;
int _temp784_pw_gxwdtga;
int _temp785_pw_gxwdtg;
int _temp786_pw_gxwdtgd;
float _temp787_a_gx2dtg;
int _temp788_pw_gx2dtga;
int _temp789_pw_gx2dtg;
int _temp790_pw_gx2dtgd;
float _temp791_a_gxw2dtg;
int _temp792_pw_gxw2dtga;
int _temp793_pw_gxw2dtg;
int _temp794_pw_gxw2dtgd;
float _temp795_a_gx1dtg;
int _temp796_pw_gx1dtga;
int _temp797_pw_gx1dtg;
int _temp798_pw_gx1dtgd;
float _temp799_a_gzkdtg;
int _temp800_pw_gzkdtga;
int _temp801_pw_gzkdtg;
int _temp802_pw_gzkdtgd;
float _temp803_a_gxkdtg;
int _temp804_pw_gxkdtga;
int _temp805_pw_gxkdtg;
int _temp806_pw_gxkdtgd;
float _temp807_a_gzrf1cal;
int _temp808_pw_gzrf1cala;
int _temp809_pw_gzrf1cal;
int _temp810_pw_gzrf1cald;
float _temp811_a_gzcombcal;
int _temp812_pw_gzcombcala;
int _temp813_pw_gzcombcal;
int _temp814_pw_gzcombcald;
float _temp815_a_gzprcal;
int _temp816_pw_gzprcala;
int _temp817_pw_gzprcal;
int _temp818_pw_gzprcald;
float _temp819_a_gxwcal;
int _temp820_pw_gxwcala;
int _temp821_pw_gxwcal;
int _temp822_pw_gxwcald;
float _temp823_a_gx1cal;
int _temp824_pw_gx1cala;
int _temp825_pw_gx1cal;
int _temp826_pw_gx1cald;
float _temp827_a_gy1cal;
int _temp828_pw_gy1cala;
int _temp829_pw_gy1cal;
int _temp830_pw_gy1cald;
float _temp831_a_gy1rcal;
int _temp832_pw_gy1rcala;
int _temp833_pw_gy1rcal;
int _temp834_pw_gy1rcald;
float _temp835_a_gzrf1coil;
int _temp836_pw_gzrf1coila;
int _temp837_pw_gzrf1coil;
int _temp838_pw_gzrf1coild;
float _temp839_a_gzcombcoil;
int _temp840_pw_gzcombcoila;
int _temp841_pw_gzcombcoil;
int _temp842_pw_gzcombcoild;
float _temp843_a_gzprcoil;
int _temp844_pw_gzprcoila;
int _temp845_pw_gzprcoil;
int _temp846_pw_gzprcoild;
float _temp847_a_gxwcoil;
int _temp848_pw_gxwcoila;
int _temp849_pw_gxwcoil;
int _temp850_pw_gxwcoild;
float _temp851_a_gx1coil;
int _temp852_pw_gx1coila;
int _temp853_pw_gx1coil;
int _temp854_pw_gx1coild;
float _temp855_a_gy1coil;
int _temp856_pw_gy1coila;
int _temp857_pw_gy1coil;
int _temp858_pw_gy1coild;
float _temp859_a_gy1rcoil;
int _temp860_pw_gy1rcoila;
int _temp861_pw_gy1rcoil;
int _temp862_pw_gy1rcoild;

#endif /* h_ksepi_hostdecl_h */

