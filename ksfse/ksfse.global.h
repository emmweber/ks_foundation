/*
 *  ksfse.global.h
 *
 *  Do not edit this file. It is automatically generated by EPIC.
 *
 *  Date : Feb 28 2018
 *  Time : 11:06:49
 */

#ifndef h_ksfse_global_h
#define h_ksfse_global_h


extern char psd_name[255];

#include <GElimits.h>
#include <slice_factor.h>  
#include <usage_tag.h>

/* ***************************
   TGT-PSD COMMON AREA
   Pulsegen Constants and
   Hardware specific variables
   ************************** */
#include "ca_filt.h"
#include "CoilParameters.h"
#include "config_platform_hw.h"
#include "epic_advisory_panel.h"
#include "epic_anatomy.h"
#include "epic_entry_points.h"
#include "epic_geometry_types.h"
#include "epic_hw_defs.h"
#include "epic_ifcc_sizes.h"
#include "epic_pulse_structs.h"
#include "epic_regulatory.h"
#include "epic_rsp_sizes.h"
#include "epic_sar_communication.h"
#include "epic_slice_order_types.h"
#include "epic_system_defs.h"
#include "epic_ui_control.h"
#include "epic_usercv.h"
#include "filter_defs.h"
#include "GEtypes.h"             /* type definitions from GEtypes project*/
#include "hoec_defines.h"  /* HOEC */
#include "IfccPSDShared.h"
#include "log_grad_struct.h"
#include "op_recn.h"
#include "pgen_epic.h"
#include "physics_constants.h"
#include "physioHwDefs.h"
#include "psdexitarg.h"
#include "recon_filter_defs.h"
#include "ReconPSDShared.h"

#define TRIG_NLINE  9 /* TRIG_NLINE is not a real hardware trigger.
			 It is used to bump up optr by TR_SLOP when a 
			 sequence may line gate based on the value
			 of optr.  So if a new #define is needed for
			 the hardware, change the value of TRIG_NLINE */

typedef enum CARDIAC_GATE_TYPE
{
    CARDIAC_GATE_TYPE_MIN = 0,
    CARDIAC_GATE_TYPE_NONE = 0,
    CARDIAC_GATE_TYPE_ECG = 1,
    CARDIAC_GATE_TYPE_PG = 2,
    CARDIAC_GATE_TYPE_MAX = 2
} CARDIAC_GATE_TYPE_E;

/* Generic success return value */
#define EM_PSD_NO_ERROR 0


#define CN_PASSES_EXCEEDED 1
#define CN_FRAMES_EXCEEDED 2
#define CN_NOINIT          3
#define EX_NOINIT          4

/* constants for createramps routine */ /* merged 55 bch. YH */
#define PSD_SLOPE_NONE 0
#define PSD_SLOPE_UP 1
#define PSD_SLOPE_DOWN 2

/* END - PSD - TGT common area */

/* Visibility Constants */
#define VIS MODIFIABLE

#ifdef MCVALL
#define INVIS    MODIFIABLE
#define VISONLY  MODIFIABLE
#else /* !MCVALL */
#define INVIS    INVISIBLE
#define VISONLY  VISIBLE
#endif /* MCVALL */

/* The following macros conflict with the ones in
   /vobs/mgd/include/seq.h */
#ifdef RHO2
#undef RHO2
#endif /* RHO2 */
#ifdef SSP
#undef SSP
#endif /* SSP */

/* Board Names */
#define XGRAD TYPXGRAD
#define YGRAD TYPYGRAD
#define ZGRAD TYPZGRAD
#define RHO   TYPRHO1
#define RHO2  TYPRHO2
#define THETA TYPTHETA
#define OMEGA TYPOMEGA
#define SSP   TYPSSP
#define XGRADB TYPBXGRAD
#define YGRADB TYPBYGRAD
#define ZGRADB TYPBZGRAD
#define XGRD 1   /* merged 55 bch */
#define YGRD 2   /* into vmx.     */
#define ZGRD 3   /* YH 10/14/94   */
 
/* Misc. constants */
#ifndef PI
#define PI 3.14159265358979323846
#endif /* PI */
/* Positive Full Scale in TGT.  All #'s scaled to this number */
#define FSI 32768

/* integer values for pi and 2pi */
#define FS_PI 32768
#define FS_2PI 65536

/* Positive PI Phase */
#define PI_PHASE_POS 0x8000
/* Negative PI Phase */
#define PI_PHASE_NEG 0xFFFF8000

/* FEC : Field Strength Codes */
/* Valid B0 Strenth values in Gauss units (1 Tesla = 10000 Gauss) */
#define  B0_40000          40000
#define  B0_30000          30000
#define  B0_15000          15000
#define  B0_10000          10000
#define  B0_7000           7000
#define  B0_5000           5000
#define  B0_3500           3500 /* MFO, Hino, Apr 24 2000, MM */
#define  B0_2000           2000

#define  N_FSTRENGTHS      8

#define GFS 1.0 /* gradient full scale G/cm */

/* gradient coil types *//* vmx 12/07/94 YI */
#define GCOIL_NONE 0
#define GCOIL_CRD 1
#define GCOIL_ROEMER 2
#define GCOIL_HGC 101
#define GCOIL_VECTRA 102
#define GCOIL_PERMANENT 103
#define GCOIL_PERMANENTHIGHER 9 /* YMSmr02461. MFO, Hino, May 16 2000, MM */

/* GRAM tuning board types */
#define GRAM_TUNE_ANALOG 0  /* merged 55 bch into vmx */
#define GRAM_TUNE_DIGITAL 1 /*            YH 10/14/94 */

/* Service Mode Types for Exciter */
#define PSD_SERVOFF 0
#define PSD_SERVSYNTH 1
#define PSD_SERVLB 2

/* Power Amplifier Selects */
#define AMP_ERBTEC 1
#define AMP_SPECTRO 2
#define AMP_DUAL 3

/* RF Exciter Selects */
#define EXC_PRIMARY 1
#define EXC_SECONDARY 2
#define EXC_DUAL 3

/* Excitation Mode */
#define SELECTIVE 0
#define NON_SELECTIVE 1
#define FOCUS 2

/* Pre and Post Min RF AMP Unblank Times */
#define PSD_PRERFAMP_UBL 250
#define PSD_POSTRFAMP_UBL 50
#define PSD_PRERFAMP_UBL_VMX 600

/* Broadband Use */
#define PSD_BROADBANDOFF 0
#define PSD_BROADBANDON 1

/* Powermon ports */
#define PMCH_HEAD 0
#define PMCH_BODY 1
#define PMCH_SPECTRO 2

#define NUM_POWERMON_PORT 3

/* Receiver Input Ports */
#define PSD_RP_HEAD 1
#define PSD_RP_BODY 2
#define PSD_RP_SURFACE 3
#define PSD_RP_CERDMC 4
#define PSD_RP_SPECTRO 5
#define PSD_RP_TEST 0

/* Receiver Bias Port */
#define PSD_RB_HEAD 4
#define PSD_RB_BODY 8
#define PSD_RB_SURFACE 16
#define PSD_RB_TEST 32

/* RF Board Type */
#define RF_BOARD_RRF 0
#define RF_BOARD_DCERD 1

/* Scan Rotation Scaling */
#define SHAREDROTSCALE 32752

/* Pre Defined Timing Constants */
#define TGAP 2

/* TE Button Control Values */
#define PSD_MINFULLTE -1
#define PSD_MINIMUMTE -2
#define PSD_FWINPHASETE	-3
#define PSD_FWOUTPHASETE -4
#define PSD_MAXIMUMTE -5

/* Automin TR Button Control */
#define PSD_MINIMUMTR -1

/* Tissue T1 Button control */
#define PSD_TISSUE_WM -1
#define PSD_TISSUE_GM -2
#define PSD_TISSUE_NONE -3

/* label control for ti buttons */
#define PSD_AUTO_TI -1
#define PSD_LABEL_TI_IR 0
#define PSD_LABEL_TE_PREP 1

/* label control for pause buttons */
#define PSD_LABEL_PAU_LOC 0
#define PSD_LABEL_PAU_REP 1
#define PSD_LABEL_PAU_ACQ 2

/* screen control for rbw buttons */
#define PSD_BW_SCREEN_SET 0
#define PSD_BW_SCREEN_TIM 1

/* Scan Clock Modes */
#define PSD_CLOCK_NORM 0
#define PSD_CLOCK_CARDIAC 1
#define PSD_CLOCK_PAUSE 2
#define PSD_CLOCK_CARDPAUSE 3

/* Cardiac Inter-Sequence Delay Defines */
#define PSD_CARD_INTER_OTHER 0
#define PSD_CARD_INTER_MIN 1
#define PSD_CARD_INTER_EVEN 2

/* Center Frequency Button Defines */
#define PSD_CFCURRENT 0
#define PSD_CFMID 1
#define PSD_CFH2O 2
#define PSD_CFFAT 3
#define PSD_CFPK 4
#define PSD_CFCENTROID 5

/* Type of phase generation for 
   altfrgen */

#define TYPLINEAR 0
#define TYPMFILE 1

/* Limit checks for advisory panel routines */
#define PSD_MIN3DSLICE 16
#define PSD_MINF3DSLICE 16
#define PSD_MIN3DPCSLICE 12
#define PSD_MINSLQPSLAB 16
#define PSD_MAXSLQPSLAB 256
#define PSD_MAXIMAGTYP 4

#define MAX_PASSES	1024

#define MAX_NEX 150 
#define MAX_CINE_NEX 32

/* used for slice select external macro */
#define PLAY_GFILE 1
#define PLAY_TRAP 0
#define PLAY_RFFILE 1 /* merged 55 bch into vmx. YH 10/14/94 */
#define PLAY_SINC 0
#define PLAY_THETA 1
#define NO_THETA 0    /* merged 55 bch into vmx. YH 10/14/94 */

/* END - PSD - TGT common area */
/* Bitmask fields for explicit sat locations */
#define PSD_EXPLICIT_Z2 0x01
#define PSD_EXPLICIT_Z1 0x02
#define PSD_EXPLICIT_Y2 0x04
#define PSD_EXPLICIT_Y1 0x08
#define PSD_EXPLICIT_X2 0x10
#define PSD_EXPLICIT_X1 0x20

/* bits for opexsatmask */
#define PSD_EXPLICIT_1 0x01
#define PSD_EXPLICIT_2 0x02
#define PSD_EXPLICIT_3 0x04
#define PSD_EXPLICIT_4 0x08
#define PSD_EXPLICIT_5 0x10
#define PSD_EXPLICIT_6 0x20

/* bits for opexparal */
#define PSD_1_PARALLEL 0x01
#define PSD_2_PARALLEL 0x02
#define PSD_3_PARALLEL 0x04

/* Bitmask fields for rhvtype (vascular) */
#define VASCULAR   1                /* Vascular scan */
#define PHASE_CON  2                /* Phase contrast scan */
/** #define UNUSED    4             * Bit three currently unused */
#define TWO_SET    8                /* Two set processing */
#define ANTI_ALIAS 16               /* Anti alias algorithm */
#define PHASE_1    32               /* Phase correction bit 1 */
#define PHASE_2    64               /* Phase correction bit 2 */
#define NOISE_SUPP 128              /* Apply noise suppression mask */
#define MAGNITUDE  256              /* Display magnitude image */
#define PHYSICAL_X 512              /* Display physical x correction */
#define PHYSICAL_Y 1024             /* Display physical y correction */
#define PHYSICAL_Z 2048             /* Display physical z correction */
#define COLLAPSE_Z 4096             /* Collapse logical z image */
#define COLLAPSE_X 8192             /* Collapse logical x image */
#define COLLAPSE_Y 16384            /* Collapse logical y image */
#define VN_1SL_2ST 32768            /* Vinnie 1 slice, 2 set */
#define VN_1SL_4ST 65536            /* Vinnie 1 slice, 4 set */
#define VN_2SL_2ST 131072           /* Vinnie 2 slice, 2 set */
#define ANG_10_DEG 524288           /* Projections every 10 degrees */
#define ANG_5_DEG  1048576          /* Projections every 5  degrees */
#define NOISE2     2097152          /* Bit for complex difference */
#define LVSHIM     4194304          /* Bit for LVSHIM */
#define B1MAP      8388608          /* Bit for B1MAP */
#define PSMDE      16777216         /* Bit for PSMDE */

/* constants for vascular enhancements */
#define PHASEDIFF 0
#define COMPLEXDIFF 1
#define FLOWANALYS 2

/* Argument types for psdexit */
#define PSD_ARG_INT 1
#define PSD_ARG_FLOAT 2
#define PSD_ARG_STRING 3

/* Control Fields in SSP instruction */
#define PSD_CINE_BIT  0x800000
#define PSD_EXOR_BIT  0x400000
#define PSD_ISI2_BIT  0x080000
#define PSD_ISI1_BIT  0x040000
#define PSD_ISI0_BIT  0x020000
#define PSD_EFB_BIT   0x000080
#define PSD_UBL_RFMOD 0x000040
#define PSD_SCP_TRIG  0x000020
#define PSD_UBL_SPECT 0x000010
#define PSD_UBL_ERB   0x000008
#define PSD_MTX_UPDT  0x000004
#define PSD_WVE_CLR   0x000002
#define PSD_SLC_MARK  0x000001
#define PSD_SPUI_BIT  0x000100

/* System Update Times */
#define GRAD_UPDATE_TIME cfswgut
#define RF_UPDATE_TIME cfswrfut
#define SSP_UPDATE_TIME cfswssput

#define HW_GRAD_UPDATE_TIME cfhwgut
#define HW_RF_UPDATE_TIME cfhwrfut
#define HW_SSP_UPDATE_TIME cfhwssput

/* Minimum width of the middle part of the trapezoid in microseconds */
#define MINPW_MIDDLE 20

/* Macros for rounding up or down to a gradient or RF boundary */
/* These macros are also defined in supp_macros.h. Let's check for
   multiple definitions. - GFN - 21/Sep/1997 */

#ifndef RUP_GRD 
#define RUP_GRD(A)  ( (GRAD_UPDATE_TIME - ((int)(A)%GRAD_UPDATE_TIME))%GRAD_UPDATE_TIME + (int)(A))
#endif /* RUP_GRD */

#ifndef RDN_GRD
#define RDN_GRD(A)  ( (int)(A)-(int)(A)%GRAD_UPDATE_TIME)
#endif /* RDN_GRD */

#ifndef RUP_RF
#define RUP_RF(A)  (((A)%RF_UPDATE_TIME) ? (int)((A) + RF_UPDATE_TIME) & ~(RF_UPDATE_TIME - 1) : (A))
#endif /* RUP_RF */

#ifndef RDN_RF
#define RDN_RF(A)  ((int)(A) & ~(RF_UPDATE_TIME -1))
#endif /* RDN_RF */

/* Intended only for integer arguments : FEC */
#ifndef CEIL_DIV
#define CEIL_DIV(A,B) (((A)+(B)-1)/(B))
#endif /* CEIL_DIV */

/* Intended only for integer arguments : FEC */
#ifndef FLOOR_DIV
#define FLOOR_DIV(A,B) ((A)/(B))
#endif /* FLOOR_DIV */

/* FEC : nMR */
#ifndef RUP_FACTOR
#define RUP_FACTOR(N,FACT) (CEIL_DIV(N,FACT) * (FACT))
#endif /* RUP_FACTOR */

/* FEC : nMR */
#ifndef RDN_FACTOR
#define RDN_FACTOR(N,FACT) (FLOOR_DIV(N,FACT) * (FACT))
#endif /* RDN_FACTOR */

/* FEC : nMR */
#ifndef FS_SCALEUP
#define FS_SCALEUP(fs)     ((float ) 15000/(float ) (fs)) 
#endif  /* FS_SCALEUP */

/* FEC : nMR */
#ifndef FS_SCALEDOWN
#define FS_SCALEDOWN(fs)   ((float ) (fs)/(float ) 15000) 
#endif  /* FS_SCALEDOWN */

#define MIN_PLATEAU_TIME (2*GRAD_UPDATE_TIME)

/* Theta path frequency path multiplier */
#define PSD_THETAFREQ_SHIFT 4

/* TGT Instruction Size Allocations */
#define PSD_GRADX_INSTR_SIZE  4096 
#define PSD_GRADY_INSTR_SIZE  4096 
#define PSD_GRADZ_INSTR_SIZE  4096 
#define PSD_RHO1_INSTR_SIZE   4096 
#define PSD_RHO2_INSTR_SIZE   4096 
#define PSD_THETA_INSTR_SIZE  4096 
#define PSD_OMEGA_INSTR_SIZE  4096 
#define PSD_SSP_INSTR_SIZE    8192 
#define PSD_AUX_INSTR_SIZE     64

/* TGT Exit Codes */
#define ERRNONE 0 /* Normal error */

/* VRG pulse Resolutions */
#define RES_VRG_GRD 256
#define RES_VRG_RF1 512
#define RES_VRG_RF2 512
#define RES_NVRG_RF1 800
#define RES_NVRG_RF2 400
#define PSD_TRMIN 18000


/* CV limit constants */
#define FOV_MIN_LX 1/*MFO2 10/31/01 AY*/
#define FOV_MIN 1
#define FOV_MIN_VMX 30
#define FOV_MIN_PROFILE 80        /* profile 09/11/95 NM */
#define FOV_MAX 500
#define FOV_MAX_VMX 450
#define FOV_MAX_PROFILE 400       /* profile 09/11/95 NM */
/* maximal FOV for axial scan with the zoom gradient is 44 cm (May 17, 2001)*/
#define FOV_MAX_ZOOM 440    /* for zoom coil of twin gradients (GT)*/
#define FOV_MAX_SCALE 1.2
#define PSD_GRXROI_LEN 640.0
#define PSD_SEQMODE_OFF 0
#define ILIRMODE PSD_SEQMODE_OFF
#define MIN_TDEL1 10
#define MIN_SEQ_SYS 100 
#define MAX_TDEL1 1600000
#define MIN_RESP_POINT 10
#define MAX_RESP_POINT 90
#define MIN_RESP_WINDOW 10
#define MAX_RESP_WINDOW 90
#define MAX_CINE_PHASES 32
#define MAX_CINE_SLICES 4
#define MAX_STHICK 200.0
#define MAX_SLICE3D 256
#define MAXTHICK 20
#define MAXVTHICK 1280
#define MAXVQUANT 64
#define MIN_OFFSET -255
#define MIN_SLOC -12000
#define MIN_STHICK 10.0
#define MINTHICK 0.1
#define MINTHICK_VMX 2.7
#define NEX_MAX 200
#define NECHO_MIN 1
#define NECHO_MAX 4
#define NOIRMODE 0
#define PSD_NECHO_MAX 1024
#define PSD_SEQMODE_ON 1
#define SIRMODE PSD_SEQMODE_ON
#define SHORT_TE 22000
#define TE_MIN 8 
#define TE_MAX 2000000
#define TE2_MIN 20000
#define TI_MIN 50000
#define TI_MAX 4000000
#define TRECOVERY_MIN 0
#define TRECOVERY_MAX 10000000
#define TLABEL_MIN 1000000
#define TLABEL_MAX 3000000
#define TLABEL_DEF 2000000
#define TR_MIN 100
#define TR_MAX 15000000
#define TR_RANGE_MIN 100
#define TR_RANGE_MAX 50000000
#define XRES_MAX 2048 
#define YRES_MAX 2048 
#define MAXSLQUANT3D 256
#define MAXSLQUANT2D GEMRI_MAXNOSLICES
#define PSD_HNOVER 8
#define PHASES_MIN 1
#define PHASES_MAX 512
#define PSD_MINTEFULL 1
#define PSD_MINTE 2
#define PSD_FWINPHS 3
#define PSD_FWOUTPHS 4
#define PSD_MAXTE 5
#define PSD_TDEL1_MINIMUM 1
#define PSD_TDEL1_RECOMMENDED 2
#define PSD_TDEL1_SYSTOLIC 3
#define PSD_TDEL1_DIASTOLIC 4

/* Fat/Water in Phase Range Limits */
#define PSD_LLIMTEIN1  4200 
#define PSD_ULIMTEIN1  6000 
#define PSD_LLIMTEIN2  8500 
#define PSD_ULIMTEIN2  10000 
#define PSD_LLIMTEIN3  13000 
#define PSD_ULIMTEIN3  TE_MAX

/* Fat/Water out of Phase Range Limits */
#define PSD_LLIMTEOUT1  1800 
#define PSD_ULIMTEOUT1  2800 
#define PSD_LLIMTEOUT2  6300 
#define PSD_ULIMTEOUT2  7300 
#define PSD_LLIMTEOUT3  10800 
#define PSD_ULIMTEOUT3  12000 

/* Tensor related Limits */
/* moved tensor related limits from epic.h to /vobs/lx/slice_factor.h
 * since they are shared by PSD and recon  MRIhc08446
 * */

/* Fat/Water out of Phase Range Limits. Feb 98 MM *//* MFO Hino 06/28/00 YI */
#define PSD_LLIMTEOUT1_VMX  6710   /* 3.5ppm chemical shift. 0.5 T system */
#define PSD_ULIMTEOUT1_VMX  7110   /* 3.3ppm chemical shift. 0.5 T system */
#define PSD_LLIMTEOUT2_VMX  PSD_LLIMTEOUT1_VMX * 3
#define PSD_ULIMTEOUT2_VMX  PSD_ULIMTEOUT1_VMX * 3
#define PSD_LLIMTEOUT3_VMX  PSD_LLIMTEOUT1_VMX * 5
#define PSD_ULIMTEOUT3_VMX  PSD_ULIMTEOUT1_VMX * 5
/* Fat/Water in Phase Range Limits */
#define PSD_LLIMTEIN1_VMX   PSD_LLIMTEOUT1_VMX * 2
#define PSD_ULIMTEIN1_VMX   PSD_ULIMTEOUT1_VMX * 2
#define PSD_LLIMTEIN2_VMX   PSD_LLIMTEOUT1_VMX * 4
#define PSD_ULIMTEIN2_VMX   PSD_ULIMTEOUT1_VMX * 4
#define PSD_LLIMTEIN3_VMX   PSD_LLIMTEOUT1_VMX * 6
#define PSD_ULIMTEIN3_VMX   PSD_ULIMTEOUT1_VMX * 6
/* end MFO */

/* fat water recon cv(rhfatwater) control flag *//* MFO 03/28/2001 MM */
#define FATWATER_OFF          0
#define WATER_IMAGE           0x0001
#define FAT_IMAGE             0x0002
#define ORIGINAL_IMAGE        0x0004
#define FW_FAT_WATER_SWAP     0x0008  /* swap real and imag */
/* MRIhc06477 */
#ifndef FW_1_4_PI_PHASE_DIFF
#define FW_1_4_PI_PHASE_DIFF  0x0010  /* 2*PI/8 phase difference */
#endif
#ifndef FW_2_3_PI_PHASE_DIFF
#define FW_2_3_PI_PHASE_DIFF  0x0020  /* 2*PI/3 phase difference */
#endif
#ifndef FW_1_3_PI_PHASE_DIFF
#define FW_1_3_PI_PHASE_DIFF  0x0040  /* 2*PI/6 phase difference */
#endif
/* MRIhc06477 */

#define FATWATER_SHIFT_1_4_PI_MFO   2880 /* theoretical value is 2500 */
#define FATWATER_SHIFT_1_3_PI_MFO   3700 /* theoretical value is 3333 */
#define FATWATER_SHIFT_1_2_PI_MFO   5376 /* theoretical value is 5000 */
#define FATWATER_SHIFT_2_3_PI_MFO   7040 /* theoretical value is 6666 */

/* HFO fatwater defines. YMSmr05141. Dec 05 2003. MM */
#define FATWATER_SHIFT_2_PI_HFO     9900 /* 2PI phase shift time */
#define FATWATER_SHIFT_1_4_PI_HFO   1344 /* theoretical value is 1238 */
#define FATWATER_SHIFT_1_3_PI_HFO   1752 /* theoretical value is 1667 */
#define FATWATER_SHIFT_1_2_PI_HFO   2576 /* theoretical value is 2475 */
#define FATWATER_SHIFT_2_3_PI_HFO   3408 /* theoretical value is 3300 */

/* Profile 5 fatwater defines. YMSmr*** Apr 22 2004. MM */
#define FATWATER_SHIFT_1_4_PI_LFO   4932 /* theoretical value is  4375 */
#define FATWATER_SHIFT_1_3_PI_LFO   6376 /* theoretical value is  5833 */
#define FATWATER_SHIFT_1_2_PI_LFO   9264 /* theoretical value is  8750 */
#define FATWATER_SHIFT_2_3_PI_LFO  12152 /* theoretical value is 11667 */

/* RV: Dixon frequency shift definition for 1.5T */
#define FATWATER_DIXFREQ_1_5T       210 /* value in Hz */
#define SILICONEWATER_DIXFREQ_1_5T  310 /* value in Hz */

/* for coil option check *//* MFO 10/02/01 YI */
#define SEC_CODE_INIT -1

/* ************************************************
   CV Processing, Predownload, and RSP
   Initialization Routines

   Structures and Constants 
   
* ************************************************ */
/* Number of entries in data acq table */
#define PRESCAN_ROT_MAX 1           /* MRIge43968: only one for Prescan */ 
#define RHF_MAX_IMAGES_MULTIPHASE 10000 /* Max images for a multiphase scan*/

/* Misc. constants */
#define TARDIS_FREQ_RES 0.59604648

/* Acquisition Types */
#define TYPSPIN 0   /* Spin Echo */
#define TYPGRAD 1   /* Gradient Recalled */

/* Define Types */
#define TYPNDEF 0   /* Don't caculate */
#define TYPDEF 1    /* Calculate */

/* Echo Type */
#define TYPNVEMP 0     /* Normal */
#define TYPVEMP  1     /* VEMP sequence */

/* Resp Comp Type */
#define TYPNORM   0  /* Normal phase ordering */
#define TYPLSORT  1  /* Low Sort Exorcist */
#define TYPHSORT  2  /* High Sort Exorcist */
#define TYPAHSORT 3  /* Average High Sort */

/* Frequency generation type */
#define TYPTRANSMIT   0  /* Generate Transmit frequencies */
#define TYPREC        1  /* Receive frequency */
#define TYPRECGRDEVEN 2  /* Gradient Recall Even echo freq */
/*  following sentences are 5.5 changes. YH 10/14/94 */
#define TYPFASTREC        3 /* Receive frequency - research
                               fast recvr */
#define TYPFASTRECGRDEVEN 4 /* Gradient Recall Even echo freq - research
                                                          fast recvr */

/* Crusher Generation types */
#define PSD_TYPCMEMP 0
#define PSD_TYPCCSMEMP 1
#define PSD_TYPCFCMEMP 2
#define PSD_TYPCPOMP 3
#define PSD_TYPCFCPOMP 4


/* Chopping Codes */
#define CHOP_BL 0    /* Chopper state: chop only baselines (<1NEX) */
#define CHOP_ALL 1   /* Chopper state: chop all views (>1NEX) */
#define CHOP_NONE 2  /* Chopper state: chop nothing */

/* Autoshim constants */

/* Dab Operations */
#define DABSTORE 0    /* DAB operation to store xcvr data */
#define DABADD 1     /* DAB operation to accumulate data */
#define DABSUBCNTS 2  /* DAB operation to subtract contents from xcvr data */
#define DABSUBXCVR 3   /* DAB operation to subtract xcvr data from contents */
#define DABRECLEN 2048

/* Recon Types */
#define RHTYPCHP 1       /* For setting Chop bit in rhtyp */
#define RHTYPCINE  2
#define RHTYPSHIM  4
#define RHTYPGR    8
#define RHTYPFRACTNEX  16
#define RHTYPSTRIP    32
#define RHTYP3D    64
#define RHTYPXOR  128
#define RHTYPNPW   256
#define RHTYPNFW  512
#define RHTYPXSTRIP 1024 /* For strip scan in X direction */
#define RHTYPFRACTECHO 2048
#define RHTYP75NEX  8192
#define RHTYPPOMP  16384   /* For setting POMP bit in rhtype */
#define RHTYPTURBO  32768	/* For setting turbo bit in rhtype */

/* More recon types, used in rhtype1 */
#define RHTYP1HOMODYNE 1  /* indicates homodyne processing */
#define RHTYP1NEXA 2 /* indicated that the nex abort table will be
                       used to store the nex values during the collection
                       of the 2nd echo.
                       Normally used for Odd Nex Fast Spin Echo scans
                       with two echoes. */
#define RHTYP1CINEODDNEX 4
#define RHTYP1SFRAME 8  /*  for 64kHz bandwidth multi-coil norec
                           superframe processing */
#define RHTYP3DM 16    /* 3D multi-slab */
#define RHTYP13DM 16    /* 3D multi-slab */
#define RHTYPMAXOVL 32 /* maximum intensity pixel collapse overlap processing */
#define RHTYP1MAXOVL 32 /* maximum intensity pixel collapse overlap processing */
#define RHTYPMINOVL 64 /* minimum intensity pixel collapse overlap processing */
#define RHTYP1MINOVL 64 /* minimum intensity pixel collapse overlap processing */
#define RHTYPAVEOVL 96  /* average intensity pixel collapse overlap processing */
#define RHTYP1AVEOVL 96  /* average intensity pixel collapse overlap processing */
#define RHTYP1FPHASEOFF 128
#define RHTYP1AUTOPASS 256
#define RHTYP1IMGNEX 512
#define RHTYPSPIRAL 1024
#define RHTYP1SPIRAL 1024
#define RHTYP1FVRGF 2048
#define RHTYP1RCALLPASS 4096 /* do not skip any passes */
#define RHTYPLINE   8192    /* MFO2. For Line scan diffusion */
#define RHTYP1LINE   8192    /* MFO2. For Line scan diffusion */
#define RHTYPLSDI   8192 /* LSDI */ /* HFO3 merge 02/18/2003 YI */
#define RHTYP1LSDI   8192 /* LSDI */ /* HFO3 merge 02/18/2003 YI */
#define RHTYPECTRICKS 16384 /* rhtype1 upto 8192 is used in rdbm.h  KVA */
#define RHTYP1PCORVRGF 32768 /* VRGF processing after phase correction */
#define RHTYP10ROWENDS 65536 /* zero out row ends */
#define RHTYPRETRO_PC  131072 /* HFO4 merge RETRO PC for FSE. MM */
#define RHTY1PRETRO_PC  131072 /* HFO4 merge RETRO PC for FSE. MM */
#define RHTYP1BAM0FILL  262144 /* zero fill bam before start of acq */
#define RHTYP1SUPPORT  524288 /* Support raw data server */
#define RHTYP1INITPATH  1048576 /* Set if initial data path is raw data server */
#define RHTYP1DIFFUSIONEPI  2097152 /* Difusion EPI */
#define RHTYP13DGRADWARP 4194304 /* 3D gradwarp */
#define RHTYP13DASL 8388608 /* 3D ASL */
#define RHTYP1RADIAL3D  16777216    /* RADIAL 3D */
#define RHTYP1CMPLXIMGNEX 33554432 /* Complex average (as opposed to magnitude
			              averaging with RHTYP1IMGNEX) */

/* *****************************
   Defines for rhrcctrl
   ***************************** */
#define RHRCMAG                  1   /* 0x0001 magnitude images   */
#define RHRCPHS                  2   /* 0x0002 phase images       */
#define RHRCIMAG                 4   /* 0x0004 I magnitude images */
#define RHRCQMAG                 8   /* 0x0008 Q magnitude images */
#define RHRCCOMP                16   /* 0x0010 compressed images  */
#define RHRCGRID_ON             32   /* 0x0020 */
#define RHRCRAW                128   /* 0x0080 raw image recon */
#define RHRCSKIP_ROW_FFT       256   /* 0x0100 */
#define RHRCSKIP_COL_FFT       512   /* 0x0200 */
#define RHRCSKIP_HALF_FOURIER 1024   /* 0x0400 */
#define RHRCSKIP_FERMI        2048   /* 0x0800 */
#define RHRCSKIP_NEX_SCALE    4096   /* 0x1000 */
#define RHRCSKIP_IMAGE_SCALE  8192   /* 0x2000 */
#define RHRCSKIP_3DJOB_FFT   16384   /* 0x4000 */

/* *****************************
   Defines for rhdacqctrl
   ***************************** */
#define RHDC_RAWDATA                 1   /* 0x0001 true raw data */
#define RHDC_EEPF                    2   /* 0x0002 even echo phase flip */
#define RHDC_OEPF                    4   /* 0x0004 odd echo phase flip */
#define RHDC_EEFF                    8   /* 0x0008 even echo freq flip */
#define RHDC_OEFF                   16   /* 0x0010 odd echo freq flip */
#define RHDC_RAW_EXCLUDE_SSP        32   /* 0x0020 drop SSP info from raw */
#define RHDC_RAW_BUFFER_WRAP        64   /* 0x0040 circular raw data buffer */
#define RHDC_CARDIAC_MMODE         256   /* 0x0100 cardiac monitor mode */
#define RHDC_FAST_CINE             512   /* 0x0200 fast CINE mode */
#define RHDC_FCINE_ET             1024   /* 0x0400 fast CINE echotrain mode */
#define RH_FCINE_ET               1024   /* fcine Echotrain data acq. */
#define RHDC_CERD_PASS_THROUGH    2048   /* 0x0800 pass through filter */
#define RH_PASS_THROUGH_CERD_FLAG 2048   /* passthrough data acq. */
#define RHDC_CERD_CONST_FILTER    4096   /* 0x1000 no filter switching */
/* MRIhc06477 */
#ifndef RDB_CERD_CONSTANT_FILTER
#define RDB_CERD_CONSTANT_FILTER  4096   /* MRIge61411  */
#endif

/* *****************************
   Defines for rhdiskacqctrl
   ***************************** */
#define RDB_DISK_ACQ_OVERFLOW     0x00000001 /* 1 enable acq to disk overflow */
#define RDB_DISK_ACQ_RAW_CAPTURE  0x00000002 /* 2 enable raw frame and control capture */

/* ************************************
   Defines for rhchannel_combine_method
   ************************************ */
#define RHCCM_SUM_OF_SQUARES 0
#define RHCCM_C3_RECON_FOR_PHASE_I_Q_IMAGES  1
#define RHCCM_C3_RECON_FOR_MAG_PHASE_I_Q_IMAGES  2
#define RHCCM_eC3_RECON_FOR_MAG_PHASE_I_Q_IMAGES  4
#define RHCCM_ASSET_COMBINE 3

#define PMFULL 255       /* Full scale power monitor.
                          * Power monitor values are scaled to this */
#define PMTYP_2CHANNEL 0     /* Old, 2-channel power monitor */
#define PMTYP_3CHANNEL 1     /* 3-channel ERBTEC power monitor */
#define PMTYP_VMX 2          /* VMX Power Monitor */
#define PMTYP_UPM 3          /* Universal Power Monitor Hardware */
#define PMTYP_UPMLEGACY 3    /* Universal Power Monitor in Legacy mode */
#define PMTYP_UPMAVERAGE 4   /* Universal Power Monitor in Average mode */

/* Number of Exciters in the system */
#define MAX_NUM_EXCITERS 2
#include "coilsupportDefs.h"

/* ************************************
 *    Defines for rhpcctrl
 * ************************************ */
#define RHPCCTRL_NN_PROJ   0x00000001 /* Enable PC estimation after view projection       */
#define RHPCCTRL_NN_WEIGHT 0x00000002 /* Enable PC estimation using new weight method     */
#define RHPCCTRL_CON_ALIGN 0x00000004 /* Enalbe PC constant coefficient alignment         */
#define RHPCCTRL_COIL_COMB 0x00000008 /* Enable PC estimation using channel combined data */

typedef char EXTERN_FILENAME[80];
typedef char *EXTERN_FILENAME2;
/*
  Constants below are used above for the field ptype
*/

#define G_RAMP 1
#define G_TRAP 2
#define G_SIN  3      /* Half sin , 0 offset */
#define G_CONSTANT 4
/*#define G_SINPHASE 5 */ /* Phase encoding sin wave 
		        (varying amplitude ) */
#define G_ARBTRAP 5 /* Trapezoid with arbitrary start and
                       ending amplitudes and a possible
                       slope to the middle portion of the waveform */
#define G_USER 6     /* User defined.  Use power field. */
#define G_EMPTY -1   /* instructs CV routine to ignore this struct */

/* merged 55 bch into vmx. changed from 25 to 50. YH 10/14/94 */
/* increased from 50 to 70 for DV26 prescan enhancements. HS */
#define MAX_GRADX_NUM 70 
#define MAX_GRADY_NUM 70
#define MAX_GRADZ_NUM 70
#define MAX_RFPULSE_NUM 70

/* Ramp pulse directions */
#define PSD_POSRAMP 1
#define PSD_NORAMP 0
#define PSD_NEGRAMP -1

/* constants for TRAPEZOID2 macro */
#define TRAP_RAMPA 1
#define TRAP_CONST 2
#define TRAP_RAMPD 4
#define TRAP_SLOPED 8
#define TRAP_ALL 7
#define TRAP_ALL_SLOPED 15
/* Ratio of trapezoidal phase encoding flattop amplitudes.
   Equalt to 1.0 - 64.0/max_pg_wamp */
#define PSDRAMPEDTRAP 0.998047

#define PHASESTEP32 32

/* constants for slice quantity */
#define PSD_SLQUANT8 8
#define PSD_SLQUANT16 16
#define PSD_SLQUANT32 32
#define PSD_SLQUANT64 64
 
/* Default number of filter prefills */
#define DEFPREFILLS 129
 
/* opbloptimize defines */
#define PSD_OBL_RESTRICT 0
#define PSD_OBL_OPTIMAL 1

/* echo planar constants ***************************//* 3/13/95 YI */

/* k-space trajectory constants */
/* These indicate sense (or direction) only */
#define PSD_TOP_DOWN 0    /* top-to-bottom */
#define PSD_CENTER_OUT 1  /* center-to-top/center-to-bottom */
#define PSD_BOTTOM_UP 2   /* bottom-to-top */

/* ky fraction constants */
#define PSD_FULL_KY 0
#define PSD_FRACT_KY 1

/*fMRI paradigm type*/
#define SIMPLE_BLOCK 0
#define INTERLEAVE_BLOCK 1 
#define COMPLEX_BLOCK 2 
#define EVENT_RELATED 3 

/* alternation factor constants */
#define PSD_ALT_NONE 0
#define PSD_ALT_ODD_EVEN 1
#define PSD_ALT_HALVES 2
#define PSD_ALT_SUBGROUPS 3
/* end echo planar constants ***************************/

#define PSD_FRONT_LOADED_SLICE_SORT 0
#define PSD_DISTRIBUTED_SLICE_SORT  1
 
/* GRAM IDENTIFIERS */
#define PSD_NOGRAM      0
#define PSD_GRAM1       1
#define PSD_GRAM2       2
 
/* SR modes */
#define PSD_SR17     17
#define PSD_SR20     20
#define PSD_SR25     25
#define PSD_SR33     33
#define PSD_SR40     40
#define PSD_SR50     50
#define PSD_SR77     77
#define PSD_SR100   100   /* XFD */
#define PSD_SR120   120
#define PSD_SR150   150
#define PSD_SR200   200   /* XRMB */
#define PSD_SR230   230

/* SR amplitude factors  - used to scale loggrd structure */
#define SR17_FACTOR     0.95
#define SR20_FACTOR     1.0
#define SR50_FACTOR     1.0
#define SR77_FACTOR     1.0
#define SR120_FACTOR    1.0
#define SR230_FACTOR    1.0

/* For TRM type (Twin gradient coils)- define which coil is used */
#define TRM_BODY_COIL 1  
#define TRM_ZOOM_COIL 2  

 /* bit map of GRAM axis for sigrammode  *//* 3/13/95 YI */
#define XGRAM 1  /* X GRAM */
#define YGRAM 2  /* Y GRAM */
#define ZGRAM 4  /* Z GRAM */

/*
  Structure to record entry point specific enformation for the power
  monitor and receiver/exciter setup. Found in lx/include. Has the
  type definition for ENTRY_POINT_TABLE (entry_point_table_t).
  */

#include <entrypttab.h>

/* Definitions for disabling the cross term factors coming
   FROM a particular port in the universal power monitor. */
#define UPM_DISABLE_BODY_CROSS_TERM 1
#define UPM_DISABLE_TR_CROSS_TERM 2
#define UPM_DISABLE_SPECTRO_CROSS_TERM 4
#define UPM_DISABLE_CW_CROSS_TERM 8
#define UPM_DISABLE_OTHER_METER 16
#define UPM_DISABLE_EXTREMITY_METER 32
#define UPM_DISABLE_HEAD_METER 64
#define UPM_DISABLE_BODY_METER 128


/* phase offset structure and vars.  Prior to release 5.5, this
   was declared in each individual psd */
/*  array to store calculated phase offset and sign */
typedef struct {
    int ysign;  /* sign of the phase offset */
    int yoffs;  /* calculated phase offset from rsp_info structure */
} PHASE_OFF;

/* MRIge91352 - SAR/dbdt changes for E3 */

/* Macro to get the Reilly mode */
#define GET_REILLY_MODE ((MHW2_BODY == cfgovbody) ? RECTANGULAR_MODE : CONVOLUTION_INTEGRAL_MODE )

/*---------------------------------------------------------------------
 | rhformat
 | Define bits for the FORMAT offset in the RDBM hdr. These define 
 | various non-data related processes which may be turned on or off 
 | just for fun. These bits may be added together to form a 16-bit    
 | bitmask.  Please note that these must match the RDB_ prefix
 | definitions in rdbm.h.
 ---------------------------------------------------------------------*/
#define RHF_NO_GRADWARP                0x0001	/* 1     */
#define RHF_NO_FERMI                   0x0002	/* 2     */
#define RHF_ZCHOP                      0x0004	/* 4     */
#define RHF_YCHOP                      0x0008	/* 8     */
#define RHF_IIC                        0x0010	/* 16    */
#define RHF_CSI                        0x0020	/* 32    */
#define RHF_HS                         0x0040	/* 64    */
#define RHF_SPECTRO                    0x0080   /* 128   */
#define RHF_IMAGE_CHECKSUM             0x0100   /* 256   */
#define RHF_NOREC_CHECKSUM             0x0200   /* 512   */
#define RHF_GRADWARP_USE_FILE          0x0400   /* 1024  */
#define RHF_USE_FLIPTABLE              0x0800   /* 2048  */
#define RHF_CERD_USE_FLIP_SSP          0x1000   /* 4096  */
#define RHF_PSIR_CORRECTION            0x2000   /* 8192  */  /* AF 03/22/01 MRIge65182 */
#define RHF_SINGLE_PHASE_INFO          0x4000   /* 16384 */ /* For > 1024 im/ser */

/*---------------------------------------------------------------------
 | rhexecctrl
 | Control bit definitions for what results the tps will transfer to the host.
 ---------------------------------------------------------------------*/
#define RHXC_AUTO_DISPLAY               0x0001	/* 1 */
#define RHXC_AUTO_LOCK                  0x0002	/* 2 */
#define RHXC_AUTO_LOCK_ALLRECS          0x0004	/* 4 */
#define RHXC_XFER_IM                    0x0008	/* 8 */
#define RHXC_SAVE_IM                    0x0010	/* 16 */
#define RHXC_TAPE_LOCK                  0x0020	/* 32 */
#define RHXC_INTERMEDIATE               0x0040	/* 64 */
#define RHXC_OVERRIDE_BROADCAST         0x0080	/* 128 */
#define RHXC_OVERRIDE_IMG_INSTALL       0x0100	/* 256 */
#define RHXC_OVERRIDE_AUTODISPLAY       0x0200	/* 512 */
#define RHXC_RTD_XFER_IM_REMOTE         0x0400   /* 1024 */
#define RHXC_RTD_SCAN                   0x0800   /* 2048 */
#define RHXC_REF_SCAN                   0x1000   /* 4096 */
#define RHXC_DONT_WRITE_OR_INSTALL      0x2000   /* 8192 */
#define RHXC_RTD_XFER_ALL_IM_PER_PASS   0x4000   /* 16384 */
#define RHXC_XFER_IMG_RIR               0x8000   /* 32768 */

/* AF 03/22/01 MRIge65182 Bitmask for opflair */

#define OPFLAIR_SINGLE      0
#define OPFLAIR_GROUP       1
#define OPFLAIR_INTERLEAVED 2

#define WHOLE_SUFFIX ".WHOLE"
#define ZOOM_SUFFIX ".ZOOM"

/* Acquisition types */
#define SPECPSD_MASTER_H1 0
#define SPECPSD_SLAVE_H1 1
#define SPECPSD_SLAVE_MNS 2
#define SPECPSD_MASTER_MNS 3

/* OLD DEFINES: NOTE DIFFERENCE WITH MASTER/SLAVE DEFINITIONS!
   MNS CERD1/MASTER and MNS CERD2/SLAVE HAVE CHANGED POSITIONS */
#define SPECPSD_CERD1_H1 0
#define SPECPSD_CERD2_H1 1
#define SPECPSD_CERD1_MNS 3
#define SPECPSD_CERD2_MNS 2

/* rhexciterusage definitions */
#define USE_EX1  (1 << 0)
#define USE_EX2  (1 << 1)
#define USE_EX3  (1 << 2)
#define USE_EX4  (1 << 3)
#define USE_EX5  (1 << 4)
#define USE_EX6  (1 << 5)
#define USE_EX7  (1 << 6)
#define USE_EX8  (1 << 7)
#define USE_EX9  (1 << 8)
#define USE_EX10 (1 << 9)
#define USE_EX11 (1 << 10)
#define USE_EX12 (1 << 11)
#define USE_EX13 (1 << 12)
#define USE_EX14 (1 << 13)
#define USE_EX15 (1 << 14)
#define USE_EX16 (1 << 15)

/* rhexciterfreqs definitions */
#define USE_H1_FRQ   (0)
#define USE_GAM_EX1  (1 << 0)
#define USE_GAM_EX2  (1 << 1)
#define USE_GAM_EX3  (1 << 2)
#define USE_GAM_EX4  (1 << 3)
#define USE_GAM_EX5  (1 << 4)
#define USE_GAM_EX6  (1 << 5)
#define USE_GAM_EX7  (1 << 6)
#define USE_GAM_EX8  (1 << 7)
#define USE_GAM_EX9  (1 << 8)
#define USE_GAM_EX10 (1 << 9)
#define USE_GAM_EX11 (1 << 10)
#define USE_GAM_EX12 (1 << 11)
#define USE_GAM_EX13 (1 << 12)
#define USE_GAM_EX14 (1 << 13)
#define USE_GAM_EX15 (1 << 14)
#define USE_GAM_EX16 (1 << 15)

/* Definitions for picsimode */
#define PICSI_CALC_MASK 0x0003
#define PICSI_CALC_3D 0
#define PICSI_CALC_1SLICE 1
#define PICSI_CALC_RXEXACT 2
#define PICSI_CALC_3D1SLICE 3

#define PICSI_FREEFORM_GRX_MASK 0x0004
#define PICSI_FREEFORM_GRX 4

#define PICSI_CALDATA_REQ_MASK 0x0008
#define PICSI_CALDATA_REQ 8

/* Defines for Accel calibration (opassetcal) */
#define ASSET_CAL_MASK 1
#define ASSET_CAL_REG 2

/* Definitions for RHASSET ASSET scan types */
#define ASSET_OFF 0
#define ASSET_CAL 1
#define ASSET_SCAN 2
#define ASSET_SCAN_PHASE ASSET_SCAN
#define ASSET_SCAN_SLICE 3
#define ASSET_REG_CAL 6

/* Definitions for RHASSET ARC scans */
#define ACCEL_ARC 11
#define ACCEL_DVCARC 12

/* Definition of Max Accel (arbitrary) */
#define MAX_ACCEL 20

/* Definitions for BBA scan types */
#define BBA_OFF 0
#define BBA_ONEVOL 1
#define BBA_TWOVOL 2

/* Definitions for Recon board types */
#define AP_NONE 0
#define AP_PPC 1

/* Definitions for FSE retro PC types. HFO4. MM */
#define RETRO_AHN_CHO_METHOD   1 
#define RETRO_LSQ_METHOD       2 
#define RETRO_ZEROTH_ORDER     4 
#define RETRO_FIRST_ORDER      8 
#define RETRO_ONE_EXTRA_ETL    16 
#define RETRO_TWO_EXTRA_ETL    32 
#define RETRO_SKIP_PROCESSING  64
#define RETRO_FITTING_CHECK    128

/* Definitions for Debugging Support of AutominTR
 * DEBUG_PROD will have minimal debug support for
 * critical errors. DEBUG_DEV is for Debug Messages
 * in Development Mode - Rel 14.0
 * */

#define DEBUG_NONE 0
#define DEBUG_PROD 1
#define DEBUG_DEV  2

/* For HDMR2 Localized CFH-Non Selective IR PRESS */
#define PRESSCFH_SLICE 1      
#define PRESSCFH_SLAB 2                                              
#define PRESSCFH_SHIMVOL 3
#define PRESSCFH_SHIMVOL_SLICE 4
#define PRESSCFH_NONE 5

/* System Max TG limit */
#define MAX_SYS_TG 200

typedef struct {
  float rsppsctloc;  /* location in mm isocenter slab */
  float rsppscrloc; /* receive location in mm */
  float rsppscphasoff;  /* distance in mm from isocenter in the phase direction */
  long rsppscrot[10];  /* rotation matrix */
  int rsppsclenx;  /* length of the prescan slab in x direction */
  int rsppscleny;  /* length of the prescan slab in y direction */
  int rsppsclenz;  /* length of the prescan slab in z direction */
 } RSP_PSC_INFO;

/* Graphic IR Bands */
#define PSD_GIRMANUAL   0       /* Manual Graphic IR Bands mode */
#define PSD_GIRAUTO     1       /* Auto Graphic IR Bands mode */
#define MIN_GIR_THICK   MIN_STHICK  /* Minimum Graphic IR Band Thickness in mm */
#define MAX_GIR_THICK   400.0       /* Maximum Graphic IR Band Thickness in mm */
#define MAX_NUM_GIR     2       /* Maximum number of Graphic IR Bands */

typedef struct {
    float   opgirthick;     /* User specified thickness in mm */
    float   opgirtloc;      /* Distance in mm of Graphic IR center from the isocenter along the Normal direction */
    float   opgirrot[9];    /* Rotation matrix for Graphic IR */
} GIR_INFO;

#define CONFIG_UPDATE_TYPE_SKIP -1
#define CONFIG_UPDATE_TYPE_ACGD_PLUS 0
#define CONFIG_UPDATE_TYPE_TENSOR 1
#define CONFIG_UPDATE_TYPE_SPINECHOCSI 2
#define CONFIG_UPDATE_TYPE_DVW_AMP20SR150 3
#define CONFIG_UPDATE_TYPE_DVW_AMP34SR120 4
#define CONFIG_UPDATE_TYPE_DVW_AMP321SR120 5
#define CONFIG_UPDATE_TYPE_DVW_DEFAULT 6
#define CONFIG_UPDATE_TYPE_FSE_EXTREME_HIGH_RES 7
#define CONFIG_UPDATE_TYPE_VSTRTE_DEFAULT 8
#define CONFIG_UPDATE_TYPE_VSTRTE_AMP20SR150 9
#define CONFIG_UPDATE_TYPE_DVW_AMP44SR175 10  /* gradspec test configuration */
#define CONFIG_UPDATE_TYPE_SSS_EPI 11

/* Gradient Spec Control and Silent Mode */
#define CONFIG_SAVE -1
#define NOGRAD_CHANGE 0
#define GMAX_CHANGE   1
#define SRATE_CHANGE  2
#define MK_SPEC_SR_CHANGE 1
#define MK_SPEC_DBDT_LIMIT_OFF 2

#define DERATE_B1_BY_COIL 1
#define DERATE_B1_MIN_SAR_COIL 2

/*---------------------------------------------------------------------
 | rhrcideal
 ---------------------------------------------------------------------*/
#define IDEAL_ON_OFF_FLAG                   0x0001 /* 1 */
#define IDEAL_PERFORM_HALF_NEX_PROCESSING   0x0002 /* 2 */
#define IDEAL_PERFORM_HALF_ECHO_PROCESSING  0x0004 /* 4 */
#define IDEAL_ORDER                         0x0008 /* 8 */
#define IDEAL_CENTER_KSPACE_HALF_ECHO       0x0010 /* 16 */
#define IDEAL_T2STAR_CORRECT                0x0020 /* 32 */
#define IDEAL_MP_CORRECT                    0x0040 /* 64 */
#define IDEAL_MAG_FITTING                   0x0080 /* 128 */

/*---------------------------------------------------------------------
 | rhrcdixproc
 ---------------------------------------------------------------------*/
#define DIXON_WATER                 0x0001  /* 1 */
#define DIXON_FAT                   0x0002  /* 2 */
#define DIXON_INPHASE               0x0004  /* 4 */
#define DIXON_OUTPHASE              0x0008  /* 8 */
#define DIXON_FIELD                 0x0010  /* 16 */
#define DIXON_ORIGINAL              0x0020  /* 32 */
#define DIXON_FF                    0x0040  /* 64 */
#define DIXON_R2STAR                0x0080  /* 128 */
#define DIXON_WF                    0x0100  /* 256 */
#define DIXON_WATER_BEFORE_PROC     0x0200  /* 512 */
#define DIXON_FAT_BEFORE_PROC       0x0400  /* 1024 */
#define DIXON_INPHASE_BEFORE_PROC   0x0800  /* 2048 */
#define DIXON_OUTPHASE_BEFORE_PROC  0x1000  /* 4096 */
#define DIXON_FIELD_BEFORE_PROC     0x2000  /* 8192 */
#define DIXON_FF_BEFORE_PROC        0x4000  /* 16384 */
#define DIXON_WF_BEFORE_PROC        0x8000  /* 32768 */
#define DIXON_RC                    0x10000 /* 65536 */

/*---------------------------------------------------------------------
 | rhrcidealctrl
 ---------------------------------------------------------------------*/
#define IDEAL_DUMP_FLDATA                  0x0001  /* 1 */
#define IDEAL_LOAD_FLDATA                  0x0002  /* 2 */
#define IDEAL_OUTPUT_BEFORE_POSTCHECKER    0x0004  /* 4 */
#define IDEAL_OUTPUT_AFTER_POSTCHECKER     0x0008  /* 8 */
#define IDEAL_PERFORM_GRADWARP             0x0010  /* 16 */
#define IDEAL_PERFORM_FLOAT2FIX            0x0020  /* 32 */
#define IDEAL_IDEAL_RECV_COMBINE           0x0040  /* 64 */
#define IDEAL_PERFORM_CLIP                 0x0080  /* 128 */
#define IDEAL_GRADWARP_AFTER_RCVCMB        0x0100  /* 256 */
#define IDEAL_USE_CALC_IMAGE               0x0200  /* 512 */
#define IDEAL_POST_PROCESSING_ON_OFF_FLAG  0x0400  /* 1024 */
#define IDEAL_DISABLE_CHEMICAL_SHIFT       0x0800  /* 2048 */
#define IDEAL_DEBUG_IDEAL_IMAGE_NUMBERING  0x1000  /* 4096 */
#define IDEAL_DISABLE_NEW_FINDING_CF       0x2000  /* 8192 */
#define IDEAL_REVERSE_FREQ_AXIS_DIR        0x4000  /* 16384 */
#define IDEAL_REVERSE_PHASE_AXIS_DIR       0x8000  /* 32768 */
#define IDEAL_REVERSE_HOMODYNE_FLAG        0x10000 /* 65536 */
#define IDEAL_REVERSE_FREQ_DIR             0x20000  /* 131072 */
#define IDEAL_IDEAL_GENERIC_DEBUG          0x40000  /* 262144 */
#define IDEAL_IDEAL_MP_TYPE_SELFCAL        0x80000  /* 524288 */

/*---------------------------------------------------------------------
 | rhechopc_yxfitorder
 ---------------------------------------------------------------------*/
#define ECHO_PC_FIRST_ORDER  0x0001  /* 1 */
#define ECHO_PC_SECOND_ORDER 0x0002  /* 2 */
#define ECHO_PC_THIRD_ORDER  0x0004  /* 4 */

/*---------------------------------------------------------------------
 | rhechopc_ctrl
 ---------------------------------------------------------------------*/
#define ECHO_PC_ACQUIRED             0x0001  /* 1 */
#define ECHO_PC_APPLY                0x0002  /* 2 */
#define ECHO_PC_SLICE_BY_SLICE       0x0004  /* 4 */
#define ECHO_PC_RCVR_BY_RCVR         0x0008  /* 8 */
#define ECHO_PC_SKIP_FERMI           0x0010  /* 16 */
#define ECHO_PC_SKIP_ZEROFILL        0x0020  /* 32 */
#define ECHO_PC_AHN_ADPT_STEP        0x0040  /* 64 */
#define ECHO_PC_AHN_CLIP_WEIGHT      0x0080  /* 128 */
#define ECHO_PC_DEBUG_IMAGE_DUMP     0x08000000  /* 134217728 */
#define ECHO_PC_DEBUG_SKIP_HDRCHK    0x10000000  /* 268435456 */
#define ECHO_PC_DEBUG_TRACE          0x20200000  /* 536870912 */
#define ECHO_PC_DEBUG_DATA_DUMP      0x40000000  /* 1073741824 */


/*---------------------------------------------------------------------
 *  | rhrcmavric_control
 *   ---------------------------------------------------------------------*/
#define MAVRIC_RECON                        0x0001  /* 1 */
#define MAVRIC_RECON_DEBLUR                 0x0002  /* 2 */
#define MAVRIC_RECON_JACOBIAN               0x0004  /* 4 */
#define MAVRIC_DONOT_ZERO_ECHO              0x80000 /* 524288: Do not zero out 1st echo of each pass */

/*---------------------------------------------------------------------
 *  | rhrcmavric_image
 *   ---------------------------------------------------------------------*/
#define MAVRIC_ECHO_IMAGES                  0x0001  /* 1 */
#define MAVRIC_SOS_CORR_IMAGES              0x0002  /* 2 */
#define MAVRIC_INIT_SOS_IMAGES              0x0004  /* 4 */
#define MAVRIC_FIELD_MAP                    0x0008  /* 8 */
#define MAVRIC_THRESHOLD_FIELD_MAP          0x0010  /* 16 */
#define MAVRIC_FIELD_MAP_BLURRED            0x0020  /* 32 */
#define MAVRIC_GRADIENT_RATIO               0x0040  /* 64 */
#define MAVRIC_BLURRED_GRADIENT_RATIO       0x0080  /* 128 */
#define MAVRIC_CAPPED_NORM_BLURRED_GRMAP    0x0100  /* 256 */


/*--------------------------------------------------------------------
 | ihnew_series 
 ---------------------------------------------------------------------*/
#define PSD_IHNEWSERIES_UNUSED      0x0001 /* This bit is not used */
#define PSD_IHNEWSERIES_PHASE       0x0002
#define PSD_IHNEWSERIES_I_REAL      0x0004
#define PSD_IHNEWSERIES_Q_IMAG      0x0008

/*--------------------------------------------------------------------
 | rhfiesta : From rdbm.h, re-named for PSD usage
 ---------------------------------------------------------------------*/
#define RHFIESTA_ECHO_DFT 0x0100 /* 9th bit:256 */
#define RHFIESTA_FASTCINE 0x0200 /* 10th bit:512 */
#define RHFIESTA_AVE 1 /* combine by averaging */
#define RHFIESTA_RMS 2 /* combine by root mean square */
#define RHFIESTA_MIP 3 /* combine by MIP */
#define RHFIESTA_1ST_LAST 4 /* YMSmr04091. combine 1st and last echo */
#define RHFIESTA_1ST_ONLY 5 /* YMSmr05612. combine 1st echo only*/
#define RHFIESTA_RMS_AVE 6  /* Echo combine using RMS for Magintude 
                               and Echo combine using Averaging for phase*/
/* For Phase Image UI element */
#define PSD_PHASEIMAGE_NORMAL  -1
#define PSD_PHASEIMAGE_INVERT  -2
#define PSD_PHASEIMAGE_OFF      -3

/* Display info fields constants */
#define DISP_INPLANERES 1
#define DISP_RBWPERPIX  2
#define DISP_ESP        4

#define NOSCALE_INPLANEYRES_SQP 0
#define SCALE_INPLANEYRES_SQP   1

#define NO_ESP_DEFAULT_VALUE 0

/* Maximum number of b-values allowed
 * Note that communication with host UI supports up
 * to MAX_NUM_BVALS */
#define MAX_NUM_BVALS_PSD 40

/*---------------------------------------------------------------------
 | rh3dgw_interptype
 ---------------------------------------------------------------------*/
#define RH3DGW_BICUBIC_INTERP            0 /* high resolution interpolation */
#define RH3DGW_BICUBIC_BSPLINE_INTERP    1 /* bi-cubic in plane, b-spline through plane */

/*---------------------------------------------------------------------
 *  | rhrc3dcinectrl
 *   ---------------------------------------------------------------------*/
#define CINE3D_ACQ                   0x0001     /*3D Cine ACQ mode*/
#define CINE3D_KAT_ARC               0x0002     /*kat ARC RECON mode*/
#define CINE3D_COMPLETE_ECHO_LOOP    0x0004     /*Complete echo loop mode for flow encoding*/  
#define CINE3D_PREVIEW_RECON         0x0008     /*Enable or disable single-frame preview RECON*/ 
#define CINE3D_DICOM_PARAMS_SET      0x0010     /*Recon-generated cine dicom update*/
#define CINE3D_SAMPMODE_BIT1         0x0020     /*sampling mode bit1*/
#define CINE3D_SAMPMODE_BIT2         0x0040     /*sampling mode bit2*/

/*---------------------------------------------------------------------
 | rhfcinemode
 ---------------------------------------------------------------------*/
#define FCINE_OFF      0x0000 /* 0,  Fast CINE disable */
#define FCINE_ON       0x0001 /* 1,  Fast CINE enable */
#define FCINE_NN       0x0002 /* 2,  Nearest Neighbor */
#define FCINE_LI       0x0004 /* 4,  Linear Interpolation */
#define FCINE_WRAP     0x0008 /* 8,  Wrap around enable */
#define FCINE_UNIFORM  0x0010 /* 16, Uniform normalization enable */
#define FCINE_OLD      0x0020 /* 32, Use VVS instead of Fast CINE for Recon */

/*---------------------------------------------------------------------
 | rhsnrnoise
 ---------------------------------------------------------------------*/
#define RHSNRNOISE_BALANCED_PRESCAN 0
#define RHSNRNOISE_OPTIMAL_PRESCAN  1
#define RHSNRNOISE_UNSCALED         2

/*---------------------------------------------------------------------
 | rhvircpolicy
 ---------------------------------------------------------------------*/
#define RHVIRCPOLICY_DISABLE             0
#define RHVIRCPOLICY_RECON_AUTO          1
#define RHVIRCPOLICY_USE_RHNVIRCCHANNELS 2

/*---------------------------------------------------------------------
 | rhvirsenstype
 ---------------------------------------------------------------------*/
#define RHVIRSENSTYPE_CALSCAN          1
#define RHVIRSENSTYPE_SELF_SENSITIVITY 2

/*---------------------------------------------------------------------
 | rhvircoiltype
 ---------------------------------------------------------------------*/
#define RHVIRCOILTYPE_VOLUME   1
#define RHVIRCOILTYPE_X_ENCODE 2

/*---------------------------------------------------------------------
 | rhvircoilunif
 ---------------------------------------------------------------------*/
#define RHVIRCOILUNIF_NONE                      0
#define RHVIRCOILUNIF_CALSCAN                   1
#define RHVIRCOILUNIF_SELF_SENSITIVITY          2
#define RHVIRCOILUNIF_SELF_SENSITIVITY_ADVANCED 3


/*******************************************************************************************************
 * Neuro MR Physics group
 * Department of Neuroradiology
 * Karolinska University Hospital
 * Stockholm, Sweden
 *
 * Filename : GERequired.e
 *
 * Authors  : Stefan Skare, Enrico Avventi, Henric Rydén, Ola Norbeck
 * Date     : 2019-Feb-15
 * Version  : 2.2
 *******************************************************************************************************
 * This code is shared under a specific licence agreement available on GE's collaboration portal, which
 * regulates the use of this software and states specifically that neither Karolinska University nor GE
 * Healthcare can be hold liable for anything related to the use of this software. Please consult this
 * legal document for details on collaborate.mr.gehealthcare.com. As with any other EPIC psd software,
 * compiled by an EPIC licenced user, it is to be used for research purposes only.
 *
 * The Neuro MR physics group at Karolinska University hospital encourages further modifications of, and
 * additions to, the provided PSDs and PSD modules. It is our hope that the KSFoundation library and
 * can provide a common base on top of which research users can share PSDs and PSD modules with each
 * other by e.g. adding branches or forks to the KSFoundation repository:
 * https://gitlab.com/neuromr_karolinska/psd_ksfoundation
 *******************************************************************************************************/

/**
********************************************************************************************************
* @file GERequired.e
* @brief This file has several sections that should be \@inline'd for a main pulse sequence
*        written entirely in KSFoundation EPIC. See instructions for each section on where to \@inline
********************************************************************************************************/




/*******************************************************************************************************
 *******************************************************************************************************
 *
 *  GERequired.e: Global section
 *
 *******************************************************************************************************
 *******************************************************************************************************/

#define GEREQUIRED_E

#include "grad_rf_empty.globals.h"

#ifndef MAX_ENTRY_POINTS
#define MAX_ENTRY_POINTS 15
#endif

#define MAX_TR_OVERSHOOT 200 /* 200 us round-up allowed per TR */

#if EPIC_RELEASE<26
#define DEFAULT_SCAN_INFO_HEAD .optloc = 0.0, .oprloc = 0.0, .opphasoff = 0.0
#else
#define DEFAULT_SCAN_INFO_HEAD .optloc = 0.0, .oprloc = 0.0, .opphasoff = 0.0, .optloc_shift = 0.0, .oprloc_shift = 0.0, .opphasoff_shift = 0.0, .opfov_freq_scale = 1.0, .opfov_phase_scale = 1.0, .opslthick_scale = 1.0
#endif

/* post-DV24 this is defined in $ESETOP/psd/include/epic_geometry_types.h */
#undef DEFAULT_AXIAL_SCAN_INFO
#define DEFAULT_AXIAL_SCAN_INFO { DEFAULT_SCAN_INFO_HEAD, .oprot = {1.0, 0.0, 0.0, \
                                                                    0.0, 1.0, 0.0, \
                                                                    0.0, 0.0, 1.0}}

#define DEFAULT_AX_SCAN_INFO_FREQ_LR DEFAULT_AXIAL_SCAN_INFO

#define DEFAULT_AX_SCAN_INFO_FREQ_AP { DEFAULT_SCAN_INFO_HEAD, .oprot = {0.0, 1.0, 0.0, \
                                                                        -1.0, 0.0, 0.0, \
                                                                         0.0, 0.0, 1.0}}

#define DEFAULT_SAG_SCAN_INFO_FREQ_SI { DEFAULT_SCAN_INFO_HEAD, .oprot = {0.0, 0.0, 1.0, \
                                                                          0.0, 1.0, 0.0, \
                                                                         -1.0, 0.0, 0.0}}

#define DEFAULT_SAG_SCAN_INFO_FREQ_AP { DEFAULT_SCAN_INFO_HEAD, .oprot = {0.0, 0.0, 1.0, \
                                                                          1.0, 0.0, 0.0, \
                                                                          0.0, 1.0, 0.0}}

#define DEFAULT_COR_SCAN_INFO_FREQ_SI { DEFAULT_SCAN_INFO_HEAD, .oprot = {0.0, 1.0, 0.0, \
                                                                          0.0, 0.0, 1.0, \
                                                                          1.0, 0.0, 0.0}}

#define DEFAULT_COR_SCAN_INFO_FREQ_LR { DEFAULT_SCAN_INFO_HEAD, .oprot = {-1.0, 0.0, 0.0, \
                                                                           0.0, 0.0, 1.0, \
                                                                           0.0, 1.0, 0.0}}


#include <math.h>
#if EPIC_RELEASE<26 && defined(HW_IO)
#include <stdioLib.h>
#else
#include <stdio.h>
#include <stdlib.h>
#endif

#if (EPIC_RELEASE > 27) || (EPIC_RELEASE == 27 && EPIC_PATCHNUM >= 3)
/* RX27_R03 requires bool to be assigned as Prescan.e->PSipg now includes addrfbits.h.
   For now typedef it here for RX27_R03 or later. Long term solution is likely to switch to g++ compiler
   for Host */
typedef int bool;
#endif

#include <string.h>

#include "em_psd_ermes.in"

#include "stddef_ep.h"
#include "epicconf.h"
#include "pulsegen.h"
#include "support_func.h"
#include "epic_error.h"
#include "epicfuns.h"
#include "epic_loadcvs.h"
#include "InitAdvisories.h"
#include "psdiopt.h"
#include "epic_iopt_util.h"
#include "filter.h"

#include <sokPortable.h>  /* includes for option key functionality */


/*********************************************************************
 *                    PRESCAN.E GLOBAL SECTION                       *
 *                            PSglobal                               *
 *                                                                   *
 * Common code shared between the Host and Tgt PSD processes.  This  *
 * section contains all the #define's, global variables and function *
 * declarations (prototypes).                                        *
 *********************************************************************/
#include "Prescan.h"

#include <stdio.h>
#include <sysDep.h>
#include <sysDepSupport.h>

#include "dynTG_sliceloc.h"

#define amp_killer 0.4
#define pw_killer 3600 
#define FA_FERMI_BLS 630

/* defines for pimrsaps CVs from op_prescan.h */
#define MRSAPS_OFF 0
#define MRSAPS_CFL 1
#define MRSAPS_TG 2
#define MRSAPS_VTG 2
#define MRSAPS_CFH 3
#define MRSAPS_TR 4
#define MRSAPS_FSEPS 9
#define MRSAPS_RCVN 12
#define MRSAPS_AWS 101
#define MRSAPS_AVS 102
#define MRSAPS_AS  103
#define MRSAPS_FTG 104
#define MRSAPS_XTG 116

/* defines for cfh_ti */
#define CFHTI_1HT 120000
#define CFHTI_3T  190000
#define CFHTE_1HT 50000
#define CFHTE_3T  30000
#define PSD_ISI_CFH (PSD_ISI0_BIT | PSD_ISI1_BIT)
#define PSCFH_SHIMVOL_DEBUG_X 1
#define PSCFH_SHIMVOL_DEBUG_Y 2
#define PSCFH_SHIMVOL_DEBUG_Z 4
#define PSCFH_SHIMVOL_DEBUG_NONE 0

#define PH_SEQUENTIAL   0 
#define PH_CENTRIC_LOW  1 
#define PH_CENTRIC_HIGH 2 
#define RFSHIM_SLQ 1 
#define DYNTG_SLQ  5 

#define B1RF1_SINC 0
#define B1RF1_TBW  1

#define MINFOV_TG 60.0 

/* defines for rcvn_filter */
#define RCVN_MIN_BW  4.0
#define RCVN_MAX_BW  62.5
#define RCVN_MIN_TR  250000

/** Convert from microTesla to Gauss */
#define UTESLA2GAUSS 0.01

#define TR_PSCPASS  100000


#include "KSFoundation.h"


/*******************************************************************************************************
 *******************************************************************************************************
 *
 *  KSSpSat.e: Global section
 *
 *******************************************************************************************************
 *******************************************************************************************************/

enum {KSSPSAT_OFF, KSSPSAT_IMPLICIT, KSSPSAT_EXPLICIT};
enum {KSSPSAT_1, KSSPSAT_2, KSSPSAT_3, KSSPSAT_4, KSSPSAT_5, KSSPSAT_6, KSSPSAT_MAXNUMSAT};
enum {KSSPSAT_NEG=1, KSSPSAT_POS, KSSPSAT_HAD, KSSPSAT_PARA};
enum {KSSPSAT_RF_STD, KSSPSAT_RF_COMPLEX, KSSPSAT_RF_MAXRFTYPES};

#define KSSPSAT_MODULE_LOADED /* can be used to check whether the KSSpsat module has been included in a main psd */

#define KSSPSAT_DEFAULT_FLIP 95
#define KSSPSAT_DEFAULT_SPOILERSCALE 5.0
#define KSSPSAT_DEFAULT_SPOILALLAXES 1
#define KSSPSAT_DEFAULT_SSITIME 1000 /* try to reduce this value */

#define KSSPSAT_EXPLICITSAT_DISABLED 9990.0 /* Set by UI on MR-scanner */
#define KSSPSAT_IMPLICITSAT_DISABLED 9999.0 /* Set by UI on MR-scanner */

/** @brief #### `typedef struct` holding information about the prescribed FOV border (3D)
*/
typedef struct _KSSPSAT_VOLBORDER {
  float freq_min;
  float freq_max;
  float phase_min;
  float phase_max;
  float slice_min;
  float slice_max;
} KSSPSAT_VOLBORDER;
#define KSSPSAT_INIT_VOLBORDER {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}


/** @brief #### `typedef struct` holding information about one spatial saturation pulse location and thickness
*/
typedef struct _KSSPSAT_LOC {
  SCAN_INFO loc; /* .optloc [mm], .oprot */
  float thickness; /* [mm] */
  int gradboard; /* XGRAD, YGRAD, ZGRAD */
  int active; /* KSSPSAT_OFF, KSSPSAT_IMPLICIT, KSSPSAT_EXPLICIT */
} KSSPSAT_LOC;
#define KSSPSAT_INIT_LOC {DEFAULT_AXIAL_SCAN_INFO, 0, KS_NOTSET, KSSPSAT_OFF}

/** @brief #### `typedef struct` holding steering parameters for KSSpSat
*/
typedef struct _KSSPSAT_PARAMS {
  KSSPSAT_VOLBORDER volborder;
  float flip;
  int rftype;
  float spoilerscale; /* scale factor for postgrad spoiler for each selrf (ksspsat.selrf[i].crusherscale) */
  int spoilallaxes;
  int oblmethod;
  int ssi_time;
} KSSPSAT_PARAMS;
#define KSSPSAT_INIT_PARAMS {KSSPSAT_INIT_VOLBORDER, KSSPSAT_DEFAULT_FLIP, KSSPSAT_RF_COMPLEX, KSSPSAT_DEFAULT_SPOILERSCALE, KSSPSAT_DEFAULT_SPOILALLAXES, PSD_OBL_RESTRICT, KSSPSAT_DEFAULT_SSITIME}


/** @brief #### `typedef struct` holding all all gradients and waveforms for the KSSpSat sequence module
*/
typedef struct _KSSPSAT_SEQUENCE {
  KS_BASE base;
  KS_SEQ_CONTROL seqctrl;
  KSSPSAT_LOC satlocation;
  KS_SELRF selrf;
} KSSPSAT_SEQUENCE;
#define KSSPSAT_INIT_SEQUENCE {{0,0,NULL,sizeof(KSSPSAT_SEQUENCE)}, KS_INIT_SEQ_CONTROL, KSSPSAT_INIT_LOC, KS_INIT_SELRF}


/* Function prototypes */
int ksspsat_pg(KSSPSAT_SEQUENCE *ksspsat);
void ksspsat_scan_seqstate(KSSPSAT_SEQUENCE *ksspsat, float rfphase);



/*******************************************************************************************************
 *******************************************************************************************************
 *
 *  KSChemSat.e: Global section
 *
 *******************************************************************************************************
 *******************************************************************************************************/

enum {KSCHEMSAT_OFF, KSCHEMSAT_FAT, KSCHEMSAT_WATER};
enum {KSCHEMSAT_RF_STD, KSCHEMSAT_RF_SINC};

#define KSCHEMSAT_MODULE_LOADED /* can be used to check whether the KSChemsat module has been included in a main psd */

#define KSCHEMSAT_DEFAULT_FLIP 95
#define KSCHEMSAT_DEFAULT_SINCRF_BW_15T 150 /* for 1.5T */
#define KSCHEMSAT_DEFAULT_SINCRF_BW_3T 300 /* for 3T */
#define KSCHEMSAT_DEFAULT_SINCRF_TBP 4
#define KSCHEMSAT_DEFAULT_SPOILERAREA 5000
#define KSCHEMSAT_DEFAULT_SSITIME 1000 /* try to reduce this value */

/** @brief #### `typedef struct` holding steering parameters for KSChemSat
*/
typedef struct _KSCHEMSAT_PARAMS {
  int satmode;
  float flip;
  int rfoffset; /* [Hz] */
  int rftype;
  int sincrf_bw;
  int sincrf_tbp;
  float spoilerarea;
  int ssi_time;
} KSCHEMSAT_PARAMS;
#define KSCHEMSAT_INIT_PARAMS {KSCHEMSAT_OFF, KSCHEMSAT_DEFAULT_FLIP, 0, KSCHEMSAT_RF_STD, KSCHEMSAT_DEFAULT_SINCRF_BW_3T, KSCHEMSAT_DEFAULT_SINCRF_TBP, KSCHEMSAT_DEFAULT_SPOILERAREA, KSCHEMSAT_DEFAULT_SSITIME}

/** @brief #### `typedef struct` holding all information about the KSChemSat sequence module incl. all gradients and waveforms
*/
typedef struct _KSCHEMSAT_SEQUENCE {
  KS_BASE base;
  KS_SEQ_CONTROL seqctrl;
  KSCHEMSAT_PARAMS params;
  KS_RF rf;
  KS_TRAP spoiler;
} KSCHEMSAT_SEQUENCE;
#define KSCHEMSAT_INIT_SEQUENCE {{0,0,NULL,sizeof(KSCHEMSAT_SEQUENCE)}, KS_INIT_SEQ_CONTROL, KSCHEMSAT_INIT_PARAMS, KS_INIT_RF, KS_INIT_TRAP}


/* Function prototypes */
int kschemsat_pg(KSCHEMSAT_SEQUENCE *chemsat);

/*******************************************************************************************************
 *******************************************************************************************************
 *
 *  KSInversion.e: Global section
 *
 *******************************************************************************************************
 *******************************************************************************************************/

enum {KSINV_OFF, KSINV_IR_SIMPLE, KSINV_IR_SLICEAHEAD, KSINV_FLAIR_BLOCK, KSINV_FLAIR_T2PREP_BLOCK};
enum {KSINV_RF_STD, KSINV_RF_ADIABATIC, KSINV_RF_CUSTOM};
typedef enum {KSINV_LOOP_NORMAL, KSINV_LOOP_DUMMY, KSINV_LOOP_SLICEAHEAD_FIRST, KSINV_LOOP_SLICEAHEAD_LAST} KSINV_LOOP_MODE;

#define KSINV_MODULE_LOADED /* can be used to check whether the KSInversion module has been included in a main psd */

#define KSINV_DEFAULT_FLIP 180
#define KSINV_DEFAULT_SPOILERAREA 5000
#define KSINV_DEFAULT_SSITIME 1000 /* try to reduce this value */
#define KSINV_DEFAULT_STARTPOS 100
#define KSINV_FILLTR_SSITIME 1000 /* try to reduce this value */
#define KSINV_MINTR_T2FLAIR 8000000 /* default minTR [us] for T2FLAIR, 8 [s] */
#define KSINV_MINTR_T1FLAIR 1300000 /* default minTR [us] for T1FLAIR, 1.3 [s] */
#define KSINV_MAXTR_T1FLAIR 2500000 /* default maxTR [us] for T1FLAIR, 2.5 [s] */
#define KSINV_MAXTHICKFACT 3.0 /* how much the inversion slice thickness may increase over opslthick */

/* values in [ms] */
#define T1_CSF_3T   4500
#define T1_CSF_1_5T 3600
#define T1_GM_3T   1400
#define T1_GM_1_5T 1100
#define T1_WM_3T   750
#define T1_WM_1_5T 600
#define T1_FAT_3T   340
#define T1_FAT_1_5T 260


/** @brief #### `typedef struct` holding steering parameters for KSInversion
*/
typedef struct _KSINV_PARAMS {
  int irmode; /* KSINV_OFF, KSINV_IR_SIMPLE, KSINV_IR_SLICEAHEAD, KSINV_FLAIR_BLOCK, KSINV_FLAIR_T2PREP_BLOCK */
  float flip;
  float slthick;
  int rfoffset; /* [Hz] */
  int rftype; /* KSINV_RF_STD or KSINV_RF_ADIABATIC */
  float spoilerarea;
  int approxti; /* Allow TI to be approximized */
  int startpos; /* time from beginning of inv seq to the beginning of the inversion pulse */
  int nslicesahead; /* Only used for irmode = KSINV_IR_SLICEAHEAD */
  int nflairslices; /* #slices that can fit in a KSINV_FLAIR_BLOCK or KSINV_FLAIR_T2PREP_BLOCK*/
  int ssi_time;
  /* T2prep related */
  float flip_exc;
  float slthick_exc;
  int N_Refoc;
  int t2prep_TE;
  int rftype_refoc; /* KSINV_RF_STD or KSINV_RF_ADIABATIC */
} KSINV_PARAMS;
#define KSINV_INIT_PARAMS {KSINV_OFF, KSINV_DEFAULT_FLIP, KS_NOTSET, 0, KSINV_RF_STD, KSINV_DEFAULT_SPOILERAREA, FALSE, KSINV_DEFAULT_STARTPOS, 0, 0, KSINV_DEFAULT_SSITIME, 90, KS_NOTSET, 1, KS_NOTSET, KSINV_RF_STD}

/** @brief #### typedef struct holding all information about the KSInversion sequence module incl. all gradients and waveforms
*/
typedef struct _KSINV_SEQUENCE {
  KS_BASE base;
  KS_SEQ_CONTROL seqctrl;
  KSINV_PARAMS params; /* input params */
  KS_SELRF selrfinv; /* Used for inversion and/or refocung pulse for t2prep */
  KS_TRAP spoiler;
  KS_SELRF selrfexc; /* t2prep */
  KS_SELRF selrfflip; /* t2prep */
  KS_SELRF selrfrefoc;
} KSINV_SEQUENCE;
#define KSINV_INIT_SEQUENCE {{0,0,NULL,sizeof(KSINV_SEQUENCE)}, KS_INIT_SEQ_CONTROL, KSINV_INIT_PARAMS, KS_INIT_SELRF, KS_INIT_TRAP, KS_INIT_SELRF, KS_INIT_SELRF, KS_INIT_SELRF}


/* Function prototypes */
STATUS ksinv_eval_checkTR_SAR(KS_SEQ_COLLECTION *seqcollection, KS_SLICE_PLAN *slice_plan, int (*play_coreslice)(const SCAN_INFO *, int, int, void **), int core_nargs, void **core_args);
int ksinv_pg(KSINV_SEQUENCE *);
int ksinv_scan_sliceloop(const KS_SLICE_PLAN *slice_plan, const SCAN_INFO *slice_positions, int passindx, 
                         KSINV_SEQUENCE *ksinv1, KSINV_SEQUENCE *ksinv2, KS_SEQ_CONTROL *ksinv_filltr, KSINV_LOOP_MODE ksinv_loop_mode,
                         int (*play_coreslice)(const SCAN_INFO *, int, int, void **), int core_nargs, void **core_args);



#define KSFSE_MINHNOVER 6
#define KSFSE_MIN_SSI_TIME 200
#define KSFSE_MAXTHICKFACT 3.0

enum {KSFSE_RECOVERY_OFF, KSFSE_RECOVERY_T1WOPT, KSFSE_RECOVERY_FAST};

#ifndef GEREQUIRED_E
#error GERequired.e must be inlined before ksfse_implementation.e
#endif

/** @brief #### `typedef struct` holding all all gradients and waveforms for the ksfse sequence
*/
typedef struct KSFSE_SEQUENCE {
  KS_SEQ_CONTROL seqctrl; /**< Control object keeping track of the sequence and its components */
  KS_READTRAP read; /**< Readout trapezoid including data acquisition window */
  KS_TRAP readdephaser; /**< Static dephaser for readout trapezoid */
  KS_PHASER phaseenc; /**< Phase encoding (YGRAD). 2D & 3D */
  KS_PHASER zphaseenc; /**< 3D: Second phase encoding (ZGRAD) */
  KS_TRAP spoiler; /**< Gradient spoiler after FSE train */
  KS_SELRF selrfexc; /**< Excitation RF pulse with slice select and rephasing gradient */
  KS_SELRF selrfref1st; /**< First refocusing RF pulse */
  KS_SELRF selrfref2nd; /**< Second refocusing RF pulse */
  KS_SELRF selrfref; /* 3rd-Nth refocusing RF pulse */
  KS_SELRF selrfrecover; /**< Optional Fast Recovery/T1-optimization refocusing RF pulse */
  KS_SELRF selrfrecoverref; /**< Optional Fast Recovery/T1-optimization tip-up/down (to Mz) RF pulse */
  KS_PHASEENCODING_PLAN phaseenc_plan; /**<  Phase encoding plan, for 2D and 3D use */
} KSFSE_SEQUENCE;
#define KSFSE_INIT_SEQUENCE {KS_INIT_SEQ_CONTROL, KS_INIT_READTRAP, KS_INIT_TRAP, KS_INIT_PHASER, KS_INIT_PHASER, KS_INIT_TRAP, KS_INIT_SELRF, KS_INIT_SELRF, KS_INIT_SELRF, KS_INIT_SELRF, KS_INIT_SELRF, KS_INIT_SELRF, KS_INIT_PHASEENCODING_PLAN};



/*****************************************************************************************************
 * GLOBALS
 *****************************************************************************************************/

#include "KSFoundation.h"

/* GE RF Pulses (c.f. KSFoundation_GERFpulses.m) */
#include <KSFoundation_GERF.h>


#endif /* h_ksfse_global_h */

